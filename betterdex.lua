local nodes = {}
local selection
local clonerefs = cloneref or function(...) return ... end

modfiers = {
	SearchOnType = true,
	CustomColor = Color3.fromRGB(255, 255, 255),
	LocalPlayerColor = Color3.new(0.54902, 0, 0)
}

for i, v in next, modfiers do
	getfenv(1)[i] = v
end

iconImages = {
	Mono = "rbxassetid://13154391952",
	Colourful = "rbxassetid://13155827071",
}

currentTheme = "Colourful"

iconData = {
	"Accessory",
	"Accoutrement",
	"Actor",
	"AdGui",
	"AdPortal",
	"AdService",
	"AdvancedDragger",
	"AirController",
	"AlignOrientation",
	"AlignPosition",
	"AnalysticsService",
	"AnalysticsSettings",
	"AnalyticsService",
	"AngularVelocity",
	"Animation",
	"AnimationClip",
	"AnimationClipProvider",
	"AnimationController",
	"AnimationFromVideoCreatorService",
	"AnimationFromVideoCreatorStudioService",
	"AnimationRigData",
	"AnimationStreamTrack",
	"AnimationTrack",
	"Animator",
	"AppStorageService",
	"AppUpdateService",
	"ArcHandles",
	"AssetCounterService",
	"AssetDeliveryProxy",
	"AssetImportService",
	"AssetImportSession",
	"AssetManagerService",
	"AssetService",
	"AssetSoundEffect",
	"Atmosphere",
	"Attachment",
	"AvatarEditorService",
	"AvatarImportService",
	"Backpack",
	"BackpackItem",
	"BadgeService",
	"BallSocketConstraint",
	"BasePart",
	"BasePlayerGui",
	"BaseScript",
	"BaseWrap",
	"Beam",
	"BevelMesh",
	"BillboardGui",
	"BinaryStringValue",
	"BindableEvent",
	"BindableFunction",
	"BlockMesh",
	"BloomEffect",
	"BlurEffect",
	"BodyAngularVelocity",
	"BodyColors",
	"BodyForce",
	"BodyGyro",
	"BodyMover",
	"BodyPosition",
	"BodyThrust",
	"BodyVelocity",
	"Bone",
	"BoolValue",
	"BoxHandleAdornment",
	"Breakpoint",
	"BreakpointManager",
	"BrickColorValue",
	"BrowserService",
	"BubbleChatConfiguration",
	"BulkImportService",
	"CacheableContentProvider",
	"CalloutService",
	"Camera",
	"CanvasGroup",
	"CatalogPages",
	"CFrameValue",
	"ChangeHistoryService",
	"ChannelSelectorSoundEffect",
	"CharacterAppearance",
	"CharacterMesh",
	"Chat",
	"ChatInputBarConfiguration",
	"ChatWindowConfiguration",
	"ChorusSoundEffect",
	"ClickDetector",
	"ClientReplicator",
	"ClimbController",
	"Clothing",
	"Clouds",
	"ClusterPacketCache",
	"CollectionService",
	"Color3Value",
	"ColorCorrectionEffect",
	"CommandInstance",
	"CommandService",
	"CompressorSoundEffect",
	"ConeHandleAdornment",
	"Configuration",
	"ConfigureServerService",
	"Constraint",
	"ContentProvider",
	"ContextActionService",
	"Controller",
	"ControllerBase",
	"ControllerManager",
	"ControllerService",
	"CookiesService",
	"CoreGui",
	"CorePackages",
	"CoreScript",
	"CoreScriptSyncService",
	"CornerWedgePart",
	"CrossDMScriptChangeListener",
	"CSGDictionaryService",
	"CurveAnimation",
	"CustomEvent",
	"CustomEventReceiver",
	"CustomSoundEffect",
	"CylinderHandleAdornment",
	"CylinderMesh",
	"CylindricalConstraint",
	"DataModel",
	"DataModelMesh",
	"DataModelPatchService",
	"DataModelSession",
	"DataStore",
	"DataStoreIncrementOptions",
	"DataStoreInfo",
	"DataStoreKey",
	"DataStoreKeyInfo",
	"DataStoreKeyPages",
	"DataStoreListingPages",
	"DataStoreObjectVersionInfo",
	"DataStoreOptions",
	"DataStorePages",
	"DataStoreService",
	"DataStoreSetOptions",
	"DataStoreVersionPages",
	"Debris",
	"DebuggablePluginWatcher",
	"DebuggerBreakpoint",
	"DebuggerConnection",
	"DebuggerConnectionManager",
	"DebuggerLuaResponse",
	"DebuggerManager",
	"DebuggerUIService",
	"DebuggerVariable",
	"DebuggerWatch",
	"DebugSettings",
	"Decal",
	"DepthOfFieldEffect",
	"DeviceIdService",
	"Dialog",
	"DialogChoice",
	"DistortionSoundEffect",
	"DockWidgetPluginGui",
	"DoubleConstrainedValue",
	"DraftsService",
	"Dragger",
	"DraggerService",
	"DynamicRotate",
	"EchoSoundEffect",
	"EmotesPages",
	"EqualizerSoundEffect",
	"EulerRotationCurve",
	"EventIngestService",
	"Explosion",
	"FaceAnimatorService",
	"FaceControls",
	"FaceInstance",
	"FacialAnimationRecordingService",
	"FacialAnimationStreamingService",
	"Feature",
	"File",
	"FileMesh",
	"Fire",
	"Flag",
	"FlagStand",
	"FlagStandService",
	"FlangeSoundEffect",
	"FloatCurve",
	"FloorWire",
	"FlyweightService",
	"Folder",
	"ForceField",
	"FormFactorPart",
	"Frame",
	"FriendPages",
	"FriendService",
	"FunctionalTest",
	"GamepadService",
	"GamePassService",
	"GameSettings",
	"GenericSettings",
	"Geometry",
	"GetTextBoundsParams",
	"GlobalDataStore",
	"GlobalSettings",
	"Glue",
	"GoogleAnalyticsConfiguration",
	"GroundController",
	"GroupService",
	"GuiBase",
	"GuiBase2d",
	"GuiBase3d",
	"GuiButton",
	"GuidRegistryService",
	"GuiLabel",
	"GuiMain",
	"GuiObject",
	"GuiService",
	"HandleAdornment",
	"Handles",
	"HandlesBase",
	"HapticService",
	"Hat",
	"HeightmapImporterService",
	"HiddenSurfaceRemovalAsset",
	"Highlight",
	"HingeConstraint",
	"Hint",
	"Hole",
	"Hopper",
	"HopperBin",
	"HSRDataContentProvider",
	"HttpRbxApiService",
	"HttpRequest",
	"HttpService",
	"Humanoid",
	"HumanoidController",
	"HumanoidDescription",
	"IKControl",
	"ILegacyStudioBridge",
	"ImageButton",
	"ImageHandleAdornment",
	"ImageLabel",
	"ImporterAnimationSettings",
	"ImporterBaseSettings",
	"ImporterFacsSettings",
	"ImporterGroupSettings",
	"ImporterJointSettings",
	"ImporterMaterialSettings",
	"ImporterMeshSettings",
	"ImporterRootSettings",
	"IncrementalPatchBuilder",
	"InputObject",
	"InsertService",
	"Instance",
	"InstanceAdornment",
	"IntConstrainedValue",
	"IntValue",
	"InventoryPages",
	"IXPService",
	"JointInstance",
	"JointsService",
	"KeyboardService",
	"Keyframe",
	"KeyframeMarker",
	"KeyframeSequence",
	"KeyframeSequenceProvider",
	"LanguageService",
	"LayerCollector",
	"LegacyStudioBridge",
	"Light",
	"Lighting",
	"LinearVelocity",
	"LineForce",
	"LineHandleAdornment",
	"LocalDebuggerConnection",
	"LocalizationService",
	"LocalizationTable",
	"LocalScript",
	"LocalStorageService",
	"LodDataEntity",
	"LodDataService",
	"LoginService",
	"LogService",
	"LSPFileSyncService",
	"LuaSettings",
	"LuaSourceContainer",
	"LuauScriptAnalyzerService",
	"LuaWebService",
	"ManualGlue",
	"ManualSurfaceJointInstance",
	"ManualWeld",
	"MarkerCurve",
	"MarketplaceService",
	"MaterialService",
	"MaterialVariant",
	"MemoryStoreQueue",
	"MemoryStoreService",
	"MemoryStoreSortedMap",
	"MemStorageConnection",
	"MemStorageService",
	"MeshContentProvider",
	"MeshPart",
	"Message",
	"MessageBusConnection",
	"MessageBusService",
	"MessagingService",
	"MetaBreakpoint",
	"MetaBreakpointContext",
	"MetaBreakpointManager",
	"Model",
	"ModuleScript",
	"Motor",
	"Motor6D",
	"MotorFeature",
	"Mouse",
	"MouseService",
	"MultipleDocumentInterfaceInstance",
	"NegateOperation",
	"NetworkClient",
	"NetworkMarker",
	"NetworkPeer",
	"NetworkReplicator",
	"NetworkServer",
	"NetworkSettings",
	"NoCollisionConstraint",
	"NonReplicatedCSGDictionaryService",
	"NotificationService",
	"NumberPose",
	"NumberValue",
	"ObjectValue",
	"OrderedDataStore",
	"OutfitPages",
	"PackageLink",
	"PackageService",
	"PackageUIService",
	"Pages",
	"Pants",
	"ParabolaAdornment",
	"Part",
	"PartAdornment",
	"ParticleEmitter",
	"PartOperation",
	"PartOperationAsset",
	"PatchMapping",
	"Path",
	"PathfindingLink",
	"PathfindingModifier",
	"PathfindingService",
	"PausedState",
	"PausedStateBreakpoint",
	"PausedStateException",
	"PermissionsService",
	"PhysicsService",
	"PhysicsSettings",
	"PitchShiftSoundEffect",
	"Plane",
	"PlaneConstraint",
	"Platform",
	"Player",
	"PlayerEmulatorService",
	"PlayerGui",
	"PlayerMouse",
	"Players",
	"PlayerScripts",
	"Plugin",
	"PluginAction",
	"PluginDebugService",
	"PluginDragEvent",
	"PluginGui",
	"PluginGuiService",
	"PluginManagementService",
	"PluginManager",
	"PluginManagerInterface",
	"PluginMenu",
	"PluginMouse",
	"PluginPolicyService",
	"PluginToolbar",
	"PluginToolbarButton",
	"PointLight",
	"PointsService",
	"PolicyService",
	"Pose",
	"PoseBase",
	"PostEffect",
	"PrismaticConstraint",
	"ProcessInstancePhysicsService",
	"ProximityPrompt",
	"ProximityPromptService",
	"PublishService",
	"PVAdornment",
	"PVInstance",
	"QWidgetPluginGui",
	"RayValue",
	"RbxAnalyticsService",
	"ReflectionMetadata",
	"ReflectionMetadataCallbacks",
	"ReflectionMetadataClass",
	"ReflectionMetadataClasses",
	"ReflectionMetadataEnum",
	"ReflectionMetadataEnumItem",
	"ReflectionMetadataEnums",
	"ReflectionMetadataEvents",
	"ReflectionMetadataFunctions",
	"ReflectionMetadataItem",
	"ReflectionMetadataMember",
	"ReflectionMetadataProperties",
	"ReflectionMetadataYieldFunctions",
	"RemoteDebuggerServer",
	"RemoteEvent",
	"RemoteFunction",
	"RenderingTest",
	"RenderSettings",
	"ReplicatedFirst",
	"ReplicatedStorage",
	"ReverbSoundEffect",
	"RigidConstraint",
	"RobloxPluginGuiService",
	"RobloxReplicatedStorage",
	"RocketPropulsion",
	"RodConstraint",
	"RopeConstraint",
	"Rotate",
	"RotateP",
	"RotateV",
	"RotationCurve",
	"RtMessagingService",
	"RunningAverageItemDouble",
	"RunningAverageItemInt",
	"RunningAverageTimeIntervalItem",
	"RunService",
	"RuntimeScriptService",
	"ScreenGui",
	"ScreenshotHud",
	"Script",
	"ScriptChangeService",
	"ScriptCloneWatcher",
	"ScriptCloneWatcherHelper",
	"ScriptContext",
	"ScriptDebugger",
	"ScriptDocument",
	"ScriptEditorService",
	"ScriptRegistrationService",
	"ScriptService",
	"ScrollingFrame",
	"Seat",
	"Selection",
	"SelectionBox",
	"SelectionLasso",
	"SelectionPartLasso",
	"SelectionPointLasso",
	"SelectionSphere",
	"ServerReplicator",
	"ServerScriptService",
	"ServerStorage",
	"ServiceProvider",
	"SessionService",
	"Shirt",
	"ShirtGraphic",
	"SkateboardController",
	"SkateboardPlatform",
	"Skin",
	"Sky",
	"SlidingBallConstraint",
	"Smoke",
	"Snap",
	"SnippetService",
	"SocialService",
	"SolidModelContentProvider",
	"Sound",
	"SoundEffect",
	"SoundGroup",
	"SoundService",
	"Sparkles",
	"SpawnerService",
	"SpawnLocation",
	"Speaker",
	"SpecialMesh",
	"SphereHandleAdornment",
	"SpotLight",
	"SpringConstraint",
	"StackFrame",
	"StandalonePluginScripts",
	"StandardPages",
	"StarterCharacterScripts",
	"StarterGear",
	"StarterGui",
	"StarterPack",
	"StarterPlayer",
	"StarterPlayerScripts",
	"Stats",
	"StatsItem",
	"Status",
	"StopWatchReporter",
	"StringValue",
	"Studio",
	"StudioAssetService",
	"StudioData",
	"StudioDeviceEmulatorService",
	"StudioHighDpiService",
	"StudioPublishService",
	"StudioScriptDebugEventListener",
	"StudioService",
	"StudioTheme",
	"SunRaysEffect",
	"SurfaceAppearance",
	"SurfaceGui",
	"SurfaceGuiBase",
	"SurfaceLight",
	"SurfaceSelection",
	"SwimController",
	"TaskScheduler",
	"Team",
	"TeamCreateService",
	"Teams",
	"TeleportAsyncResult",
	"TeleportOptions",
	"TeleportService",
	"TemporaryCageMeshProvider",
	"TemporaryScriptService",
	"Terrain",
	"TerrainDetail",
	"TerrainRegion",
	"TestService",
	"TextBox",
	"TextBoxService",
	"TextButton",
	"TextChannel",
	"TextChatCommand",
	"TextChatConfigurations",
	"TextChatMessage",
	"TextChatMessageProperties",
	"TextChatService",
	"TextFilterResult",
	"TextLabel",
	"TextService",
	"TextSource",
	"Texture",
	"ThirdPartyUserService",
	"ThreadState",
	"TimerService",
	"ToastNotificationService",
	"Tool",
	"ToolboxService",
	"Torque",
	"TorsionSpringConstraint",
	"TotalCountTimeIntervalItem",
	"TouchInputService",
	"TouchTransmitter",
	"TracerService",
	"TrackerStreamAnimation",
	"Trail",
	"Translator",
	"TremoloSoundEffect",
	"TriangleMeshPart",
	"TrussPart",
	"Tween",
	"TweenBase",
	"TweenService",
	"UGCValidationService",
	"UIAspectRatioConstraint",
	"UIBase",
	"UIComponent",
	"UIConstraint",
	"UICorner",
	"UIGradient",
	"UIGridLayout",
	"UIGridStyleLayout",
	"UILayout",
	"UIListLayout",
	"UIPadding",
	"UIPageLayout",
	"UIScale",
	"UISizeConstraint",
	"UIStroke",
	"UITableLayout",
	"UITextSizeConstraint",
	"UnionOperation",
	"UniversalConstraint",
	"UnvalidatedAssetService",
	"UserGameSettings",
	"UserInputService",
	"UserService",
	"UserSettings",
	"UserStorageService",
	"ValueBase",
	"Vector3Curve",
	"Vector3Value",
	"VectorForce",
	"VehicleController",
	"VehicleSeat",
	"VelocityMotor",
	"VersionControlService",
	"VideoCaptureService",
	"VideoFrame",
	"ViewportFrame",
	"VirtualInputManager",
	"VirtualUser",
	"VisibilityService",
	"Visit",
	"VoiceChannel",
	"VoiceChatInternal",
	"VoiceChatService",
	"VoiceSource",
	"VRService",
	"WedgePart",
	"Weld",
	"WeldConstraint",
	"WireframeHandleAdornment",
	"Workspace",
	"WorldModel",
	"WorldRoot",
	"WrapLayer",
	"WrapTarget",
}

for i, v in next, iconData do
	iconData[v] = i
end

local EmbeddedModules = {
	["Explorer"] = function()
--[[
	Explorer App Module
	
	The main explorer interface
]]

		-- Common Locals
		local Main,Lib,Apps,Settings -- Main Containers
		local Explorer, Properties, ScriptViewer, Notebook -- Major Apps
		local API,RMD,env,service,plr,create,createSimple -- Main Locals

		local function initDeps(data)
			Main = data.Main
			Lib = data.Lib
			Apps = data.Apps
			Settings = data.Settings

			API = data.API
			RMD = data.RMD
			env = data.env
			service = data.service
			plr = data.plr
			create = data.create
			createSimple = data.createSimple
		end

		local function initAfterMain()
			Explorer = Apps.Explorer
			Properties = Apps.Properties
			ScriptViewer = Apps.ScriptViewer
			Notebook = Apps.Notebook
		end

		local function main()
			local Explorer = {}
			local nodes,tree,listEntries,explorerOrders,searchResults,specResults = {},{},{},{},{},{}
			local expanded
			local entryTemplate,treeFrame,toolBar,descendantAddedCon,descendantRemovingCon,itemChangedCon
			local ffa = game.FindFirstAncestorWhichIsA
			local getDescendants = game.GetDescendants
			local getTextSize = service.TextService.GetTextSize
			local updateDebounce,refreshDebounce = false,false
			local nilNode = {Obj = Instance.new("Folder")}
			local idCounter = 0
			local scrollV,scrollH,selection,clipboard
			local renameBox,renamingNode,searchFunc
			local sortingEnabled,autoUpdateSearch
			local table,math = table,math
			local nilMap,nilCons = {},{}
			local connectSignal = game.DescendantAdded.Connect
			local addObject,removeObject,moveObject = nil,nil,nil

			addObject = function(root)
				if nodes[root] then return end

				local isNil = false
				local rootParObj = ffa(root,"Instance")
				local par = nodes[rootParObj]

				-- Nil Handling
				if not par then
					if nilMap[root] then
						nilCons[root] = nilCons[root] or {
							connectSignal(root.ChildAdded,addObject),
							connectSignal(root.AncestryChanged,moveObject),
						}
						par = nilNode
						isNil = true
					else
						return
					end
				elseif nilMap[rootParObj] or par == nilNode then
					nilMap[root] = true
					nilCons[root] = nilCons[root] or {
						connectSignal(root.ChildAdded,addObject),
						connectSignal(root.AncestryChanged,moveObject),
					}
					isNil = true
				end

				local newNode = {Obj = root, Parent = par}
				nodes[root] = newNode

				-- Automatic sorting if expanded
				if sortingEnabled and expanded[par] and par.Sorted then
					local left,right = 1,#par
					local floor = math.floor
					local sorter = Explorer.NodeSorter
					local pos = (right == 0 and 1)

					if not pos then
						while true do
							if left >= right then
								if sorter(newNode,par[left]) then
									pos = left
								else
									pos = left+1
								end
								break
							end

							local mid = floor((left+right)/2)
							if sorter(newNode,par[mid]) then
								right = mid-1
							else
								left = mid+1
							end
						end
					end

					table.insert(par,pos,newNode)
				else
					par[#par+1] = newNode
					par.Sorted = nil
				end

				local insts = getDescendants(root)
				for i = 1,#insts do
					local obj = insts[i]
					if nodes[obj] then continue end -- Deferred

					local par = nodes[ffa(obj,"Instance")]
					if not par then continue end
					local newNode = {Obj = obj, Parent = par}
					nodes[obj] = newNode
					par[#par+1] = newNode

					-- Nil Handling
					if isNil then
						nilMap[obj] = true
						nilCons[obj] = nilCons[obj] or {
							connectSignal(obj.ChildAdded,addObject),
							connectSignal(obj.AncestryChanged,moveObject),
						}
					end
				end

				if searchFunc and autoUpdateSearch then
					searchFunc({newNode})
				end

				if not updateDebounce and Explorer.IsNodeVisible(par) then
					if expanded[par] then
						Explorer.PerformUpdate()
					elseif not refreshDebounce then
						Explorer.PerformRefresh()
					end
				end
			end

			removeObject = function(root)
				local node = nodes[root]
				if not node then return end

				-- Nil Handling
				if nilMap[node.Obj] then
					moveObject(node.Obj)
					return
				end

				local par = node.Parent
				if par then
					par.HasDel = true
				end

				local function recur(root)
					for i = 1,#root do
						local node = root[i]
						if not node.Del then
							nodes[node.Obj] = nil
							if #node > 0 then recur(node) end
						end
					end
				end
				recur(node)
				node.Del = true
				nodes[root] = nil

				if par and not updateDebounce and Explorer.IsNodeVisible(par) then
					if expanded[par] then
						Explorer.PerformUpdate()
					elseif not refreshDebounce then
						Explorer.PerformRefresh()
					end
				end
			end

			moveObject = function(obj)
				local node = nodes[obj]
				if not node then return end

				local oldPar = node.Parent
				local newPar = nodes[ffa(obj,"Instance")]
				if oldPar == newPar then return end

				-- Nil Handling
				if not newPar then
					if nilMap[obj] then
						newPar = nilNode
					else
						return
					end
				elseif nilMap[newPar.Obj] or newPar == nilNode then
					nilMap[obj] = true
					nilCons[obj] = nilCons[obj] or {
						connectSignal(obj.ChildAdded,addObject),
						connectSignal(obj.AncestryChanged,moveObject),
					}
				end

				if oldPar then
					local parPos = table.find(oldPar,node)
					if parPos then table.remove(oldPar,parPos) end
				end

				node.Id = nil
				node.Parent = newPar

				if sortingEnabled and expanded[newPar] and newPar.Sorted then
					local left,right = 1,#newPar
					local floor = math.floor
					local sorter = Explorer.NodeSorter
					local pos = (right == 0 and 1)

					if not pos then
						while true do
							if left >= right then
								if sorter(node,newPar[left]) then
									pos = left
								else
									pos = left+1
								end
								break
							end

							local mid = floor((left+right)/2)
							if sorter(node,newPar[mid]) then
								right = mid-1
							else
								left = mid+1
							end
						end
					end

					table.insert(newPar,pos,node)
				else
					newPar[#newPar+1] = node
					newPar.Sorted = nil
				end

				if searchFunc and searchResults[node] then
					local currentNode = node.Parent
					while currentNode and (not searchResults[currentNode] or expanded[currentNode] == 0) do
						expanded[currentNode] = true
						searchResults[currentNode] = true
						currentNode = currentNode.Parent
					end
				end

				if not updateDebounce and (Explorer.IsNodeVisible(newPar) or Explorer.IsNodeVisible(oldPar)) then
					if expanded[newPar] or expanded[oldPar] then
						Explorer.PerformUpdate()
					elseif not refreshDebounce then
						Explorer.PerformRefresh()
					end
				end
			end

			Explorer.ViewWidth = 0
			Explorer.Index = 0
			Explorer.EntryIndent = 20
			Explorer.FreeWidth = 32
			Explorer.GuiElems = {}

			Explorer.InitRenameBox = function()
				renameBox = create({{1,"TextBox",{BackgroundColor3=Color3.new(0.17647059261799,0.17647059261799,0.17647059261799),BorderColor3=Color3.new(0.062745101749897,0.51764708757401,1),BorderMode=2,ClearTextOnFocus=false,Font=3,Name="RenameBox",PlaceholderColor3=Color3.new(0.69803923368454,0.69803923368454,0.69803923368454),Position=UDim2.new(0,26,0,2),Size=UDim2.new(0,200,0,16),Text="",TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,Visible=false,ZIndex=2}}})

				renameBox.Parent = Explorer.Window.GuiElems.Content.List

				renameBox.FocusLost:Connect(function()
					if not renamingNode then return end

					pcall(function() renamingNode.Obj.Name = renameBox.Text end)
					renamingNode = nil
					Explorer.Refresh()
				end)

				renameBox.Focused:Connect(function()
					renameBox.SelectionStart = 1
					renameBox.CursorPosition = #renameBox.Text + 1
				end)
			end

			Explorer.SetRenamingNode = function(node)
				renamingNode = node
				renameBox.Text = tostring(node.Obj)
				renameBox:CaptureFocus()
				Explorer.Refresh()
			end

			Explorer.SetSortingEnabled = function(val)
				sortingEnabled = val
				Settings.Explorer.Sorting = val
			end

			Explorer.UpdateView = function()
				local maxNodes = math.ceil(treeFrame.AbsoluteSize.Y / 20)
				local maxX = treeFrame.AbsoluteSize.X
				local totalWidth = Explorer.ViewWidth + Explorer.FreeWidth

				scrollV.VisibleSpace = maxNodes
				scrollV.TotalSpace = #tree + 1
				scrollH.VisibleSpace = maxX
				scrollH.TotalSpace = totalWidth

				scrollV.Gui.Visible = #tree + 1 > maxNodes
				scrollH.Gui.Visible = totalWidth > maxX

				local oldSize = treeFrame.Size
				treeFrame.Size = UDim2.new(1,(scrollV.Gui.Visible and -16 or 0),1,(scrollH.Gui.Visible and -39 or -23))
				if oldSize ~= treeFrame.Size then
					Explorer.UpdateView()
				else
					scrollV:Update()
					scrollH:Update()

					renameBox.Size = UDim2.new(0,maxX-100,0,16)

					if scrollV.Gui.Visible and scrollH.Gui.Visible then
						scrollV.Gui.Size = UDim2.new(0,16,1,-39)
						scrollH.Gui.Size = UDim2.new(1,-16,0,16)
						Explorer.Window.GuiElems.Content.ScrollCorner.Visible = true
					else
						scrollV.Gui.Size = UDim2.new(0,16,1,-23)
						scrollH.Gui.Size = UDim2.new(1,0,0,16)
						Explorer.Window.GuiElems.Content.ScrollCorner.Visible = false
					end

					Explorer.Index = scrollV.Index
				end
			end

			Explorer.NodeSorter = function(a,b)
				if a.Del or b.Del then return false end -- Ghost node

				local aClass = a.Class
				local bClass = b.Class
				if not aClass then aClass = a.Obj.ClassName a.Class = aClass end
				if not bClass then bClass = b.Obj.ClassName b.Class = bClass end

				local aOrder = explorerOrders[aClass]
				local bOrder = explorerOrders[bClass]
				if not aOrder then aOrder = RMD.Classes[aClass] and tonumber(RMD.Classes[aClass].ExplorerOrder) or 9999 explorerOrders[aClass] = aOrder end
				if not bOrder then bOrder = RMD.Classes[bClass] and tonumber(RMD.Classes[bClass].ExplorerOrder) or 9999 explorerOrders[bClass] = bOrder end

				if aOrder ~= bOrder then
					return aOrder < bOrder
				else
					local aName,bName = tostring(a.Obj),tostring(b.Obj)
					if aName ~= bName then
						return aName < bName
					elseif aClass ~= bClass then
						return aClass < bClass
					else
						local aId = a.Id if not aId then aId = idCounter idCounter = (idCounter+0.001)%999999999 a.Id = aId end
						local bId = b.Id if not bId then bId = idCounter idCounter = (idCounter+0.001)%999999999 b.Id = bId end
						return aId < bId
					end
				end
			end

			Explorer.Update = function()
				table.clear(tree)
				local maxNameWidth,maxDepth,count = 0,1,1
				local nameCache = {}
				local font = Enum.Font.SourceSans
				local size = Vector2.new(math.huge,20)
				local useNameWidth = Settings.Explorer.UseNameWidth
				local tSort = table.sort
				local sortFunc = Explorer.NodeSorter
				local isSearching = (expanded == Explorer.SearchExpanded)
				local textServ = service.TextService

				local function recur(root,depth)
					if depth > maxDepth then maxDepth = depth end
					depth = depth + 1
					if sortingEnabled and not root.Sorted then
						tSort(root,sortFunc)
						root.Sorted = true
					end
					for i = 1,#root do
						local n = root[i]

						if (isSearching and not searchResults[n]) or n.Del then continue end

						if useNameWidth then
							local nameWidth = n.NameWidth
							if not nameWidth then
								local objName = tostring(n.Obj)
								nameWidth = nameCache[objName]
								if not nameWidth then
									nameWidth = getTextSize(textServ,objName,14,font,size).X
									nameCache[objName] = nameWidth
								end
								n.NameWidth = nameWidth
							end
							if nameWidth > maxNameWidth then
								maxNameWidth = nameWidth
							end
						end

						tree[count] = n
						count = count + 1
						if expanded[n] and #n > 0 then
							recur(n,depth)
						end
					end
				end

				recur(nodes[game],1)

				-- Nil Instances
				if env.getnilinstances then
					if not (isSearching and not searchResults[nilNode]) then
						tree[count] = nilNode
						count = count + 1
						if expanded[nilNode] then
							recur(nilNode,2)
						end
					end
				end

				Explorer.MaxNameWidth = maxNameWidth
				Explorer.MaxDepth = maxDepth
				Explorer.ViewWidth = useNameWidth and Explorer.EntryIndent*maxDepth + maxNameWidth + 26 or Explorer.EntryIndent*maxDepth + 226
				Explorer.UpdateView()
			end

			Explorer.StartDrag = function(offX,offY)
				if Explorer.Dragging then return end
				Explorer.Dragging = true

				local dragTree = treeFrame:Clone()
				dragTree:ClearAllChildren()

				for i,v in pairs(listEntries) do
					local node = tree[i + Explorer.Index]
					if node and selection.Map[node] then
						local clone = v:Clone()
						clone.Active = false
						clone.Indent.Expand.Visible = false
						clone.Parent = dragTree
					end
				end

				local newGui = Instance.new("ScreenGui")
				newGui.DisplayOrder = Main.DisplayOrders.Menu
				dragTree.Parent = newGui
				Lib.ShowGui(newGui)

				local dragOutline = create({
					{1,"Frame",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Name="DragSelect",Size=UDim2.new(1,0,1,0),}},
					{2,"Frame",{BackgroundColor3=Color3.new(1,1,1),BorderSizePixel=0,Name="Line",Parent={1},Size=UDim2.new(1,0,0,1),ZIndex=2,}},
					{3,"Frame",{BackgroundColor3=Color3.new(1,1,1),BorderSizePixel=0,Name="Line",Parent={1},Position=UDim2.new(0,0,1,-1),Size=UDim2.new(1,0,0,1),ZIndex=2,}},
					{4,"Frame",{BackgroundColor3=Color3.new(1,1,1),BorderSizePixel=0,Name="Line",Parent={1},Size=UDim2.new(0,1,1,0),ZIndex=2,}},
					{5,"Frame",{BackgroundColor3=Color3.new(1,1,1),BorderSizePixel=0,Name="Line",Parent={1},Position=UDim2.new(1,-1,0,0),Size=UDim2.new(0,1,1,0),ZIndex=2,}},
				})
				dragOutline.Parent = treeFrame


				local mouse = Main.Mouse or service.Players.LocalPlayer:GetMouse()
				local function move()
					local posX = mouse.X - offX
					local posY = mouse.Y - offY
					dragTree.Position = UDim2.new(0,posX,0,posY)

					for i = 1,#listEntries do
						local entry = listEntries[i]
						if Lib.CheckMouseInGui(entry) then
							dragOutline.Position = UDim2.new(0,entry.Indent.Position.X.Offset-scrollH.Index,0,entry.Position.Y.Offset)
							dragOutline.Size = UDim2.new(0,entry.Size.X.Offset-entry.Indent.Position.X.Offset,0,20)
							dragOutline.Visible = true
							return
						end
					end
					dragOutline.Visible = false
				end
				move()

				local input = service.UserInputService
				local mouseEvent,releaseEvent

				mouseEvent = input.InputChanged:Connect(function(input)
					if input.UserInputType == Enum.UserInputType.MouseMovement then
						move()
					end
				end)

				releaseEvent = input.InputEnded:Connect(function(input)
					if input.UserInputType == Enum.UserInputType.MouseButton1 then
						releaseEvent:Disconnect()
						mouseEvent:Disconnect()
						newGui:Destroy()
						dragOutline:Destroy()
						Explorer.Dragging = false

						for i = 1,#listEntries do
							if Lib.CheckMouseInGui(listEntries[i]) then
								local node = tree[i + Explorer.Index]
								if node then
									if selection.Map[node] then return end
									local newPar = node.Obj
									local sList = selection.List
									for i = 1,#sList do
										local n = sList[i]
										pcall(function() n.Obj.Parent = newPar end)
									end
									Explorer.ViewNode(sList[1])
								end
								break
							end
						end
					end
				end)
			end

			Explorer.NewListEntry = function(index)
				local newEntry = entryTemplate:Clone()
				newEntry.Position = UDim2.new(0,0,0,20*(index-1))

				local isRenaming = false

				newEntry.InputBegan:Connect(function(input)
					local node = tree[index + Explorer.Index]
					if not node or selection.Map[node] or input.UserInputType ~= Enum.UserInputType.MouseMovement then return end

					newEntry.Indent.BackgroundColor3 = Settings.Theme.Button
					newEntry.Indent.BorderSizePixel = 0
					newEntry.Indent.BackgroundTransparency = 0
				end)

				newEntry.InputEnded:Connect(function(input)
					local node = tree[index + Explorer.Index]
					if not node or selection.Map[node] or input.UserInputType ~= Enum.UserInputType.MouseMovement then return end

					newEntry.Indent.BackgroundTransparency = 1
				end)

				newEntry.MouseButton1Down:Connect(function()

				end)

				newEntry.MouseButton1Up:Connect(function()

				end)

				newEntry.InputBegan:Connect(function(input)
					if input.UserInputType == Enum.UserInputType.MouseButton1 then
						local releaseEvent,mouseEvent

						local mouse = Main.Mouse or plr:GetMouse()
						local startX = mouse.X
						local startY = mouse.Y

						local listOffsetX = startX - treeFrame.AbsolutePosition.X
						local listOffsetY = startY - treeFrame.AbsolutePosition.Y

						releaseEvent = game:GetService("UserInputService").InputEnded:Connect(function(input)
							if input.UserInputType == Enum.UserInputType.MouseButton1 then
								releaseEvent:Disconnect()
								mouseEvent:Disconnect()
							end
						end)

						mouseEvent = game:GetService("UserInputService").InputChanged:Connect(function(input)
							if input.UserInputType == Enum.UserInputType.MouseMovement then
								local deltaX = mouse.X - startX
								local deltaY = mouse.Y - startY
								local dist = math.sqrt(deltaX^2 + deltaY^2)

								if dist > 5 then
									releaseEvent:Disconnect()
									mouseEvent:Disconnect()
									isRenaming = false
									Explorer.StartDrag(listOffsetX,listOffsetY)
								end
							end
						end)
					end
				end)

				newEntry.MouseButton2Down:Connect(function()

				end)

				newEntry.Indent.Expand.InputBegan:Connect(function(input)
					local node = tree[index + Explorer.Index]
					if not node or input.UserInputType ~= Enum.UserInputType.MouseMovement then return end

					Explorer.MiscIcons:DisplayByKey(newEntry.Indent.Expand.Icon, expanded[node] and "Collapse_Over" or "Expand_Over")
				end)

				newEntry.Indent.Expand.InputEnded:Connect(function(input)
					local node = tree[index + Explorer.Index]
					if not node or input.UserInputType ~= Enum.UserInputType.MouseMovement then return end

					Explorer.MiscIcons:DisplayByKey(newEntry.Indent.Expand.Icon, expanded[node] and "Collapse" or "Expand")
				end)

				newEntry.Indent.Expand.MouseButton1Down:Connect(function()
					local node = tree[index + Explorer.Index]
					if not node or #node == 0 then return end

					expanded[node] = not expanded[node]
					Explorer.Update()
					Explorer.Refresh()
				end)

				newEntry.Parent = treeFrame
				return newEntry
			end

			Explorer.Refresh = function()
				local maxNodes = math.max(math.ceil((treeFrame.AbsoluteSize.Y) / 20),0)	
				local renameNodeVisible = false
				local isa = game.IsA

				for i = 1,maxNodes do
					local entry = listEntries[i]
					if not listEntries[i] then entry = Explorer.NewListEntry(i) listEntries[i] = entry Explorer.ClickSystem:Add(entry) end

					local node = tree[i + Explorer.Index]
					if node then
						local obj = node.Obj
						local depth = Explorer.EntryIndent*Explorer.NodeDepth(node)

						entry.Visible = true
						entry.Position = UDim2.new(0,-scrollH.Index,0,entry.Position.Y.Offset)
						entry.Size = UDim2.new(0,Explorer.ViewWidth,0,20)
						entry.Indent.EntryName.Text = tostring(node.Obj)
						entry.Indent.Position = UDim2.new(0,depth,0,0)
						entry.Indent.Size = UDim2.new(1,-depth,1,0)

						entry.Indent.EntryName.TextTruncate = (Settings.Explorer.UseNameWidth and Enum.TextTruncate.None or Enum.TextTruncate.AtEnd)

						if (isa(obj,"LocalScript") or isa(obj,"Script")) and obj.Disabled then
							Explorer.MiscIcons:DisplayByKey(entry.Indent.Icon, isa(obj,"LocalScript") and "LocalScript_Disabled" or "Script_Disabled")
						else
							local rmdEntry = RMD.Classes[obj.ClassName]
							Explorer.ClassIcons:Display(entry.Indent.Icon, rmdEntry and rmdEntry.ExplorerImageIndex or 0, obj)
						end

						if selection.Map[node] then
							entry.Indent.BackgroundColor3 = Settings.Theme.ListSelection
							entry.Indent.BorderSizePixel = 0
							entry.Indent.BackgroundTransparency = 0
						else
							if Lib.CheckMouseInGui(entry) then
								entry.Indent.BackgroundColor3 = Settings.Theme.Button
							else
								entry.Indent.BackgroundTransparency = 1
							end
						end

						if node == renamingNode then
							renameNodeVisible = true
							renameBox.Position = UDim2.new(0,depth+25-scrollH.Index,0,entry.Position.Y.Offset+2)
							renameBox.Visible = true
						end

						if #node > 0 and expanded[node] ~= 0 then
							if Lib.CheckMouseInGui(entry.Indent.Expand) then
								Explorer.MiscIcons:DisplayByKey(entry.Indent.Expand.Icon, expanded[node] and "Collapse_Over" or "Expand_Over")
							else
								Explorer.MiscIcons:DisplayByKey(entry.Indent.Expand.Icon, expanded[node] and "Collapse" or "Expand")
							end
							entry.Indent.Expand.Visible = true
						else
							entry.Indent.Expand.Visible = false
						end
					else
						entry.Visible = false
					end
				end

				if not renameNodeVisible then
					renameBox.Visible = false
				end

				for i = maxNodes+1, #listEntries do
					Explorer.ClickSystem:Remove(listEntries[i])
					listEntries[i]:Destroy()
					listEntries[i] = nil
				end
			end

			Explorer.PerformUpdate = function(instant)
				updateDebounce = true
				Lib.FastWait(not instant and 0.1)
				if not updateDebounce then return end
				updateDebounce = false
				if not Explorer.Window:IsVisible() then return end
				Explorer.Update()
				Explorer.Refresh()
			end

			Explorer.ForceUpdate = function(norefresh)
				updateDebounce = false
				Explorer.Update()
				if not norefresh then Explorer.Refresh() end
			end

			Explorer.PerformRefresh = function()
				refreshDebounce = true
				Lib.FastWait(0.1)
				refreshDebounce = false
				if updateDebounce or not Explorer.Window:IsVisible() then return end
				Explorer.Refresh()
			end

			Explorer.IsNodeVisible = function(node)
				if not node then return end

				local curNode = node.Parent
				while curNode do
					if not expanded[curNode] then return false end
					curNode = curNode.Parent
				end
				return true
			end

			Explorer.NodeDepth = function(node)
				local depth = 0

				if node == nilNode then
					return 1
				end

				local curNode = node.Parent
				while curNode do
					if curNode == nilNode then depth = depth + 1 end
					curNode = curNode.Parent
					depth = depth + 1
				end
				return depth
			end

			Explorer.SetupConnections = function()
				if descendantAddedCon then descendantAddedCon:Disconnect() end
				if descendantRemovingCon then descendantRemovingCon:Disconnect() end
				if itemChangedCon then itemChangedCon:Disconnect() end

				if Main.Elevated then
					descendantAddedCon = game.DescendantAdded:Connect(addObject)
					descendantRemovingCon = game.DescendantRemoving:Connect(removeObject)
				else
					descendantAddedCon = game.DescendantAdded:Connect(function(obj) pcall(addObject,obj) end)
					descendantRemovingCon = game.DescendantRemoving:Connect(function(obj) pcall(removeObject,obj) end)
				end

				if Settings.Explorer.UseNameWidth then
					itemChangedCon = game.ItemChanged:Connect(function(obj,prop)
						if prop == "Parent" and nodes[obj] then
							moveObject(obj)
						elseif prop == "Name" and nodes[obj] then
							nodes[obj].NameWidth = nil
						end
					end)
				else
					itemChangedCon = game.ItemChanged:Connect(function(obj,prop)
						if prop == "Parent" and nodes[obj] then
							moveObject(obj)
						end
					end)
				end
			end

			Explorer.ViewNode = function(node)
				if not node then return end

				Explorer.MakeNodeVisible(node)
				Explorer.ForceUpdate(true)
				local visibleSpace = scrollV.VisibleSpace

				for i,v in next,tree do
					if v == node then
						local relative = i - 1
						if Explorer.Index > relative then
							scrollV.Index = relative
						elseif Explorer.Index + visibleSpace - 1 <= relative then
							scrollV.Index = relative - visibleSpace + 2
						end
					end
				end

				scrollV:Update() Explorer.Index = scrollV.Index
				Explorer.Refresh()
			end

			Explorer.ViewObj = function(obj)
				Explorer.ViewNode(nodes[obj])
			end

			Explorer.MakeNodeVisible = function(node,expandRoot)
				if not node then return end

				local hasExpanded = false

				if expandRoot and not expanded[node] then
					expanded[node] = true
					hasExpanded = true
				end

				local currentNode = node.Parent
				while currentNode do
					hasExpanded = true
					expanded[currentNode] = true
					currentNode = currentNode.Parent
				end

				if hasExpanded and not updateDebounce then
					coroutine.wrap(Explorer.PerformUpdate)(true)
				end
			end

			Explorer.ShowRightClick = function()
				local context = Explorer.RightClickContext
				context:Clear()

				local sList = selection.List
				local sMap = selection.Map
				local emptyClipboard = #clipboard == 0
				local presentClasses = {}
				local apiClasses = API.Classes

				for i = 1,#sList do
					local node = sList[i]
					local class = node.Class
					if not class then class = node.Obj.ClassName node.Class = class end

					local curClass = apiClasses[class]
					while curClass and not presentClasses[curClass.Name] do
						presentClasses[curClass.Name] = true
						curClass = curClass.Superclass
					end
				end

				context:AddRegistered("CUT")
				context:AddRegistered("COPY")
				context:AddRegistered("PASTE",emptyClipboard)
				context:AddRegistered("DUPLICATE")
				context:AddRegistered("DELETE")
				context:AddRegistered("RENAME",#sList ~= 1)

				context:AddDivider()
				context:AddRegistered("GROUP")
				context:AddRegistered("UNGROUP")
				context:AddRegistered("SELECT_CHILDREN")
				context:AddRegistered("JUMP_TO_PARENT")
				context:AddRegistered("EXPAND_ALL")
				context:AddRegistered("COLLAPSE_ALL")

				context:AddDivider()
				if expanded == Explorer.SearchExpanded then
					context:AddRegistered("CLEAR_SEARCH_AND_JUMP_TO")
				end
				if env.setclipboard then
					context:AddRegistered("COPY_PATH")
				end
				context:AddRegistered("INSERT_OBJECT")
				context:AddRegistered("SAVE_INST")
				context:AddRegistered("CALL_FUNCTION")
				context:AddRegistered("VIEW_CONNECTIONS")
				context:AddRegistered("GET_REFERENCES")
				context:AddRegistered("VIEW_API")

				context:QueueDivider()

				if presentClasses["BasePart"] or presentClasses["Model"] then
					context:AddRegistered("TELEPORT_TO")
					context:AddRegistered("VIEW_OBJECT")
				end

				if presentClasses["Player"] then
					context:AddRegistered("SELECT_CHARACTER")
				end

				if presentClasses["LuaSourceContainer"] then
					context:AddRegistered("VIEW_SCRIPT")
				end

				if sMap[nilNode] then
					context:AddRegistered("REFRESH_NIL")
					context:AddRegistered("HIDE_NIL")
				end

				Explorer.LastRightClickX,Explorer.LastRightClickY = Main.Mouse.X,Main.Mouse.Y
				context:Show()
			end

			Explorer.InitRightClick = function()
				local context = Lib.ContextMenu.new()

				context:Register("CUT",{Name = "Cut", IconMap = Explorer.MiscIcons, Icon = "Cut", DisabledIcon = "Cut_Disabled", Shortcut = "Ctrl+Z", OnClick = function()
					local destroy,clone = game.Destroy,game.Clone
					local sList,newClipboard = selection.List,{}
					local count = 1
					for i = 1,#sList do
						local inst = sList[i].Obj
						local s,cloned = pcall(clone,inst)
						if s and cloned then
							newClipboard[count] = cloned
							count = count + 1
						end
						pcall(destroy,inst)
					end
					clipboard = newClipboard
					selection:Clear()
				end})

				context:Register("COPY",{Name = "Copy", IconMap = Explorer.MiscIcons, Icon = "Copy", DisabledIcon = "Copy_Disabled", Shortcut = "Ctrl+C", OnClick = function()
					local clone = game.Clone
					local sList,newClipboard = selection.List,{}
					local count = 1
					for i = 1,#sList do
						local inst = sList[i].Obj
						local s,cloned = pcall(clone,inst)
						if s and cloned then
							newClipboard[count] = cloned
							count = count + 1
						end
					end
					clipboard = newClipboard
				end})

				context:Register("PASTE",{Name = "Paste Into", IconMap = Explorer.MiscIcons, Icon = "Paste", DisabledIcon = "Paste_Disabled", Shortcut = "Ctrl+Shift+V", OnClick = function()
					local sList = selection.List
					local newSelection = {}
					local count = 1
					for i = 1,#sList do
						local node = sList[i]
						local inst = node.Obj
						Explorer.MakeNodeVisible(node,true)
						for c = 1,#clipboard do
							local cloned = clipboard[c]:Clone()
							if cloned then
								cloned.Parent = inst
								local clonedNode = nodes[cloned]
								if clonedNode then newSelection[count] = clonedNode count = count + 1 end
							end
						end
					end
					selection:SetTable(newSelection)

					if #newSelection > 0 then
						Explorer.ViewNode(newSelection[1])
					end
				end})

				context:Register("DUPLICATE",{Name = "Duplicate", IconMap = Explorer.MiscIcons, Icon = "Copy", DisabledIcon = "Copy_Disabled", Shortcut = "Ctrl+D", OnClick = function()
					local clone = game.Clone
					local sList = selection.List
					local newSelection = {}
					local count = 1
					for i = 1,#sList do
						local node = sList[i]
						local inst = node.Obj
						local instPar = node.Parent and node.Parent.Obj
						Explorer.MakeNodeVisible(node)
						local s,cloned = pcall(clone,inst)
						if s and cloned then
							cloned.Parent = instPar
							local clonedNode = nodes[cloned]
							if clonedNode then newSelection[count] = clonedNode count = count + 1 end
						end
					end

					selection:SetTable(newSelection)
					if #newSelection > 0 then
						Explorer.ViewNode(newSelection[1])
					end
				end})

				context:Register("DELETE",{Name = "Delete", IconMap = Explorer.MiscIcons, Icon = "Delete", DisabledIcon = "Delete_Disabled", Shortcut = "Del", OnClick = function()
					local destroy = game.Destroy
					local sList = selection.List
					for i = 1,#sList do
						pcall(destroy,sList[i].Obj)
					end
					selection:Clear()
				end})

				context:Register("RENAME",{Name = "Rename", IconMap = Explorer.MiscIcons, Icon = "Rename", DisabledIcon = "Rename_Disabled", Shortcut = "F2", OnClick = function()
					local sList = selection.List
					if sList[1] then
						Explorer.SetRenamingNode(sList[1])
					end
				end})

				context:Register("GROUP",{Name = "Group", IconMap = Explorer.MiscIcons, Icon = "Group", DisabledIcon = "Group_Disabled", Shortcut = "Ctrl+G", OnClick = function()
					local sList = selection.List
					if #sList == 0 then return end

					local model = Instance.new("Model",sList[#sList].Obj.Parent)
					for i = 1,#sList do
						pcall(function() sList[i].Obj.Parent = model end)
					end

					if nodes[model] then
						selection:Set(nodes[model])
						Explorer.ViewNode(nodes[model])
					end
				end})

				context:Register("UNGROUP",{Name = "Ungroup", IconMap = Explorer.MiscIcons, Icon = "Ungroup", DisabledIcon = "Ungroup_Disabled", Shortcut = "Ctrl+U", OnClick = function()
					local newSelection = {}
					local count = 1
					local isa = game.IsA

					local function ungroup(node)
						local par = node.Parent.Obj
						local ch = {}
						local chCount = 1

						for i = 1,#node do
							local n = node[i]
							newSelection[count] = n
							ch[chCount] = n
							count = count + 1
							chCount = chCount + 1
						end

						for i = 1,#ch do
							pcall(function() ch[i].Obj.Parent = par end)
						end

						node.Obj:Destroy()
					end

					for i,v in next,selection.List do
						if isa(v.Obj,"Model") then
							ungroup(v)
						end
					end

					selection:SetTable(newSelection)
					if #newSelection > 0 then
						Explorer.ViewNode(newSelection[1])
					end
				end})

				context:Register("SELECT_CHILDREN",{Name = "Select Children", IconMap = Explorer.MiscIcons, Icon = "SelectChildren", DisabledIcon = "SelectChildren_Disabled", OnClick = function()
					local newSelection = {}
					local count = 1
					local sList = selection.List

					for i = 1,#sList do
						local node = sList[i]
						for ind = 1,#node do
							local cNode = node[ind]
							if ind == 1 then Explorer.MakeNodeVisible(cNode) end

							newSelection[count] = cNode
							count = count + 1
						end
					end

					selection:SetTable(newSelection)
					if #newSelection > 0 then
						Explorer.ViewNode(newSelection[1])
					else
						Explorer.Refresh()
					end
				end})

				context:Register("JUMP_TO_PARENT",{Name = "Jump to Parent", IconMap = Explorer.MiscIcons, Icon = "JumpToParent", OnClick = function()
					local newSelection = {}
					local count = 1
					local sList = selection.List

					for i = 1,#sList do
						local node = sList[i]
						if node.Parent then
							newSelection[count] = node.Parent
							count = count + 1
						end
					end

					selection:SetTable(newSelection)
					if #newSelection > 0 then
						Explorer.ViewNode(newSelection[1])
					else
						Explorer.Refresh()
					end
				end})

				context:Register("TELEPORT_TO",{Name = "Teleport To", IconMap = Explorer.MiscIcons, Icon = "TeleportTo", OnClick = function()
					local sList = selection.List
					local isa = game.IsA

					local hrp = plr.Character and plr.Character:FindFirstChild("HumanoidRootPart")
					if not hrp then return end

					for i = 1,#sList do
						local node = sList[i]

						if isa(node.Obj,"BasePart") then
							hrp.CFrame = node.Obj.CFrame + Settings.Explorer.TeleportToOffset
							break
						elseif isa(node.Obj,"Model") then
							if node.Obj.PrimaryPart then
								hrp.CFrame = node.Obj.PrimaryPart.CFrame + Settings.Explorer.TeleportToOffset
								break
							else
								local part = node.Obj:FindFirstChildWhichIsA("BasePart",true)
								if part and nodes[part] then
									hrp.CFrame = nodes[part].Obj.CFrame + Settings.Explorer.TeleportToOffset
								end
							end
						end
					end
				end})

				context:Register("EXPAND_ALL",{Name = "Expand All", OnClick = function()
					local sList = selection.List

					local function expand(node)
						expanded[node] = true
						for i = 1,#node do
							if #node[i] > 0 then
								expand(node[i])
							end
						end
					end

					for i = 1,#sList do
						expand(sList[i])
					end

					Explorer.ForceUpdate()
				end})

				context:Register("COLLAPSE_ALL",{Name = "Collapse All", OnClick = function()
					local sList = selection.List

					local function expand(node)
						expanded[node] = nil
						for i = 1,#node do
							if #node[i] > 0 then
								expand(node[i])
							end
						end
					end

					for i = 1,#sList do
						expand(sList[i])
					end

					Explorer.ForceUpdate()
				end})

				context:Register("CLEAR_SEARCH_AND_JUMP_TO",{Name = "Clear Search and Jump to", OnClick = function()
					local newSelection = {}
					local count = 1
					local sList = selection.List

					for i = 1,#sList do
						newSelection[count] = sList[i]
						count = count + 1
					end

					selection:SetTable(newSelection)
					Explorer.ClearSearch()
					if #newSelection > 0 then
						Explorer.ViewNode(newSelection[1])
					end
				end})

				context:Register("COPY_PATH",{Name = "Copy Path", OnClick = function()
					local sList = selection.List
					if #sList == 1 then
						env.setclipboard(Explorer.GetInstancePath(sList[1].Obj))
					elseif #sList > 1 then
						local resList = {"{"}
						local count = 2
						for i = 1,#sList do
							local path = "\t"..Explorer.GetInstancePath(sList[i].Obj)..","
							if #path > 0 then
								resList[count] = path
								count = count+1
							end
						end
						resList[count] = "}"
						env.setclipboard(table.concat(resList,"\n"))
					end
				end})

				context:Register("INSERT_OBJECT",{Name = "Insert Object", IconMap = Explorer.MiscIcons, Icon = "InsertObject", OnClick = function()
					local mouse = Main.Mouse
					local x,y = Explorer.LastRightClickX or mouse.X, Explorer.LastRightClickY or mouse.Y
					Explorer.InsertObjectContext:Show(x,y)
				end})

				context:Register("CALL_FUNCTION",{Name = "Call Function", IconMap = Explorer.ClassIcons, Icon = 66, OnClick = function()

				end})

				context:Register("GET_REFERENCES",{Name = "Get Lua References", IconMap = Explorer.ClassIcons, Icon = 34, OnClick = function()

				end})

				context:Register("SAVE_INST",{Name = "Save to File", IconMap = Explorer.MiscIcons, Icon = "Save", OnClick = function()

				end})

				context:Register("VIEW_CONNECTIONS",{Name = "View Connections", OnClick = function()

				end})

				context:Register("VIEW_API",{Name = "View API Page", IconMap = Explorer.MiscIcons, Icon = "Reference", OnClick = function()

				end})

				context:Register("VIEW_OBJECT",{Name = "View Object (Right click to reset)", IconMap = Explorer.ClassIcons, Icon = 5, OnClick = function()
					local sList = selection.List
					local isa = game.IsA

					for i = 1,#sList do
						local node = sList[i]

						if isa(node.Obj,"BasePart") or isa(node.Obj,"Model") then
							workspace.CurrentCamera.CameraSubject = node.Obj
							break
						end
					end
				end, OnRightClick = function()
					workspace.CurrentCamera.CameraSubject = plr.Character
				end})

				context:Register("VIEW_SCRIPT",{Name = "View Script", IconMap = Explorer.MiscIcons, Icon = "ViewScript", OnClick = function()
					local scr = selection.List[1] and selection.List[1].Obj
					if scr then ScriptViewer.ViewScript(scr) end
				end})

				context:Register("SELECT_CHARACTER",{Name = "Select Character", IconMap = Explorer.ClassIcons, Icon = 9, OnClick = function()
					local newSelection = {}
					local count = 1
					local sList = selection.List
					local isa = game.IsA

					for i = 1,#sList do
						local node = sList[i]
						if isa(node.Obj,"Player") and nodes[node.Obj.Character] then
							newSelection[count] = nodes[node.Obj.Character]
							count = count + 1
						end
					end

					selection:SetTable(newSelection)
					if #newSelection > 0 then
						Explorer.ViewNode(newSelection[1])
					else
						Explorer.Refresh()
					end
				end})

				context:Register("REFRESH_NIL",{Name = "Refresh Nil Instances", OnClick = function()
					Explorer.RefreshNilInstances()
				end})

				context:Register("HIDE_NIL",{Name = "Hide Nil Instances", OnClick = function()
					Explorer.HideNilInstances()
				end})

				Explorer.RightClickContext = context
			end

			Explorer.HideNilInstances = function()
				table.clear(nilMap)

				local disconnectCon = Instance.new("Folder").ChildAdded:Connect(function() end).Disconnect
				for i,v in next,nilCons do
					disconnectCon(v[1])
					disconnectCon(v[2])
				end
				table.clear(nilCons)

				for i = 1,#nilNode do
					coroutine.wrap(removeObject)(nilNode[i].Obj)
				end

				Explorer.Update()
				Explorer.Refresh()
			end

			Explorer.RefreshNilInstances = function()
				if not env.getnilinstances then return end

				local nilInsts = env.getnilinstances()
				local game = game
				local getDescs = game.GetDescendants
				--local newNilMap = {}
				--local newNilRoots = {}
				--local nilRoots = Explorer.NilRoots
				--local connect = game.DescendantAdded.Connect
				--local disconnect
				--if not nilRoots then nilRoots = {} Explorer.NilRoots = nilRoots end

				for i = 1,#nilInsts do
					local obj = nilInsts[i]
					if obj ~= game then
						nilMap[obj] = true
						--newNilRoots[obj] = true

						local descs = getDescs(obj)
						for j = 1,#descs do
							nilMap[descs[j]] = true
						end
					end
				end

				-- Remove unmapped nil nodes
		--[[for i = 1,#nilNode do
			local node = nilNode[i]
			if not newNilMap[node.Obj] then
				nilMap[node.Obj] = nil
				coroutine.wrap(removeObject)(node)
			end
		end]]

				--nilMap = newNilMap

				for i = 1,#nilInsts do
					local obj = nilInsts[i]
					local node = nodes[obj]
					if not node then coroutine.wrap(addObject)(obj) end
				end

		--[[
		-- Remove old root connections
		for obj in next,nilRoots do
			if not newNilRoots[obj] then
				if not disconnect then disconnect = obj[1].Disconnect end
				disconnect(obj[1])
				disconnect(obj[2])
			end
		end
		
		for obj in next,newNilRoots do
			if not nilRoots[obj] then
				nilRoots[obj] = {
					connect(obj.DescendantAdded,addObject),
					connect(obj.DescendantRemoving,removeObject)
				}
			end
		end]]

				--nilMap = newNilMap
				--Explorer.NilRoots = newNilRoots

				Explorer.Update()
				Explorer.Refresh()
			end

			Explorer.GetInstancePath = function(obj)
				local ffc = game.FindFirstChild
				local getCh = game.GetChildren
				local path = ""
				local curObj = obj
				local ts = tostring
				local match = string.match
				local gsub = string.gsub
				local tableFind = table.find
				local useGetCh = Settings.Explorer.CopyPathUseGetChildren
				local formatLuaString = Lib.FormatLuaString

				while curObj do
					if curObj == game then
						path = "game"..path
						break
					end

					local className = curObj.ClassName
					local curName = ts(curObj)
					local indexName
					if match(curName,"^[%a_][%w_]*$") then
						indexName = "."..curName
					else
						local cleanName = formatLuaString(curName)
						indexName = '["'..cleanName..'"]'
					end

					local parObj = curObj.Parent
					if parObj then
						local fc = ffc(parObj,curName)
						if useGetCh and fc and fc ~= curObj then
							local parCh = getCh(parObj)
							local fcInd = tableFind(parCh,curObj)
							indexName = ":GetChildren()["..fcInd.."]"
						elseif parObj == game and API.Classes[className] and API.Classes[className].Tags.Service then
							indexName = ':GetService("'..className..'")'
						end
					end

					path = indexName..path
					curObj = parObj
				end

				return path
			end

			Explorer.InitInsertObject = function()
				local context = Lib.ContextMenu.new()
				context.SearchEnabled = true
				context.MaxHeight = 400
				context:ApplyTheme({
					ContentColor = Settings.Theme.Main2,
					OutlineColor = Settings.Theme.Outline1,
					DividerColor = Settings.Theme.Outline1,
					TextColor = Settings.Theme.Text,
					HighlightColor = Settings.Theme.ButtonHover
				})

				local classes = {}
				for i,class in next,API.Classes do
					local tags = class.Tags
					if not tags.NotCreatable and not tags.Service then
						local rmdEntry = RMD.Classes[class.Name]
						classes[#classes+1] = {class,rmdEntry and rmdEntry.ClassCategory or "Uncategorized"}
					end
				end
				table.sort(classes,function(a,b)
					if a[2] ~= b[2] then
						return a[2] < b[2]
					else
						return a[1].Name < b[1].Name
					end
				end)

				local function onClick(className)
					local sList = selection.List
					local instNew = Instance.new
					for i = 1,#sList do
						local node = sList[i]
						local obj = node.Obj
						Explorer.MakeNodeVisible(node,true)
						pcall(instNew,className,obj)
					end
				end

				local lastCategory = ""
				for i = 1,#classes do
					local class = classes[i][1]
					local rmdEntry = RMD.Classes[class.Name]
					local iconInd = rmdEntry and tonumber(rmdEntry.ExplorerImageIndex) or 0
					local category = classes[i][2]

					if lastCategory ~= category then
						context:AddDivider(category)
						lastCategory = category
					end
					context:Add({Name = class.Name, IconMap = Explorer.ClassIcons, Icon = iconInd, OnClick = onClick})
				end

				Explorer.InsertObjectContext = context
			end

	--[[
		Headers, Setups, Predicate, ObjectDefs
	]]
			Explorer.SearchFilters = { -- TODO: Use data table (so we can disable some if funcs don't exist)
				Comparison = {
					["isa"] = function(argString)
						local lower = string.lower
						local find = string.find
						local classQuery = string.split(argString)[1]
						if not classQuery then return end
						classQuery = lower(classQuery)

						local className
						for class,_ in pairs(API.Classes) do
							local cName = lower(class)
							if cName == classQuery then
								className = class
								break
							elseif find(cName,classQuery,1,true) then
								className = class
							end
						end
						if not className then return end

						return {
							Headers = {"local isa = game.IsA"},
							Predicate = "isa(obj,'"..className.."')"
						}
					end,
					["remotes"] = function(argString)
						return {
							Headers = {"local isa = game.IsA"},
							Predicate = "isa(obj,'RemoteEvent') or isa(obj,'RemoteFunction')"
						}
					end,
					["bindables"] = function(argString)
						return {
							Headers = {"local isa = game.IsA"},
							Predicate = "isa(obj,'BindableEvent') or isa(obj,'BindableFunction')"
						}
					end,
					["rad"] = function(argString)
						local num = tonumber(argString)
						if not num then return end

						if not service.Players.LocalPlayer.Character or not service.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") or not service.Players.LocalPlayer.Character.HumanoidRootPart:IsA("BasePart") then return end

						return {
							Headers = {"local isa = game.IsA", "local hrp = service.Players.LocalPlayer.Character.HumanoidRootPart"},
							Setups = {"local hrpPos = hrp.Position"},
							ObjectDefs = {"local isBasePart = isa(obj,'BasePart')"},
							Predicate = "(isBasePart and (obj.Position-hrpPos).Magnitude <= "..num..")"
						}
					end,
				},
				Specific = {
					["players"] = function()
						return function() return service.Players:GetPlayers() end
					end,
					["loadedmodules"] = function()
						return env.getloadedmodules
					end,
				},
				Default = function(argString,caseSensitive)
					local cleanString = argString:gsub("\"","\\\""):gsub("\n","\\n")
					if caseSensitive then
						return {
							Headers = {"local find = string.find"},
							ObjectDefs = {"local objName = tostring(obj)"},
							Predicate = "find(objName,\"" .. cleanString .. "\",1,true)"
						}
					else
						return {
							Headers = {"local lower = string.lower","local find = string.find","local tostring = tostring"},
							ObjectDefs = {"local lowerName = lower(tostring(obj))"},
							Predicate = "find(lowerName,\"" .. cleanString:lower() .. "\",1,true)"
						}
					end
				end,
				SpecificDefault = function(n)
					return {
						Headers = {},
						ObjectDefs = {"local isSpec"..n.." = specResults["..n.."][node]"},
						Predicate = "isSpec"..n
					}
				end,
			}

			Explorer.BuildSearchFunc = function(query)
				local specFilterList,specMap = {},{}
				local finalPredicate = ""
				local rep = string.rep
				local formatQuery = query:gsub("\\.","  "):gsub('".-"',function(str) return rep(" ",#str) end)
				local headers = {}
				local objectDefs = {}
				local setups = {}
				local find = string.find
				local sub = string.sub
				local lower = string.lower
				local match = string.match
				local ops = {
					["("] = "(",
					[")"] = ")",
					["||"] = " or ",
					["&&"] = " and "
				}
				local filterCount = 0
				local compFilters = Explorer.SearchFilters.Comparison
				local specFilters = Explorer.SearchFilters.Specific
				local init = 1
				local lastOp = nil

				local function processFilter(dat)
					if dat.Headers then
						local t = dat.Headers
						for i = 1,#t do
							headers[t[i]] = true
						end
					end

					if dat.ObjectDefs then
						local t = dat.ObjectDefs
						for i = 1,#t do
							objectDefs[t[i]] = true
						end
					end

					if dat.Setups then
						local t = dat.Setups
						for i = 1,#t do
							setups[t[i]] = true
						end
					end

					finalPredicate = finalPredicate..dat.Predicate
				end

				local found = {}
				local foundData = {}
				local find = string.find
				local sub = string.sub

				local function findAll(str,pattern)
					local count = #found+1
					local init = 1
					local sz = #pattern
					local x,y,extra = find(str,pattern,init,true)
					while x do
						found[count] = x
						foundData[x] = {sz,pattern}

						count = count+1
						init = y+1
						x,y,extra = find(str,pattern,init,true)
					end
				end
				local start = tick()
				findAll(formatQuery,'&&')
				findAll(formatQuery,"||")
				findAll(formatQuery,"(")
				findAll(formatQuery,")")
				table.sort(found)
				table.insert(found,#formatQuery+1)

				local function inQuotes(str)
					local len = #str
					if sub(str,1,1) == '"' and sub(str,len,len) == '"' then
						return sub(str,2,len-1)
					end
				end

				for i = 1,#found do
					local nextInd = found[i]
					local nextData = foundData[nextInd] or {1}
					local op = ops[nextData[2]]
					local term = sub(query,init,nextInd-1)
					term = match(term,"^%s*(.-)%s*$") or "" -- Trim

					if #term > 0 then
						if sub(term,1,1) == "!" then
							term = sub(term,2)
							finalPredicate = finalPredicate.."not "
						end

						local qTerm = inQuotes(term)
						if qTerm then
							processFilter(Explorer.SearchFilters.Default(qTerm,true))
						else
							local x,y = find(term,"%S+")
							if x then
								local first = sub(term,x,y)
								local specifier = sub(first,1,1) == "/" and lower(sub(first,2))
								local compFunc = specifier and compFilters[specifier]
								local specFunc = specifier and specFilters[specifier]

								if compFunc then
									local argStr = sub(term,y+2)
									local ret = compFunc(inQuotes(argStr) or argStr)
									if ret then
										processFilter(ret)
									else
										finalPredicate = finalPredicate.."false"
									end
								elseif specFunc then
									local argStr = sub(term,y+2)
									local ret = specFunc(inQuotes(argStr) or argStr)
									if ret then
										if not specMap[term] then
											specFilterList[#specFilterList + 1] = ret
											specMap[term] = #specFilterList
										end
										processFilter(Explorer.SearchFilters.SpecificDefault(specMap[term]))
									else
										finalPredicate = finalPredicate.."false"
									end
								else
									processFilter(Explorer.SearchFilters.Default(term))
								end
							end
						end				
					end

					if op then
						finalPredicate = finalPredicate..op
						if op == "(" and (#term > 0 or lastOp == ")") then -- Handle bracket glitch
							return
						else
							lastOp = op
						end
					end
					init = nextInd+nextData[1]
				end

				local finalSetups = ""
				local finalHeaders = ""
				local finalObjectDefs = ""

				for setup,_ in next,setups do finalSetups = finalSetups..setup.."\n" end
				for header,_ in next,headers do finalHeaders = finalHeaders..header.."\n" end
				for oDef,_ in next,objectDefs do finalObjectDefs = finalObjectDefs..oDef.."\n" end

				local template = [==[
local searchResults = searchResults
local nodes = nodes
local expandTable = Explorer.SearchExpanded
local specResults = specResults
local service = service

%s
local function search(root)	
%s
	
	local expandedpar = false
	for i = 1,#root do
		local node = root[i]
		local obj = node.Obj
		
%s
		
		if %s then
			expandTable[node] = 0
			searchResults[node] = true
			if not expandedpar then
				local parnode = node.Parent
				while parnode and (not searchResults[parnode] or expandTable[parnode] == 0) do
					expandTable[parnode] = true
					searchResults[parnode] = true
					parnode = parnode.Parent
				end
				expandedpar = true
			end
		end
		
		if #node > 0 then search(node) end
	end
end
return search]==]

				local funcStr = template:format(finalHeaders,finalSetups,finalObjectDefs,finalPredicate)
				local s,func = pcall(loadstring,funcStr)
				if not s or not func then return nil,specFilterList end

				local env = setmetatable({["searchResults"] = searchResults, ["nodes"] = nodes, ["Explorer"] = Explorer, ["specResults"] = specResults,
					["service"] = service},{__index = getfenv()})
				setfenv(func,env)

				return func(),specFilterList
			end

			Explorer.DoSearch = function(query)
				table.clear(Explorer.SearchExpanded)
				table.clear(searchResults)
				expanded = (#query == 0 and Explorer.Expanded or Explorer.SearchExpanded)
				searchFunc = nil

				if #query > 0 then	
					local expandTable = Explorer.SearchExpanded
					local specFilters

					local lower = string.lower
					local find = string.find
					local tostring = tostring

					local lowerQuery = lower(query)

					local function defaultSearch(root)
						local expandedpar = false
						for i = 1,#root do
							local node = root[i]
							local obj = node.Obj

							if find(lower(tostring(obj)),lowerQuery,1,true) then
								expandTable[node] = 0
								searchResults[node] = true
								if not expandedpar then
									local parnode = node.Parent
									while parnode and (not searchResults[parnode] or expandTable[parnode] == 0) do
										expanded[parnode] = true
										searchResults[parnode] = true
										parnode = parnode.Parent
									end
									expandedpar = true
								end
							end

							if #node > 0 then defaultSearch(node) end
						end
					end

					if Main.Elevated then
						local start = tick()
						searchFunc,specFilters = Explorer.BuildSearchFunc(query)
						--print("BUILD SEARCH",tick()-start)
					else
						searchFunc = defaultSearch
					end

					if specFilters then
						table.clear(specResults)
						for i = 1,#specFilters do -- Specific search filers that returns list of matches
							local resMap = {}
							specResults[i] = resMap
							local objs = specFilters[i]()
							for c = 1,#objs do
								local node = nodes[objs[c]]
								if node then
									resMap[node] = true
								end
							end
						end
					end

					if searchFunc then
						local start = tick()
						searchFunc(nodes[game])
						searchFunc(nilNode)
						--warn(tick()-start)
					end
				end

				Explorer.ForceUpdate()
			end

			Explorer.ClearSearch = function()
				Explorer.GuiElems.SearchBar.Text = ""
				expanded = Explorer.Expanded
				searchFunc = nil
			end

			Explorer.InitSearch = function()
				local searchBox = Explorer.GuiElems.ToolBar.SearchFrame.SearchBox
				Explorer.GuiElems.SearchBar = searchBox

				Lib.ViewportTextBox.convert(searchBox)

				if SearchOnType then
					searchBox:GetPropertyChangedSignal("Text"):Connect(function()
						Explorer.DoSearch(searchBox.Text)
					end)
				else
					searchBox.FocusLost:Connect(function()
						Explorer.DoSearch(searchBox.Text)
					end)
				end
			end

			Explorer.InitEntryTemplate = function()
				entryTemplate = create({
					{1,"TextButton",{AutoButtonColor=false,BackgroundColor3=Color3.new(0,0,0),BackgroundTransparency=1,BorderColor3=Color3.new(0,0,0),Font=3,Name="Entry",Position=UDim2.new(0,1,0,1),Size=UDim2.new(0,250,0,20),Text="",TextSize=14,}},
					{2,"Frame",{BackgroundColor3=Color3.new(0.04313725605607,0.35294118523598,0.68627452850342),BackgroundTransparency=1,BorderColor3=Color3.new(0.33725491166115,0.49019610881805,0.73725491762161),BorderSizePixel=0,Name="Indent",Parent={1},Position=UDim2.new(0,20,0,0),Size=UDim2.new(1,-20,1,0),}},
					{3,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="EntryName",Parent={2},Position=UDim2.new(0,26,0,0),Size=UDim2.new(1,-26,1,0),Text="Workspace",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextSize=14,TextXAlignment=0,}},
					{4,"TextButton",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,ClipsDescendants=true,Font=3,Name="Expand",Parent={2},Position=UDim2.new(0,-20,0,0),Size=UDim2.new(0,20,0,20),Text="",TextSize=14,}},
					{5,"ImageLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Image="rbxassetid://5642383285",ImageRectOffset=Vector2.new(144,16),ImageRectSize=Vector2.new(16,16),Name="Icon",Parent={4},Position=UDim2.new(0,2,0,2),ScaleType=4,Size=UDim2.new(0,16,0,16),}},
					{6,"ImageLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Image="rbxasset://textures/ClassImages.png",ImageRectOffset=Vector2.new(304,0),ImageRectSize=Vector2.new(16,16),Name="Icon",Parent={2},Position=UDim2.new(0,4,0,2),ScaleType=4,Size=UDim2.new(0,16,0,16),}},
				})

				local sys = Lib.ClickSystem.new()
				sys.AllowedButtons = {1,2}
				sys.OnDown:Connect(function(item,combo,button)
					local ind = table.find(listEntries,item)
					if not ind then return end
					local node = tree[ind + Explorer.Index]
					if not node then return end

					local entry = listEntries[ind]

					if button == 1 then
						if combo == 2 then
							if node.Obj:IsA("LuaSourceContainer") then
								ScriptViewer.ViewScript(node.Obj)
							elseif #node > 0 and expanded[node] ~= 0 then
								expanded[node] = not expanded[node]
								Explorer.Update()
							end
						end

						if Properties.SelectObject(node.Obj) then
							sys.IsRenaming = false
							return
						end

						sys.IsRenaming = selection.Map[node]

						if Lib.IsShiftDown() then
							if not selection.Piviot then return end

							local fromIndex = table.find(tree,selection.Piviot)
							local toIndex = table.find(tree,node)
							if not fromIndex or not toIndex then return end
							fromIndex,toIndex = math.min(fromIndex,toIndex),math.max(fromIndex,toIndex)

							local sList = selection.List
							for i = #sList,1,-1 do
								local elem = sList[i]
								if selection.ShiftSet[elem] then
									selection.Map[elem] = nil
									table.remove(sList,i)
								end
							end
							selection.ShiftSet = {}
							for i = fromIndex,toIndex do
								local elem = tree[i]
								if not selection.Map[elem] then
									selection.ShiftSet[elem] = true
									selection.Map[elem] = true
									sList[#sList+1] = elem
								end
							end
							selection.Changed:Fire()
						elseif Lib.IsCtrlDown() then
							selection.ShiftSet = {}
							if selection.Map[node] then selection:Remove(node) else selection:Add(node) end
							selection.Piviot = node
							sys.IsRenaming = false
						elseif not selection.Map[node] then
							selection.ShiftSet = {}
							selection:Set(node)
							selection.Piviot = node
						end
					elseif button == 2 then
						if Properties.SelectObject(node.Obj) then
							return
						end

						if not Lib.IsCtrlDown() and not selection.Map[node] then
							selection.ShiftSet = {}
							selection:Set(node)
							selection.Piviot = node
							Explorer.Refresh()
						end
					end

					Explorer.Refresh()
				end)

				sys.OnRelease:Connect(function(item,combo,button)
					local ind = table.find(listEntries,item)
					if not ind then return end
					local node = tree[ind + Explorer.Index]
					if not node then return end

					if button == 1 then
						if selection.Map[node] and not Lib.IsShiftDown() and not Lib.IsCtrlDown() then
							selection.ShiftSet = {}
							selection:Set(node)
							selection.Piviot = node
							Explorer.Refresh()
						end

						local id = sys.ClickId
						Lib.FastWait(sys.ComboTime)
						if combo == 1 and id == sys.ClickId and sys.IsRenaming and selection.Map[node] then
							Explorer.SetRenamingNode(node)
						end
					elseif button == 2 then
						Explorer.ShowRightClick()
					end
				end)
				Explorer.ClickSystem = sys
			end

			Explorer.InitDelCleaner = function()
				coroutine.wrap(function()
					local fw = Lib.FastWait
					while true do
						local processed = false
						local c = 0
						for _,node in next,nodes do
							if node.HasDel then
								local delInd
								for i = 1,#node do
									if node[i].Del then
										delInd = i
										break
									end
								end
								if delInd then
									for i = delInd+1,#node do
										local cn = node[i]
										if not cn.Del then
											node[delInd] = cn
											delInd = delInd+1
										end
									end
									for i = delInd,#node do
										node[i] = nil
									end
								end
								node.HasDel = false
								processed = true
								fw()
							end
							c = c + 1
							if c > 10000 then
								c = 0
								fw()
							end
						end
						if processed and not refreshDebounce then Explorer.PerformRefresh() end
						fw(0.5)
					end
				end)()
			end

			Explorer.UpdateSelectionVisuals = function()
				local holder = Explorer.SelectionVisualsHolder
				local isa = game.IsA
				local clone = game.Clone
				if not holder then
					holder = Instance.new("ScreenGui")
					holder.Name = "ExplorerSelections"
					holder.DisplayOrder = Main.DisplayOrders.Core
					Lib.ShowGui(holder)
					Explorer.SelectionVisualsHolder = holder
					Explorer.SelectionVisualCons = {}

					local guiTemplate = create({
						{1,"Frame",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Size=UDim2.new(0,100,0,100),}},
						{2,"Frame",{BackgroundColor3=Color3.new(0.04313725605607,0.35294118523598,0.68627452850342),BorderSizePixel=0,Parent={1},Position=UDim2.new(0,-1,0,-1),Size=UDim2.new(1,2,0,1),}},
						{3,"Frame",{BackgroundColor3=Color3.new(0.04313725605607,0.35294118523598,0.68627452850342),BorderSizePixel=0,Parent={1},Position=UDim2.new(0,-1,1,0),Size=UDim2.new(1,2,0,1),}},
						{4,"Frame",{BackgroundColor3=Color3.new(0.04313725605607,0.35294118523598,0.68627452850342),BorderSizePixel=0,Parent={1},Position=UDim2.new(0,-1,0,0),Size=UDim2.new(0,1,1,0),}},
						{5,"Frame",{BackgroundColor3=Color3.new(0.04313725605607,0.35294118523598,0.68627452850342),BorderSizePixel=0,Parent={1},Position=UDim2.new(1,0,0,0),Size=UDim2.new(0,1,1,0),}},
					})
					Explorer.SelectionVisualGui = guiTemplate

					local boxTemplate = Instance.new("SelectionBox")
					boxTemplate.LineThickness = 0.03
					boxTemplate.Color3 = Color3.fromRGB(0, 170, 255)
					Explorer.SelectionVisualBox = boxTemplate
				end
				holder:ClearAllChildren()

				-- Updates theme
				for i,v in pairs(Explorer.SelectionVisualGui:GetChildren()) do
					v.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
				end

				local attachCons = Explorer.SelectionVisualCons
				for i = 1,#attachCons do
					attachCons[i].Destroy()
				end
				table.clear(attachCons)

				local partEnabled = Settings.Explorer.PartSelectionBox
				local guiEnabled = Settings.Explorer.GuiSelectionBox
				if not partEnabled and not guiEnabled then return end

				local svg = Explorer.SelectionVisualGui
				local svb = Explorer.SelectionVisualBox
				local attachTo = Lib.AttachTo
				local sList = selection.List
				local count = 1
				local boxCount = 0
				local workspaceNode = nodes[workspace]
				for i = 1,#sList do
					if boxCount > 1000 then break end
					local node = sList[i]
					local obj = node.Obj

					if node ~= workspaceNode then
						if isa(obj,"GuiObject") and guiEnabled then
							local newVisual = clone(svg)
							attachCons[count] = attachTo(newVisual,{Target = obj, Resize = true})
							count = count + 1
							newVisual.Parent = holder
							boxCount = boxCount + 1
						elseif isa(obj,"PVInstance") and partEnabled then
							local newBox = clone(svb)
							newBox.Adornee = obj
							newBox.Parent = holder
							boxCount = boxCount + 1
						end
					end
				end
			end

			Explorer.Init = function()
				Explorer.ClassIcons = Lib.IconMap.newLinear(iconImages[currentTheme] or "Colourful",64,64)
				Explorer.MiscIcons = Main.MiscIcons

				clipboard = {}

				selection = Lib.Set.new()
				selection.ShiftSet = {}
				selection.Changed:Connect(Properties.ShowExplorerProps)
				Explorer.Selection = selection

				Explorer.InitRightClick()
				Explorer.InitInsertObject()
				Explorer.SetSortingEnabled(Settings.Explorer.Sorting)
				Explorer.Expanded = setmetatable({},{__mode = "k"})
				Explorer.SearchExpanded = setmetatable({},{__mode = "k"})
				expanded = Explorer.Expanded

				nilNode.Obj.Name = "Nil Instances"
				nilNode.Locked = true

				local explorerItems = create({
					{1,"Folder",{Name="ExplorerItems",}},
					{2,"Frame",{BackgroundColor3=Color3.new(0.20392157137394,0.20392157137394,0.20392157137394),BorderSizePixel=0,Name="ToolBar",Parent={1},Size=UDim2.new(1,0,0,22),}},
					{3,"Frame",{BackgroundColor3=Color3.new(0.14901961386204,0.14901961386204,0.14901961386204),BorderColor3=Color3.new(0.1176470592618,0.1176470592618,0.1176470592618),BorderSizePixel=0,Name="SearchFrame",Parent={2},Position=UDim2.new(0,3,0,1),Size=UDim2.new(1,-6,0,18),}},
					{4,"TextBox",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,ClearTextOnFocus=false,Font=3,Name="SearchBox",Parent={3},PlaceholderColor3=Color3.new(0.39215689897537,0.39215689897537,0.39215689897537),PlaceholderText="Search workspace",Position=UDim2.new(0,4,0,0),Size=UDim2.new(1,-24,0,18),Text="",TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,}},
					{5,"UICorner",{CornerRadius=UDim.new(0,2),Parent={3},}},
					{6,"TextButton",{AutoButtonColor=false,BackgroundColor3=Color3.new(0.12549020349979,0.12549020349979,0.12549020349979),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="Reset",Parent={3},Position=UDim2.new(1,-17,0,1),Size=UDim2.new(0,16,0,16),Text="",TextColor3=Color3.new(1,1,1),TextSize=14,}},
					{7,"ImageLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Image="rbxassetid://5034718129",ImageColor3=Color3.new(0.39215686917305,0.39215686917305,0.39215686917305),Parent={6},Size=UDim2.new(0,16,0,16),}},
					{8,"TextButton",{AutoButtonColor=false,BackgroundColor3=Color3.new(0.12549020349979,0.12549020349979,0.12549020349979),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="Refresh",Parent={2},Position=UDim2.new(1,-20,0,1),Size=UDim2.new(0,18,0,18),Text="",TextColor3=Color3.new(1,1,1),TextSize=14,Visible=false,}},
					{9,"ImageLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Image="rbxassetid://5642310344",Parent={8},Position=UDim2.new(0,3,0,3),Size=UDim2.new(0,12,0,12),}},
					{10,"Frame",{BackgroundColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),BorderSizePixel=0,Name="ScrollCorner",Parent={1},Position=UDim2.new(1,-16,1,-16),Size=UDim2.new(0,16,0,16),Visible=false,}},
					{11,"Frame",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,ClipsDescendants=true,Name="List",Parent={1},Position=UDim2.new(0,0,0,23),Size=UDim2.new(1,0,1,-23),}},
				})

				toolBar = explorerItems.ToolBar
				treeFrame = explorerItems.List

				Explorer.GuiElems.ToolBar = toolBar
				Explorer.GuiElems.TreeFrame = treeFrame

				scrollV = Lib.ScrollBar.new()		
				scrollV.WheelIncrement = 3
				scrollV.Gui.Position = UDim2.new(1,-16,0,23)
				scrollV:SetScrollFrame(treeFrame)
				scrollV.Scrolled:Connect(function()
					Explorer.Index = scrollV.Index
					Explorer.Refresh()
				end)

				scrollH = Lib.ScrollBar.new(true)
				scrollH.Increment = 5
				scrollH.WheelIncrement = Explorer.EntryIndent
				scrollH.Gui.Position = UDim2.new(0,0,1,-16)
				scrollH.Scrolled:Connect(function()
					Explorer.Refresh()
				end)

				local window = Lib.Window.new()
				Explorer.Window = window
				window:SetTitle("Explorer")
				window.GuiElems.Line.Position = UDim2.new(0,0,0,22)

				Explorer.InitEntryTemplate()
				toolBar.Parent = window.GuiElems.Content
				treeFrame.Parent = window.GuiElems.Content
				explorerItems.ScrollCorner.Parent = window.GuiElems.Content
				scrollV.Gui.Parent = window.GuiElems.Content
				scrollH.Gui.Parent = window.GuiElems.Content

				-- Init stuff that requires the window
				Explorer.InitRenameBox()
				Explorer.InitSearch()
				Explorer.InitDelCleaner()
				selection.Changed:Connect(Explorer.UpdateSelectionVisuals)

				-- Window events
				window.GuiElems.Main:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
					if Explorer.Active then
						Explorer.UpdateView()
						Explorer.Refresh()
					end
				end)
				window.OnActivate:Connect(function()
					Explorer.Active = true
					Explorer.UpdateView()
					Explorer.Update()
					Explorer.Refresh()
				end)
				window.OnRestore:Connect(function()
					Explorer.Active = true
					Explorer.UpdateView()
					Explorer.Update()
					Explorer.Refresh()
				end)
				window.OnDeactivate:Connect(function() Explorer.Active = false end)
				window.OnMinimize:Connect(function() Explorer.Active = false end)

				-- Settings
				autoUpdateSearch = Settings.Explorer.AutoUpdateSearch


				-- Fill in nodes
				nodes[game] = {Obj = game}
				expanded[nodes[game]] = true

				-- Nil Instances
				if env.getnilinstances then
					nodes[nilNode.Obj] = nilNode
				end

				Explorer.SetupConnections()

				local insts = getDescendants(game)
				if Main.Elevated then
					for i = 1,#insts do
						local obj = insts[i]
						local par = nodes[ffa(obj,"Instance")]
						if not par then continue end
						local newNode = {
							Obj = obj,
							Parent = par,
						}
						nodes[obj] = newNode
						par[#par+1] = newNode
					end
				else
					for i = 1,#insts do
						local obj = insts[i]
						local s,parObj = pcall(ffa,obj,"Instance")
						local par = nodes[parObj]
						if not par then continue end
						local newNode = {
							Obj = obj,
							Parent = par,
						}
						nodes[obj] = newNode
						par[#par+1] = newNode
					end
				end
			end

			return Explorer
		end

		-- TODO: Remove when open source
		if gethsfuncs then
			_G.moduleData = {InitDeps = initDeps, InitAfterMain = initAfterMain, Main = main}
		else
			return {InitDeps = initDeps, InitAfterMain = initAfterMain, Main = main}
		end
	end,
	["Lib"] = function()
--[[
	Lib Module
	
	Container for functions and classes
]]

		-- Common Locals
		local Main,Lib,Apps,Settings -- Main Containers
		local Explorer, Properties, ScriptViewer, Notebook -- Major Apps
		local API,RMD,env,service,plr,create,createSimple -- Main Locals

		local function initDeps(data)
			Main = data.Main
			Lib = data.Lib
			Apps = data.Apps
			Settings = data.Settings

			API = data.API
			RMD = data.RMD
			env = data.env
			service = data.service
			plr = data.plr
			create = data.create
			createSimple = data.createSimple
		end

		local function initAfterMain()
			Explorer = Apps.Explorer
			Properties = Apps.Properties
			ScriptViewer = Apps.ScriptViewer
			Notebook = Apps.Notebook
		end

		local function main()
			local Lib = {}

			local renderStepped = service.RunService.RenderStepped
			local signalWait = renderStepped.wait
			local PH = newproxy() -- Placeholder, must be replaced in constructor
			local SIGNAL = newproxy()

			-- Usually for classes that work with a Roblox Object
			local function initObj(props,mt)
				local type = type
				local function copy(t)
					local res = {}
					for i,v in pairs(t) do
						if v == SIGNAL then
							res[i] = Lib.Signal.new()
						elseif type(v) == "table" then
							res[i] = copy(v)
						else
							res[i] = v
						end
					end		
					return res
				end

				local newObj = copy(props)
				return setmetatable(newObj,mt)
			end

			local function getGuiMT(props,funcs)
				return {__index = function(self,ind) if not props[ind] then return funcs[ind] or self.Gui[ind] end end,
				__newindex = function(self,ind,val) if not props[ind] then self.Gui[ind] = val else rawset(self,ind,val) end end}
			end

			-- Functions

			Lib.FormatLuaString = (function()
				local string = string
				local gsub = string.gsub
				local format = string.format
				local char = string.char
				local cleanTable = {['"'] = '\\"', ['\\'] = '\\\\'}
				for i = 0,31 do
					cleanTable[char(i)] = "\\"..format("%03d",i)
				end
				for i = 127,255 do
					cleanTable[char(i)] = "\\"..format("%03d",i)
				end

				return function(str)
					return gsub(str,"[\"\\\0-\31\127-\255]",cleanTable)
				end
			end)()

			Lib.CheckMouseInGui = function(gui)
				if gui == nil then return false end
				local mouse = Main.Mouse
				local guiPosition = gui.AbsolutePosition
				local guiSize = gui.AbsoluteSize	

				return mouse.X >= guiPosition.X and mouse.X < guiPosition.X + guiSize.X and mouse.Y >= guiPosition.Y and mouse.Y < guiPosition.Y + guiSize.Y
			end

			Lib.IsShiftDown = function()
				return service.UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) or service.UserInputService:IsKeyDown(Enum.KeyCode.RightShift)
			end

			Lib.IsCtrlDown = function()
				return service.UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) or service.UserInputService:IsKeyDown(Enum.KeyCode.RightControl)
			end

			Lib.CreateArrow = function(size,num,dir)
				local max = num
				local arrowFrame = createSimple("Frame",{
					BackgroundTransparency = 1,
					Name = "Arrow",
					Size = UDim2.new(0,size,0,size)
				})
				if dir == "up" then
					for i = 1,num do
						local newLine = createSimple("Frame",{
							BackgroundColor3 = Color3.new(220/255,220/255,220/255),
							BorderSizePixel = 0,
							Position = UDim2.new(0,math.floor(size/2)-(i-1),0,math.floor(size/2)+i-math.floor(max/2)-1),
							Size = UDim2.new(0,i+(i-1),0,1),
							Parent = arrowFrame
						})
					end
					return arrowFrame
				elseif dir == "down" then
					for i = 1,num do
						local newLine = createSimple("Frame",{
							BackgroundColor3 = Color3.new(220/255,220/255,220/255),
							BorderSizePixel = 0,
							Position = UDim2.new(0,math.floor(size/2)-(i-1),0,math.floor(size/2)-i+math.floor(max/2)+1),
							Size = UDim2.new(0,i+(i-1),0,1),
							Parent = arrowFrame
						})
					end
					return arrowFrame
				elseif dir == "left" then
					for i = 1,num do
						local newLine = createSimple("Frame",{
							BackgroundColor3 = Color3.new(220/255,220/255,220/255),
							BorderSizePixel = 0,
							Position = UDim2.new(0,math.floor(size/2)+i-math.floor(max/2)-1,0,math.floor(size/2)-(i-1)),
							Size = UDim2.new(0,1,0,i+(i-1)),
							Parent = arrowFrame
						})
					end
					return arrowFrame
				elseif dir == "right" then
					for i = 1,num do
						local newLine = createSimple("Frame",{
							BackgroundColor3 = Color3.new(220/255,220/255,220/255),
							BorderSizePixel = 0,
							Position = UDim2.new(0,math.floor(size/2)-i+math.floor(max/2)+1,0,math.floor(size/2)-(i-1)),
							Size = UDim2.new(0,1,0,i+(i-1)),
							Parent = arrowFrame
						})
					end
					return arrowFrame
				end
				error("r u ok")
			end

			Lib.ParseXML = (function()
				local func = function()
					-- Only exists to parse RMD
					-- from https://github.com/jonathanpoelen/xmlparser

					local string, print, pairs = string, print, pairs

					-- http://lua-users.org/wiki/StringTrim
					local trim = function(s)
						local from = s:match"^%s*()"
						return from > #s and "" or s:match(".*%S", from)
					end

					local gtchar = string.byte('>', 1)
					local slashchar = string.byte('/', 1)
					local D = string.byte('D', 1)
					local E = string.byte('E', 1)

					function parse(s, evalEntities)
						-- remove comments
						s = s:gsub('<!%-%-(.-)%-%->', '')

						local entities, tentities = {}

						if evalEntities then
							local pos = s:find('<[_%w]')
							if pos then
								s:sub(1, pos):gsub('<!ENTITY%s+([_%w]+)%s+(.)(.-)%2', function(name, q, entity)
									entities[#entities+1] = {name=name, value=entity}
								end)
								tentities = createEntityTable(entities)
								s = replaceEntities(s:sub(pos), tentities)
							end
						end

						local t, l = {}, {}

						local addtext = function(txt)
							txt = txt:match'^%s*(.*%S)' or ''
							if #txt ~= 0 then
								t[#t+1] = {text=txt}
							end    
						end

						s:gsub('<([?!/]?)([-:_%w]+)%s*(/?>?)([^<]*)', function(type, name, closed, txt)
							-- open
							if #type == 0 then
								local a = {}
								if #closed == 0 then
									local len = 0
									for all,aname,_,value,starttxt in string.gmatch(txt, "(.-([-_%w]+)%s*=%s*(.)(.-)%3%s*(/?>?))") do
										len = len + #all
										a[aname] = value
										if #starttxt ~= 0 then
											txt = txt:sub(len+1)
											closed = starttxt
											break
										end
									end
								end
								t[#t+1] = {tag=name, attrs=a, children={}}

								if closed:byte(1) ~= slashchar then
									l[#l+1] = t
									t = t[#t].children
								end

								addtext(txt)
								-- close
							elseif '/' == type then
								t = l[#l]
								l[#l] = nil

								addtext(txt)
								-- ENTITY
							elseif '!' == type then
								if E == name:byte(1) then
									txt:gsub('([_%w]+)%s+(.)(.-)%2', function(name, q, entity)
										entities[#entities+1] = {name=name, value=entity}
									end, 1)
								end
								-- elseif '?' == type then
								--   print('?  ' .. name .. ' // ' .. attrs .. '$$')
								-- elseif '-' == type then
								--   print('comment  ' .. name .. ' // ' .. attrs .. '$$')
								-- else
								--   print('o  ' .. #p .. ' // ' .. name .. ' // ' .. attrs .. '$$')
							end
						end)

						return {children=t, entities=entities, tentities=tentities}
					end

					function parseText(txt)
						return parse(txt)
					end

					function defaultEntityTable()
						return { quot='"', apos='\'', lt='<', gt='>', amp='&', tab='\t', nbsp=' ', }
					end

					function replaceEntities(s, entities)
						return s:gsub('&([^;]+);', entities)
					end

					function createEntityTable(docEntities, resultEntities)
						entities = resultEntities or defaultEntityTable()
						for _,e in pairs(docEntities) do
							e.value = replaceEntities(e.value, entities)
							entities[e.name] = e.value
						end
						return entities
					end

					return parseText
				end
				local newEnv = setmetatable({},{__index = getfenv()})
				setfenv(func,newEnv)
				return func()
			end)()

			Lib.FastWait = function(s)
				if not s then return signalWait(renderStepped) end
				local start = tick()
				while tick() - start < s do signalWait(renderStepped) end
			end

			Lib.ButtonAnim = function(button,data)
				local holding = false
				local disabled = false
				local mode = data and data.Mode or 1
				local control = {}

				if mode == 2 then
					local lerpTo = data.LerpTo or Color3.new(0,0,0)
					local delta = data.LerpDelta or 0.2
					control.StartColor = data.StartColor or button.BackgroundColor3
					control.PressColor = data.PressColor or control.StartColor:lerp(lerpTo,delta)
					control.HoverColor = data.HoverColor or control.StartColor:lerp(control.PressColor,0.6)
					control.OutlineColor = data.OutlineColor
				end

				button.InputBegan:Connect(function(input)
					if disabled then return end
					if input.UserInputType == Enum.UserInputType.MouseMovement and not holding then
						if mode == 1 then
							button.BackgroundTransparency = 0.4
						elseif mode == 2 then
							button.BackgroundColor3 = control.HoverColor
						end
					elseif input.UserInputType == Enum.UserInputType.MouseButton1 then
						holding = true
						if mode == 1 then
							button.BackgroundTransparency = 0
						elseif mode == 2 then
							button.BackgroundColor3 = control.PressColor
							if control.OutlineColor then button.BorderColor3 = control.PressColor end
						end
					end
				end)

				button.InputEnded:Connect(function(input)
					if disabled then return end
					if input.UserInputType == Enum.UserInputType.MouseMovement and not holding then
						if mode == 1 then
							button.BackgroundTransparency = 1
						elseif mode == 2 then
							button.BackgroundColor3 = control.StartColor
						end
					elseif input.UserInputType == Enum.UserInputType.MouseButton1 then
						holding = false
						if mode == 1 then
							button.BackgroundTransparency = Lib.CheckMouseInGui(button) and 0.4 or 1
						elseif mode == 2 then
							button.BackgroundColor3 = Lib.CheckMouseInGui(button) and control.HoverColor or control.StartColor
							if control.OutlineColor then button.BorderColor3 = control.OutlineColor end
						end
					end
				end)

				control.Disable = function()
					disabled = true
					holding = false

					if mode == 1 then
						button.BackgroundTransparency = 1
					elseif mode == 2 then
						button.BackgroundColor3 = control.StartColor
					end
				end

				control.Enable = function()
					disabled = false
				end

				return control
			end

			Lib.FindAndRemove = function(t,item)
				local pos = table.find(t,item)
				if pos then table.remove(t,pos) end
			end

			Lib.AttachTo = function(obj,data)
				local target,posOffX,posOffY,sizeOffX,sizeOffY,resize,con
				local disabled = false

				local function update()
					if not obj or not target then return end

					local targetPos = target.AbsolutePosition
					local targetSize = target.AbsoluteSize
					obj.Position = UDim2.new(0,targetPos.X + posOffX,0,targetPos.Y + posOffY)
					if resize then obj.Size = UDim2.new(0,targetSize.X + sizeOffX,0,targetSize.Y + sizeOffY) end
				end

				local function setup(o,data)
					obj = o
					data = data or {}
					target = data.Target
					posOffX = data.PosOffX or 0
					posOffY = data.PosOffY or 0
					sizeOffX = data.SizeOffX or 0
					sizeOffY = data.SizeOffY or 0
					resize = data.Resize or false

					if con then con:Disconnect() con = nil end
					if target then
						con = target.Changed:Connect(function(prop)
							if not disabled and prop == "AbsolutePosition" or prop == "AbsoluteSize" then
								update()
							end
						end)
					end

					update()
				end
				setup(obj,data)

				return {
					SetData = function(obj,data)
						setup(obj,data)
					end,
					Enable = function()
						disabled = false
						update()
					end,
					Disable = function()
						disabled = true
					end,
					Destroy = function()
						con:Disconnect()
						con = nil
					end,
				}
			end

			Lib.ProtectedGuis = {}

			Lib.ShowGui = function(gui)
				if env.protectgui then
					env.protectgui(gui)
				end
				gui.Parent = Main.GuiHolder
			end

			Lib.ColorToBytes = function(col)
				local round = math.round
				return string.format("%d, %d, %d",round(col.r*255),round(col.g*255),round(col.b*255))
			end

			Lib.ReadFile = function(filename)
				if not env.readfile then return end

				local s,contents = pcall(env.readfile,filename)
				if s and contents then return contents end
			end

			Lib.DeferFunc = function(f,...)
				signalWait(renderStepped)
				return f(...)
			end

			Lib.LoadCustomAsset = function(filepath)
				if not env.getcustomasset or not env.isfile or not env.isfile(filepath) then return end

				return env.getcustomasset(filepath)
			end

			Lib.FetchCustomAsset = function(url,filepath)
				if not env.writefile then return end

				local s,data = pcall(game.HttpGet,game,url)
				if not s then return end

				env.writefile(filepath,data)
				return Lib.LoadCustomAsset(filepath)
			end

			-- Classes

			Lib.Signal = (function()
				local funcs = {}

				local disconnect = function(con)
					local pos = table.find(con.Signal.Connections,con)
					if pos then table.remove(con.Signal.Connections,pos) end
				end

				funcs.Connect = function(self,func)
					if type(func) ~= "function" then error("Attempt to connect a non-function") end		
					local con = {
						Signal = self,
						Func = func,
						Disconnect = disconnect
					}
					self.Connections[#self.Connections+1] = con
					return con
				end

				funcs.Fire = function(self,...)
					for i,v in next,self.Connections do
						xpcall(coroutine.wrap(v.Func),function(e) warn(e.."\n"..debug.traceback()) end,...)
					end
				end

				local mt = {
					__index = funcs,
					__tostring = function(self)
						return "Signal: " .. tostring(#self.Connections) .. " Connections"
					end
				}

				local function new()
					local obj = {}
					obj.Connections = {}

					return setmetatable(obj,mt)
				end

				return {new = new}
			end)()

			Lib.Set = (function()
				local funcs = {}

				funcs.Add = function(self,obj)
					if self.Map[obj] then return end

					local list = self.List
					list[#list+1] = obj
					self.Map[obj] = true
					self.Changed:Fire()
				end

				funcs.AddTable = function(self,t)
					local changed
					local list,map = self.List,self.Map
					for i = 1,#t do
						local elem = t[i]
						if not map[elem] then
							list[#list+1] = elem
							map[elem] = true
							changed = true
						end
					end
					if changed then self.Changed:Fire() end
				end

				funcs.Remove = function(self,obj)
					if not self.Map[obj] then return end

					local list = self.List
					local pos = table.find(list,obj)
					if pos then table.remove(list,pos) end
					self.Map[obj] = nil
					self.Changed:Fire()
				end

				funcs.RemoveTable = function(self,t)
					local changed
					local list,map = self.List,self.Map
					local removeSet = {}
					for i = 1,#t do
						local elem = t[i]
						map[elem] = nil
						removeSet[elem] = true
					end

					for i = #list,1,-1 do
						local elem = list[i]
						if removeSet[elem] then
							table.remove(list,i)
							changed = true
						end
					end
					if changed then self.Changed:Fire() end
				end

				funcs.Set = function(self,obj)
					if #self.List == 1 and self.List[1] == obj then return end

					self.List = {obj}
					self.Map = {[obj] = true}
					self.Changed:Fire()
				end

				funcs.SetTable = function(self,t)
					local newList,newMap = {},{}
					self.List,self.Map = newList,newMap
					table.move(t,1,#t,1,newList)
					for i = 1,#t do
						newMap[t[i]] = true
					end
					self.Changed:Fire()
				end

				funcs.Clear = function(self)
					if #self.List == 0 then return end
					self.List = {}
					self.Map = {}
					self.Changed:Fire()
				end

				local mt = {__index = funcs}

				local function new()
					local obj = setmetatable({
						List = {},
						Map = {},
						Changed = Lib.Signal.new()
					},mt)

					return obj
				end

				return {new = new}
			end)()

			Lib.IconMap = (function()
				local funcs = {}

				funcs.GetLabel = function(self)
					local label = Instance.new("ImageLabel")
					self:SetupLabel(label)
					return label
				end

				funcs.SetupLabel = function(self,obj)
					obj.BackgroundTransparency = 1
					obj.ImageRectOffset = Vector2.new(0,0)
					obj.ImageRectSize = Vector2.new(self.IconSizeX,self.IconSizeY)
					obj.ScaleType = Enum.ScaleType.Crop
					obj.Size = UDim2.new(0,self.IconSizeX,0,self.IconSizeY)
				end

				funcs.Display = function(self,obj,index,instance)
					obj.Image = self.MapId
					if not instance then
						if not self.NumX then
							obj.ImageRectOffset = Vector2.new(self.IconSizeX*index, 0)
						else
							obj.ImageRectOffset = Vector2.new(self.IconSizeX*(index % self.NumX), self.IconSizeY*math.floor(index / self.NumX))	
						end
					else
						index = iconData[instance.ClassName]
						if instance == game.Players.LocalPlayer and LocalPlayerColor then
							obj.ImageColor3 = LocalPlayerColor
							obj.Image = iconImages.Mono
						else
							obj.ImageColor3 = CustomColor or Color3.new(1, 1, 1)
						end

						pcall(function()
							obj.ImageRectOffset = Vector2.new(((index - 1)%25) * 32, math.floor((index - 1) / 25) * 32)
							obj.ImageRectSize = Vector2.new(32, 32)
						end)
					end
				end

				funcs.DisplayByKey = function(self,obj,key)
					if self.IndexDict[key] then
						self:Display(obj,self.IndexDict[key])
					end
				end

				funcs.SetDict = function(self,dict)
					self.IndexDict = dict
				end

				local mt = {}
				mt.__index = funcs

				local function new(mapId,mapSizeX,mapSizeY,iconSizeX,iconSizeY)
					local obj = setmetatable({
						MapId = mapId,
						MapSizeX = mapSizeX,
						MapSizeY = mapSizeY,
						IconSizeX = iconSizeX,
						IconSizeY = iconSizeY,
						NumX = mapSizeX/iconSizeX,
						IndexDict = {}
					},mt)
					return obj
				end

				local function newLinear(mapId,iconSizeX,iconSizeY)
					local obj = setmetatable({
						MapId = mapId,
						IconSizeX = iconSizeX,
						IconSizeY = iconSizeY,
						IndexDict = {}
					},mt)
					return obj
				end

				return {new = new, newLinear = newLinear}
			end)()

			Lib.ScrollBar = (function()
				local funcs = {}
				local user = service.UserInputService
				local mouse = plr:GetMouse()
				local checkMouseInGui = Lib.CheckMouseInGui
				local createArrow = Lib.CreateArrow

				local function drawThumb(self)
					local total = self.TotalSpace
					local visible = self.VisibleSpace
					local index = self.Index
					local scrollThumb = self.GuiElems.ScrollThumb
					local scrollThumbFrame = self.GuiElems.ScrollThumbFrame

					if not (self:CanScrollUp()	or self:CanScrollDown()) then
						scrollThumb.Visible = false
					else
						scrollThumb.Visible = true
					end

					if self.Horizontal then
						scrollThumb.Size = UDim2.new(visible/total,0,1,0)
						if scrollThumb.AbsoluteSize.X < 16 then
							scrollThumb.Size = UDim2.new(0,16,1,0)
						end
						local fs = scrollThumbFrame.AbsoluteSize.X
						local bs = scrollThumb.AbsoluteSize.X
						scrollThumb.Position = UDim2.new(self:GetScrollPercent()*(fs-bs)/fs,0,0,0)
					else
						scrollThumb.Size = UDim2.new(1,0,visible/total,0)
						if scrollThumb.AbsoluteSize.Y < 16 then
							scrollThumb.Size = UDim2.new(1,0,0,16)
						end
						local fs = scrollThumbFrame.AbsoluteSize.Y
						local bs = scrollThumb.AbsoluteSize.Y
						scrollThumb.Position = UDim2.new(0,0,self:GetScrollPercent()*(fs-bs)/fs,0)
					end
				end

				local function createFrame(self)
					local newFrame = createSimple("Frame",{Style=0,Active=true,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.35294118523598,0.35294118523598,0.35294118523598),BackgroundTransparency=0,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(1,-16,0,0),Rotation=0,Selectable=false,Size=UDim2.new(0,16,1,0),SizeConstraint=0,Visible=true,ZIndex=1,Name="ScrollBar",})
					local button1 = nil
					local button2 = nil

					if self.Horizontal then
						newFrame.Size = UDim2.new(1,0,0,16)
						button1 = createSimple("ImageButton",{
							Parent = newFrame,
							Name = "Left",
							Size = UDim2.new(0,16,0,16),
							BackgroundTransparency = 1,
							BorderSizePixel = 0,
							AutoButtonColor = false
						})
						createArrow(16,4,"left").Parent = button1
						button2 = createSimple("ImageButton",{
							Parent = newFrame,
							Name = "Right",
							Position = UDim2.new(1,-16,0,0),
							Size = UDim2.new(0,16,0,16),
							BackgroundTransparency = 1,
							BorderSizePixel = 0,
							AutoButtonColor = false
						})
						createArrow(16,4,"right").Parent = button2
					else
						newFrame.Size = UDim2.new(0,16,1,0)
						button1 = createSimple("ImageButton",{
							Parent = newFrame,
							Name = "Up",
							Size = UDim2.new(0,16,0,16),
							BackgroundTransparency = 1,
							BorderSizePixel = 0,
							AutoButtonColor = false
						})
						createArrow(16,4,"up").Parent = button1
						button2 = createSimple("ImageButton",{
							Parent = newFrame,
							Name = "Down",
							Position = UDim2.new(0,0,1,-16),
							Size = UDim2.new(0,16,0,16),
							BackgroundTransparency = 1,
							BorderSizePixel = 0,
							AutoButtonColor = false
						})
						createArrow(16,4,"down").Parent = button2
					end

					local scrollThumbFrame = createSimple("Frame",{
						BackgroundTransparency = 1,
						Parent = newFrame
					})
					if self.Horizontal then
						scrollThumbFrame.Position = UDim2.new(0,16,0,0)
						scrollThumbFrame.Size = UDim2.new(1,-32,1,0)
					else
						scrollThumbFrame.Position = UDim2.new(0,0,0,16)
						scrollThumbFrame.Size = UDim2.new(1,0,1,-32)
					end

					local scrollThumb = createSimple("Frame",{
						BackgroundColor3 = Color3.new(120/255,120/255,120/255),
						BorderSizePixel = 0,
						Parent = scrollThumbFrame
					})

					local markerFrame = createSimple("Frame",{
						BackgroundTransparency = 1,
						Name = "Markers",
						Size = UDim2.new(1,0,1,0),
						Parent = scrollThumbFrame
					})

					local buttonPress = false
					local thumbPress = false
					local thumbFramePress = false

					--local thumbColor = Color3.new(120/255,120/255,120/255)
					--local thumbSelectColor = Color3.new(140/255,140/255,140/255)
					button1.InputBegan:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseMovement and not buttonPress and self:CanScrollUp() then button1.BackgroundTransparency = 0.8 end
						if input.UserInputType ~= Enum.UserInputType.MouseButton1 or not self:CanScrollUp() then return end
						buttonPress = true
						button1.BackgroundTransparency = 0.5
						if self:CanScrollUp() then self:ScrollUp() self.Scrolled:Fire() end
						local buttonTick = tick()
						local releaseEvent
						releaseEvent = user.InputEnded:Connect(function(input)
							if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end
							releaseEvent:Disconnect()
							if checkMouseInGui(button1) and self:CanScrollUp() then button1.BackgroundTransparency = 0.8 else button1.BackgroundTransparency = 1 end
							buttonPress = false
						end)
						while buttonPress do
							if tick() - buttonTick >= 0.3 and self:CanScrollUp() then
								self:ScrollUp()
								self.Scrolled:Fire()
							end
							wait()
						end
					end)
					button1.InputEnded:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseMovement and not buttonPress then button1.BackgroundTransparency = 1 end
					end)
					button2.InputBegan:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseMovement and not buttonPress and self:CanScrollDown() then button2.BackgroundTransparency = 0.8 end
						if input.UserInputType ~= Enum.UserInputType.MouseButton1 or not self:CanScrollDown() then return end
						buttonPress = true
						button2.BackgroundTransparency = 0.5
						if self:CanScrollDown() then self:ScrollDown() self.Scrolled:Fire() end
						local buttonTick = tick()
						local releaseEvent
						releaseEvent = user.InputEnded:Connect(function(input)
							if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end
							releaseEvent:Disconnect()
							if checkMouseInGui(button2) and self:CanScrollDown() then button2.BackgroundTransparency = 0.8 else button2.BackgroundTransparency = 1 end
							buttonPress = false
						end)
						while buttonPress do
							if tick() - buttonTick >= 0.3 and self:CanScrollDown() then
								self:ScrollDown()
								self.Scrolled:Fire()
							end
							wait()
						end
					end)
					button2.InputEnded:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseMovement and not buttonPress then button2.BackgroundTransparency = 1 end
					end)

					scrollThumb.InputBegan:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseMovement and not thumbPress then scrollThumb.BackgroundTransparency = 0.2 scrollThumb.BackgroundColor3 = self.ThumbSelectColor end
						if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end

						local dir = self.Horizontal and "X" or "Y"
						local lastThumbPos = nil

						buttonPress = false
						thumbFramePress = false			
						thumbPress = true
						scrollThumb.BackgroundTransparency = 0
						local mouseOffset = mouse[dir] - scrollThumb.AbsolutePosition[dir]
						local mouseStart = mouse[dir]
						local releaseEvent
						local mouseEvent
						releaseEvent = user.InputEnded:Connect(function(input)
							if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end
							releaseEvent:Disconnect()
							if mouseEvent then mouseEvent:Disconnect() end
							if checkMouseInGui(scrollThumb) then scrollThumb.BackgroundTransparency = 0.2 else scrollThumb.BackgroundTransparency = 0 scrollThumb.BackgroundColor3 = self.ThumbColor end
							thumbPress = false
						end)
						self:Update()

						mouseEvent = user.InputChanged:Connect(function(input)
							if input.UserInputType == Enum.UserInputType.MouseMovement and thumbPress and releaseEvent.Connected then
								local thumbFrameSize = scrollThumbFrame.AbsoluteSize[dir]-scrollThumb.AbsoluteSize[dir]
								local pos = mouse[dir] - scrollThumbFrame.AbsolutePosition[dir] - mouseOffset
								if pos > thumbFrameSize then
									pos = thumbFrameSize
								elseif pos < 0 then
									pos = 0
								end
								if lastThumbPos ~= pos then
									lastThumbPos = pos
									self:ScrollTo(math.floor(0.5+pos/thumbFrameSize*(self.TotalSpace-self.VisibleSpace)))
								end
								wait()
							end
						end)
					end)
					scrollThumb.InputEnded:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseMovement and not thumbPress then scrollThumb.BackgroundTransparency = 0 scrollThumb.BackgroundColor3 = self.ThumbColor end
					end)
					scrollThumbFrame.InputBegan:Connect(function(input)
						if input.UserInputType ~= Enum.UserInputType.MouseButton1 or checkMouseInGui(scrollThumb) then return end

						local dir = self.Horizontal and "X" or "Y"
						local scrollDir = 0
						if mouse[dir] >= scrollThumb.AbsolutePosition[dir] + scrollThumb.AbsoluteSize[dir] then
							scrollDir = 1
						end

						local function doTick()
							local scrollSize = self.VisibleSpace - 1
							if scrollDir == 0 and mouse[dir] < scrollThumb.AbsolutePosition[dir] then
								self:ScrollTo(self.Index - scrollSize)
							elseif scrollDir == 1 and mouse[dir] >= scrollThumb.AbsolutePosition[dir] + scrollThumb.AbsoluteSize[dir] then
								self:ScrollTo(self.Index + scrollSize)
							end
						end

						thumbPress = false			
						thumbFramePress = true
						doTick()
						local thumbFrameTick = tick()
						local releaseEvent
						releaseEvent = user.InputEnded:Connect(function(input)
							if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end
							releaseEvent:Disconnect()
							thumbFramePress = false
						end)
						while thumbFramePress do
							if tick() - thumbFrameTick >= 0.3 and checkMouseInGui(scrollThumbFrame) then
								doTick()
							end
							wait()
						end
					end)

					newFrame.MouseWheelForward:Connect(function()
						self:ScrollTo(self.Index - self.WheelIncrement)
					end)

					newFrame.MouseWheelBackward:Connect(function()
						self:ScrollTo(self.Index + self.WheelIncrement)
					end)

					self.GuiElems.ScrollThumb = scrollThumb
					self.GuiElems.ScrollThumbFrame = scrollThumbFrame
					self.GuiElems.Button1 = button1
					self.GuiElems.Button2 = button2
					self.GuiElems.MarkerFrame = markerFrame

					return newFrame
				end

				funcs.Update = function(self,nocallback)
					local total = self.TotalSpace
					local visible = self.VisibleSpace
					local index = self.Index
					local button1 = self.GuiElems.Button1
					local button2 = self.GuiElems.Button2

					self.Index = math.clamp(self.Index,0,math.max(0,total-visible))

					if self.LastTotalSpace ~= self.TotalSpace then
						self.LastTotalSpace = self.TotalSpace
						self:UpdateMarkers()
					end

					if self:CanScrollUp() then
						for i,v in pairs(button1.Arrow:GetChildren()) do
							v.BackgroundTransparency = 0
						end
					else
						button1.BackgroundTransparency = 1
						for i,v in pairs(button1.Arrow:GetChildren()) do
							v.BackgroundTransparency = 0.5
						end
					end
					if self:CanScrollDown() then
						for i,v in pairs(button2.Arrow:GetChildren()) do
							v.BackgroundTransparency = 0
						end
					else
						button2.BackgroundTransparency = 1
						for i,v in pairs(button2.Arrow:GetChildren()) do
							v.BackgroundTransparency = 0.5
						end
					end

					drawThumb(self)
				end

				funcs.UpdateMarkers = function(self)
					local markerFrame = self.GuiElems.MarkerFrame
					markerFrame:ClearAllChildren()

					for i,v in pairs(self.Markers) do
						if i < self.TotalSpace then
							createSimple("Frame",{
								BackgroundTransparency = 0,
								BackgroundColor3 = v,
								BorderSizePixel = 0,
								Position = self.Horizontal and UDim2.new(i/self.TotalSpace,0,1,-6) or UDim2.new(1,-6,i/self.TotalSpace,0),
								Size = self.Horizontal and UDim2.new(0,1,0,6) or UDim2.new(0,6,0,1),
								Name = "Marker"..tostring(i),
								Parent = markerFrame
							})
						end
					end
				end

				funcs.AddMarker = function(self,ind,color)
					self.Markers[ind] = color or Color3.new(0,0,0)
				end
				funcs.ScrollTo = function(self,ind,nocallback)
					self.Index = ind
					self:Update()
					if not nocallback then
						self.Scrolled:Fire()
					end
				end
				funcs.ScrollUp = function(self)
					self.Index = self.Index - self.Increment
					self:Update()
				end
				funcs.ScrollDown = function(self)
					self.Index = self.Index + self.Increment
					self:Update()
				end
				funcs.CanScrollUp = function(self)
					return self.Index > 0
				end
				funcs.CanScrollDown = function(self)
					return self.Index + self.VisibleSpace < self.TotalSpace
				end
				funcs.GetScrollPercent = function(self)
					return self.Index/(self.TotalSpace-self.VisibleSpace)
				end
				funcs.SetScrollPercent = function(self,perc)
					self.Index = math.floor(perc*(self.TotalSpace-self.VisibleSpace))
					self:Update()
				end

				funcs.Texture = function(self,data)
					self.ThumbColor = data.ThumbColor or Color3.new(0,0,0)
					self.ThumbSelectColor = data.ThumbSelectColor or Color3.new(0,0,0)
					self.GuiElems.ScrollThumb.BackgroundColor3 = data.ThumbColor or Color3.new(0,0,0)
					self.Gui.BackgroundColor3 = data.FrameColor or Color3.new(0,0,0)
					self.GuiElems.Button1.BackgroundColor3 = data.ButtonColor or Color3.new(0,0,0)
					self.GuiElems.Button2.BackgroundColor3 = data.ButtonColor or Color3.new(0,0,0)
					for i,v in pairs(self.GuiElems.Button1.Arrow:GetChildren()) do
						v.BackgroundColor3 = data.ArrowColor or Color3.new(0,0,0)
					end
					for i,v in pairs(self.GuiElems.Button2.Arrow:GetChildren()) do
						v.BackgroundColor3 = data.ArrowColor or Color3.new(0,0,0)
					end
				end

				funcs.SetScrollFrame = function(self,frame)
					if self.ScrollUpEvent then self.ScrollUpEvent:Disconnect() self.ScrollUpEvent = nil end
					if self.ScrollDownEvent then self.ScrollDownEvent:Disconnect() self.ScrollDownEvent = nil end
					self.ScrollUpEvent = frame.MouseWheelForward:Connect(function() self:ScrollTo(self.Index - self.WheelIncrement) end)
					self.ScrollDownEvent = frame.MouseWheelBackward:Connect(function() self:ScrollTo(self.Index + self.WheelIncrement) end)
				end

				local mt = {}
				mt.__index = funcs

				local function new(hor)
					local obj = setmetatable({
						Index = 0,
						VisibleSpace = 0,
						TotalSpace = 0,
						Increment = 1,
						WheelIncrement = 1,
						Markers = {},
						GuiElems = {},
						Horizontal = hor,
						LastTotalSpace = 0,
						Scrolled = Lib.Signal.new()
					},mt)
					obj.Gui = createFrame(obj)
					obj:Texture({
						ThumbColor = Color3.fromRGB(60,60,60),
						ThumbSelectColor = Color3.fromRGB(75,75,75),
						ArrowColor = Color3.new(1,1,1),
						FrameColor = Color3.fromRGB(40,40,40),
						ButtonColor = Color3.fromRGB(75,75,75)
					})
					return obj
				end

				return {new = new}
			end)()

			Lib.Window = (function()
				local funcs = {}
				local static = {MinWidth = 200, FreeWidth = 200}
				local mouse = plr:GetMouse()
				local sidesGui,alignIndicator
				local visibleWindows = {}
				local leftSide = {Width = 300, Windows = {}, ResizeCons = {}, Hidden = true}
				local rightSide = {Width = 300, Windows = {}, ResizeCons = {}, Hidden = true}

				local displayOrderStart
				local sideDisplayOrder
				local sideTweenInfo = TweenInfo.new(0.3,Enum.EasingStyle.Quad,Enum.EasingDirection.Out)
				local tweens = {}
				local isA = game.IsA

				local theme = {
					MainColor1 = Color3.fromRGB(52,52,52),
					MainColor2 = Color3.fromRGB(45,45,45),
					Button = Color3.fromRGB(60,60,60)
				}

				local function stopTweens()
					for i = 1,#tweens do
						tweens[i]:Cancel()
					end
					tweens = {}
				end

				local function resizeHook(self,resizer,dir)
					local guiMain = self.GuiElems.Main
					resizer.InputBegan:Connect(function(input)
						if not self.Dragging and not self.Resizing and self.Resizable and self.ResizableInternal then
							local isH = dir:find("[WE]") and true
							local isV = dir:find("[NS]") and true
							local signX = dir:find("W",1,true) and -1 or 1
							local signY = dir:find("N",1,true) and -1 or 1

							if self.Minimized and isV then return end

							if input.UserInputType == Enum.UserInputType.MouseMovement then
								resizer.BackgroundTransparency = 0.5
							elseif input.UserInputType == Enum.UserInputType.MouseButton1 then
								local releaseEvent,mouseEvent

								local offX = mouse.X - resizer.AbsolutePosition.X
								local offY = mouse.Y - resizer.AbsolutePosition.Y

								self.Resizing = resizer
								resizer.BackgroundTransparency = 1

								releaseEvent = service.UserInputService.InputEnded:Connect(function(input)
									if input.UserInputType == Enum.UserInputType.MouseButton1 then
										releaseEvent:Disconnect()
										mouseEvent:Disconnect()
										self.Resizing = false
										resizer.BackgroundTransparency = 1
									end
								end)

								mouseEvent = service.UserInputService.InputChanged:Connect(function(input)
									if self.Resizable and self.ResizableInternal and input.UserInputType == Enum.UserInputType.MouseMovement then
										self:StopTweens()
										local deltaX = input.Position.X - resizer.AbsolutePosition.X - offX
										local deltaY = input.Position.Y - resizer.AbsolutePosition.Y - offY

										if guiMain.AbsoluteSize.X + deltaX*signX < self.MinX then deltaX = signX*(self.MinX - guiMain.AbsoluteSize.X) end
										if guiMain.AbsoluteSize.Y + deltaY*signY < self.MinY then deltaY = signY*(self.MinY - guiMain.AbsoluteSize.Y) end
										if signY < 0 and guiMain.AbsolutePosition.Y + deltaY < 0 then deltaY = -guiMain.AbsolutePosition.Y end

										guiMain.Position = guiMain.Position + UDim2.new(0,(signX < 0 and deltaX or 0),0,(signY < 0 and deltaY or 0))
										self.SizeX = self.SizeX + (isH and deltaX*signX or 0)
										self.SizeY = self.SizeY + (isV and deltaY*signY or 0)
										guiMain.Size = UDim2.new(0,self.SizeX,0,self.Minimized and 20 or self.SizeY)

										--if isH then self.SizeX = guiMain.AbsoluteSize.X end
										--if isV then self.SizeY = guiMain.AbsoluteSize.Y end
									end
								end)
							end
						end
					end)

					resizer.InputEnded:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseMovement and self.Resizing ~= resizer then
							resizer.BackgroundTransparency = 1
						end
					end)
				end

				local updateWindows

				local function moveToTop(window)
					local found = table.find(visibleWindows,window)
					if found then
						table.remove(visibleWindows,found)
						table.insert(visibleWindows,1,window)
						updateWindows()
					end
				end

				local function sideHasRoom(side,neededSize)
					local maxY = sidesGui.AbsoluteSize.Y - (math.max(0,#side.Windows - 1) * 4)
					local inc = 0
					for i,v in pairs(side.Windows) do
						inc = inc + (v.MinY or 100)
						if inc > maxY - neededSize then return false end
					end

					return true
				end

				local function getSideInsertPos(side,curY)
					local pos = #side.Windows + 1
					local range = {0,sidesGui.AbsoluteSize.Y}

					for i,v in pairs(side.Windows) do
						local midPos = v.PosY + v.SizeY/2
						if curY <= midPos then
							pos = i
							range[2] = midPos
							break
						else
							range[1] = midPos
						end
					end

					return pos,range
				end

				local function focusInput(self,obj)
					if isA(obj,"GuiButton") then
						obj.MouseButton1Down:Connect(function()
							moveToTop(self)
						end)
					elseif isA(obj,"TextBox") then
						obj.Focused:Connect(function()
							moveToTop(self)
						end)
					end
				end

				local createGui = function(self)
					local gui = create({
						{1,"ScreenGui",{Name="Window",}},
						{2,"Frame",{Active=true,BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderSizePixel=0,Name="Main",Parent={1},Position=UDim2.new(0.40000000596046,0,0.40000000596046,0),Size=UDim2.new(0,300,0,300),}},
						{3,"Frame",{BackgroundColor3=Color3.new(0.17647059261799,0.17647059261799,0.17647059261799),BorderSizePixel=0,Name="Content",Parent={2},Position=UDim2.new(0,0,0,20),Size=UDim2.new(1,0,1,-20),ClipsDescendants=true}},
						{4,"Frame",{BackgroundColor3=Color3.fromRGB(33,33,33),BorderSizePixel=0,Name="Line",Parent={3},Size=UDim2.new(1,0,0,1),}},
						{5,"Frame",{BackgroundColor3=Color3.new(0.20392157137394,0.20392157137394,0.20392157137394),BorderSizePixel=0,Name="TopBar",Parent={2},Size=UDim2.new(1,0,0,20),}},
						{6,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Title",Parent={5},Position=UDim2.new(0,5,0,0),Size=UDim2.new(1,-10,0,20),Text="Window",TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,}},
						{7,"TextButton",{AutoButtonColor=false,BackgroundColor3=Color3.new(0.12549020349979,0.12549020349979,0.12549020349979),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="Close",Parent={5},Position=UDim2.new(1,-18,0,2),Size=UDim2.new(0,16,0,16),Text="",TextColor3=Color3.new(1,1,1),TextSize=14,}},
						{8,"ImageLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Image="rbxassetid://5054663650",Parent={7},Position=UDim2.new(0,3,0,3),Size=UDim2.new(0,10,0,10),}},
						{9,"UICorner",{CornerRadius=UDim.new(0,4),Parent={7},}},
						{10,"TextButton",{AutoButtonColor=false,BackgroundColor3=Color3.new(0.12549020349979,0.12549020349979,0.12549020349979),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="Minimize",Parent={5},Position=UDim2.new(1,-36,0,2),Size=UDim2.new(0,16,0,16),Text="",TextColor3=Color3.new(1,1,1),TextSize=14,}},
						{11,"ImageLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Image="rbxassetid://5034768003",Parent={10},Position=UDim2.new(0,3,0,3),Size=UDim2.new(0,10,0,10),}},
						{12,"UICorner",{CornerRadius=UDim.new(0,4),Parent={10},}},
						{13,"ImageLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderSizePixel=0,Image="rbxassetid://1427967925",Name="Outlines",Parent={2},Position=UDim2.new(0,-5,0,-5),ScaleType=1,Size=UDim2.new(1,10,1,10),SliceCenter=Rect.new(6,6,25,25),TileSize=UDim2.new(0,20,0,20),}},
						{14,"Frame",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Name="ResizeControls",Parent={2},Position=UDim2.new(0,-5,0,-5),Size=UDim2.new(1,10,1,10),}},
						{15,"TextButton",{AutoButtonColor=false,BackgroundColor3=Color3.new(0.27450981736183,0.27450981736183,0.27450981736183),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="North",Parent={14},Position=UDim2.new(0,5,0,0),Size=UDim2.new(1,-10,0,5),Text="",TextColor3=Color3.new(0,0,0),TextSize=14,}},
						{16,"TextButton",{AutoButtonColor=false,BackgroundColor3=Color3.new(0.27450981736183,0.27450981736183,0.27450981736183),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="South",Parent={14},Position=UDim2.new(0,5,1,-5),Size=UDim2.new(1,-10,0,5),Text="",TextColor3=Color3.new(0,0,0),TextSize=14,}},
						{17,"TextButton",{AutoButtonColor=false,BackgroundColor3=Color3.new(0.27450981736183,0.27450981736183,0.27450981736183),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="NorthEast",Parent={14},Position=UDim2.new(1,-5,0,0),Size=UDim2.new(0,5,0,5),Text="",TextColor3=Color3.new(0,0,0),TextSize=14,}},
						{18,"TextButton",{AutoButtonColor=false,BackgroundColor3=Color3.new(0.27450981736183,0.27450981736183,0.27450981736183),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="East",Parent={14},Position=UDim2.new(1,-5,0,5),Size=UDim2.new(0,5,1,-10),Text="",TextColor3=Color3.new(0,0,0),TextSize=14,}},
						{19,"TextButton",{AutoButtonColor=false,BackgroundColor3=Color3.new(0.27450981736183,0.27450981736183,0.27450981736183),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="West",Parent={14},Position=UDim2.new(0,0,0,5),Size=UDim2.new(0,5,1,-10),Text="",TextColor3=Color3.new(0,0,0),TextSize=14,}},
						{20,"TextButton",{AutoButtonColor=false,BackgroundColor3=Color3.new(0.27450981736183,0.27450981736183,0.27450981736183),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="SouthEast",Parent={14},Position=UDim2.new(1,-5,1,-5),Size=UDim2.new(0,5,0,5),Text="",TextColor3=Color3.new(0,0,0),TextSize=14,}},
						{21,"TextButton",{AutoButtonColor=false,BackgroundColor3=Color3.new(0.27450981736183,0.27450981736183,0.27450981736183),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="NorthWest",Parent={14},Size=UDim2.new(0,5,0,5),Text="",TextColor3=Color3.new(0,0,0),TextSize=14,}},
						{22,"TextButton",{AutoButtonColor=false,BackgroundColor3=Color3.new(0.27450981736183,0.27450981736183,0.27450981736183),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="SouthWest",Parent={14},Position=UDim2.new(0,0,1,-5),Size=UDim2.new(0,5,0,5),Text="",TextColor3=Color3.new(0,0,0),TextSize=14,}},
					})

					local guiMain = gui.Main
					local guiTopBar = guiMain.TopBar
					local guiResizeControls = guiMain.ResizeControls

					self.GuiElems.Main = guiMain
					self.GuiElems.TopBar = guiMain.TopBar
					self.GuiElems.Content = guiMain.Content
					self.GuiElems.Line = guiMain.Content.Line
					self.GuiElems.Outlines = guiMain.Outlines
					self.GuiElems.Title = guiTopBar.Title
					self.GuiElems.Close = guiTopBar.Close
					self.GuiElems.Minimize = guiTopBar.Minimize
					self.GuiElems.ResizeControls = guiResizeControls
					self.ContentPane = guiMain.Content

					guiTopBar.InputBegan:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseButton1 and self.Draggable then
							local releaseEvent,mouseEvent

							local maxX = sidesGui.AbsoluteSize.X
							local initX = guiMain.AbsolutePosition.X
							local initY = guiMain.AbsolutePosition.Y
							local offX = mouse.X - initX
							local offY = mouse.Y - initY

							local alignInsertPos,alignInsertSide

							guiDragging = true

							releaseEvent = game:GetService("UserInputService").InputEnded:Connect(function(input)
								if input.UserInputType == Enum.UserInputType.MouseButton1 then
									releaseEvent:Disconnect()
									mouseEvent:Disconnect()
									guiDragging = false
									alignIndicator.Parent = nil
									if alignInsertSide then
										local targetSide = (alignInsertSide == "left" and leftSide) or (alignInsertSide == "right" and rightSide)
										self:AlignTo(targetSide,alignInsertPos)
									end
								end
							end)

							mouseEvent = game:GetService("UserInputService").InputChanged:Connect(function(input)
								if input.UserInputType == Enum.UserInputType.MouseMovement and self.Draggable and not self.Closed then
									if self.Aligned then
										if leftSide.Resizing or rightSide.Resizing then return end
										local posX,posY = input.Position.X-offX,input.Position.Y-offY
										local delta = math.sqrt((posX-initX)^2 + (posY-initY)^2)
										if delta >= 5 then
											self:SetAligned(false)
										end
									else
										local inputX,inputY = input.Position.X,input.Position.Y
										local posX,posY = inputX-offX,inputY-offY
										if posY < 0 then posY = 0 end
										guiMain.Position = UDim2.new(0,posX,0,posY)

										if self.Resizable and self.Alignable then
											if inputX < 25 then
												if sideHasRoom(leftSide,self.MinY or 100) then
													local insertPos,range = getSideInsertPos(leftSide,inputY)
													alignIndicator.Indicator.Position = UDim2.new(0,-15,0,range[1])
													alignIndicator.Indicator.Size = UDim2.new(0,40,0,range[2]-range[1])
													Lib.ShowGui(alignIndicator)
													alignInsertPos = insertPos
													alignInsertSide = "left"
													return
												end
											elseif inputX >= maxX - 25 then
												if sideHasRoom(rightSide,self.MinY or 100) then
													local insertPos,range = getSideInsertPos(rightSide,inputY)
													alignIndicator.Indicator.Position = UDim2.new(0,maxX-25,0,range[1])
													alignIndicator.Indicator.Size = UDim2.new(0,40,0,range[2]-range[1])
													Lib.ShowGui(alignIndicator)
													alignInsertPos = insertPos
													alignInsertSide = "right"
													return
												end
											end
										end
										alignIndicator.Parent = nil
										alignInsertPos = nil
										alignInsertSide = nil
									end
								end
							end)
						end
					end)

					guiTopBar.Close.MouseButton1Click:Connect(function()
						if self.Closed then return end
						self:Close()
					end)

					guiTopBar.Minimize.MouseButton1Click:Connect(function()
						if self.Closed then return end
						if self.Aligned then
							self:SetAligned(false)
						else
							self:SetMinimized()
						end
					end)

					guiTopBar.Minimize.MouseButton2Click:Connect(function()
						if self.Closed then return end
						if not self.Aligned then
							self:SetMinimized(nil,2)
							guiTopBar.Minimize.BackgroundTransparency = 1
						end
					end)

					guiMain.InputBegan:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseButton1 and not self.Aligned and not self.Closed then
							moveToTop(self)
						end
					end)

					guiMain:GetPropertyChangedSignal("AbsolutePosition"):Connect(function()
						local absPos = guiMain.AbsolutePosition
						self.PosX = absPos.X
						self.PosY = absPos.Y
					end)

					resizeHook(self,guiResizeControls.North,"N")
					resizeHook(self,guiResizeControls.NorthEast,"NE")
					resizeHook(self,guiResizeControls.East,"E")
					resizeHook(self,guiResizeControls.SouthEast,"SE")
					resizeHook(self,guiResizeControls.South,"S")
					resizeHook(self,guiResizeControls.SouthWest,"SW")
					resizeHook(self,guiResizeControls.West,"W")
					resizeHook(self,guiResizeControls.NorthWest,"NW")

					guiMain.Size = UDim2.new(0,self.SizeX,0,self.SizeY)

					gui.DescendantAdded:Connect(function(obj) focusInput(self,obj) end)
					local descs = gui:GetDescendants()
					for i = 1,#descs do
						focusInput(self,descs[i])
					end

					self.MinimizeAnim = Lib.ButtonAnim(guiTopBar.Minimize)
					self.CloseAnim = Lib.ButtonAnim(guiTopBar.Close)

					return gui
				end

				local function updateSideFrames(noTween)
					stopTweens()
					leftSide.Frame.Size = UDim2.new(0,leftSide.Width,1,0)
					rightSide.Frame.Size = UDim2.new(0,rightSide.Width,1,0)
					leftSide.Frame.Resizer.Position = UDim2.new(0,leftSide.Width,0,0)
					rightSide.Frame.Resizer.Position = UDim2.new(0,-5,0,0)

					--leftSide.Frame.Visible = (#leftSide.Windows > 0)
					--rightSide.Frame.Visible = (#rightSide.Windows > 0)

			--[[if #leftSide.Windows > 0 and leftSide.Frame.Position == UDim2.new(0,-leftSide.Width-5,0,0) then
				leftSide.Frame:TweenPosition(UDim2.new(0,0,0,0),Enum.EasingDirection.Out,Enum.EasingStyle.Quad,0.3,true)
			elseif #leftSide.Windows == 0 and leftSide.Frame.Position == UDim2.new(0,0,0,0) then
				leftSide.Frame:TweenPosition(UDim2.new(0,-leftSide.Width-5,0,0),Enum.EasingDirection.Out,Enum.EasingStyle.Quad,0.3,true)
			end
			local rightTweenPos = (#rightSide.Windows == 0 and UDim2.new(1,5,0,0) or UDim2.new(1,-rightSide.Width,0,0))
			rightSide.Frame:TweenPosition(rightTweenPos,Enum.EasingDirection.Out,Enum.EasingStyle.Quad,0.3,true)]]
					local leftHidden = #leftSide.Windows == 0 or leftSide.Hidden
					local rightHidden = #rightSide.Windows == 0 or rightSide.Hidden
					local leftPos = (leftHidden and UDim2.new(0,-leftSide.Width-10,0,0) or UDim2.new(0,0,0,0))
					local rightPos = (rightHidden and UDim2.new(1,10,0,0) or UDim2.new(1,-rightSide.Width,0,0))

					sidesGui.LeftToggle.Text = leftHidden and ">" or "<"
					sidesGui.RightToggle.Text = rightHidden and "<" or ">"

					if not noTween then
						local function insertTween(...)
							local tween = service.TweenService:Create(...)
							tweens[#tweens+1] = tween
							tween:Play()
						end
						insertTween(leftSide.Frame,sideTweenInfo,{Position = leftPos})
						insertTween(rightSide.Frame,sideTweenInfo,{Position = rightPos})
						insertTween(sidesGui.LeftToggle,sideTweenInfo,{Position = UDim2.new(0,#leftSide.Windows == 0 and -16 or 0,0,-36)})
						insertTween(sidesGui.RightToggle,sideTweenInfo,{Position = UDim2.new(1,#rightSide.Windows == 0 and 0 or -16,0,-36)})
					else
						leftSide.Frame.Position = leftPos
						rightSide.Frame.Position = rightPos
						sidesGui.LeftToggle.Position = UDim2.new(0,#leftSide.Windows == 0 and -16 or 0,0,-36)
						sidesGui.RightToggle.Position = UDim2.new(1,#rightSide.Windows == 0 and 0 or -16,0,-36)
					end
				end

				local function getSideFramePos(side)
					local leftHidden = #leftSide.Windows == 0 or leftSide.Hidden
					local rightHidden = #rightSide.Windows == 0 or rightSide.Hidden
					if side == leftSide then
						return (leftHidden and UDim2.new(0,-leftSide.Width-10,0,0) or UDim2.new(0,0,0,0))
					else
						return (rightHidden and UDim2.new(1,10,0,0) or UDim2.new(1,-rightSide.Width,0,0))
					end
				end

				local function sideResized(side)
					local currentPos = 0
					local sideFramePos = getSideFramePos(side)
					for i,v in pairs(side.Windows) do
						v.SizeX = side.Width
						v.GuiElems.Main.Size = UDim2.new(0,side.Width,0,v.SizeY)
						v.GuiElems.Main.Position = UDim2.new(sideFramePos.X.Scale,sideFramePos.X.Offset,0,currentPos)
						currentPos = currentPos + v.SizeY+4
					end
				end

				local function sideResizerHook(resizer,dir,side,pos)
					local mouse = Main.Mouse
					local windows = side.Windows

					resizer.InputBegan:Connect(function(input)
						if not side.Resizing then
							if input.UserInputType == Enum.UserInputType.MouseMovement then
								resizer.BackgroundColor3 = theme.MainColor2
							elseif input.UserInputType == Enum.UserInputType.MouseButton1 then
								local releaseEvent,mouseEvent

								local offX = mouse.X - resizer.AbsolutePosition.X
								local offY = mouse.Y - resizer.AbsolutePosition.Y

								side.Resizing = resizer
								resizer.BackgroundColor3 = theme.MainColor2

								releaseEvent = service.UserInputService.InputEnded:Connect(function(input)
									if input.UserInputType == Enum.UserInputType.MouseButton1 then
										releaseEvent:Disconnect()
										mouseEvent:Disconnect()
										side.Resizing = false
										resizer.BackgroundColor3 = theme.Button
									end
								end)

								mouseEvent = service.UserInputService.InputChanged:Connect(function(input)
									if not resizer.Parent then
										releaseEvent:Disconnect()
										mouseEvent:Disconnect()
										side.Resizing = false
										return
									end
									if input.UserInputType == Enum.UserInputType.MouseMovement then
										if dir == "V" then
											local delta = input.Position.Y - resizer.AbsolutePosition.Y - offY

											if delta > 0 then
												local neededSize = delta
												for i = pos+1,#windows do
													local window = windows[i]
													local newSize = math.max(window.SizeY-neededSize,(window.MinY or 100))
													neededSize = neededSize - (window.SizeY - newSize)
													window.SizeY = newSize
												end
												windows[pos].SizeY = windows[pos].SizeY + math.max(0,delta-neededSize)
											else
												local neededSize = -delta
												for i = pos,1,-1 do
													local window = windows[i]
													local newSize = math.max(window.SizeY-neededSize,(window.MinY or 100))
													neededSize = neededSize - (window.SizeY - newSize)
													window.SizeY = newSize
												end
												windows[pos+1].SizeY = windows[pos+1].SizeY + math.max(0,-delta-neededSize)
											end

											updateSideFrames()
											sideResized(side)
										elseif dir == "H" then
											local maxWidth = math.max(300,sidesGui.AbsoluteSize.X-static.FreeWidth)
											local otherSide = (side == leftSide and rightSide or leftSide)
											local delta = input.Position.X - resizer.AbsolutePosition.X - offX
											delta = (side == leftSide and delta or -delta)

											local proposedSize = math.max(static.MinWidth,side.Width + delta)
											if proposedSize + otherSide.Width <= maxWidth then
												side.Width = proposedSize
											else
												local newOtherSize = maxWidth - proposedSize
												if newOtherSize >= static.MinWidth then
													side.Width = proposedSize
													otherSide.Width = newOtherSize
												else
													side.Width = maxWidth - static.MinWidth
													otherSide.Width = static.MinWidth
												end
											end

											updateSideFrames(true)
											sideResized(side)
											sideResized(otherSide)
										end
									end
								end)
							end
						end
					end)

					resizer.InputEnded:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseMovement and side.Resizing ~= resizer then
							resizer.BackgroundColor3 = theme.Button
						end
					end)
				end

				local function renderSide(side,noTween) -- TODO: Use existing resizers
					local currentPos = 0
					local sideFramePos = getSideFramePos(side)
					local template = side.WindowResizer:Clone()
					for i,v in pairs(side.ResizeCons) do v:Disconnect() end
					for i,v in pairs(side.Frame:GetChildren()) do if v.Name == "WindowResizer" then v:Destroy() end end
					side.ResizeCons = {}
					side.Resizing = nil

					for i,v in pairs(side.Windows) do
						v.SidePos = i
						local isEnd = i == #side.Windows
						local size = UDim2.new(0,side.Width,0,v.SizeY)
						local pos = UDim2.new(sideFramePos.X.Scale,sideFramePos.X.Offset,0,currentPos)
						Lib.ShowGui(v.Gui)
						--v.GuiElems.Main:TweenSizeAndPosition(size,pos,Enum.EasingDirection.Out,Enum.EasingStyle.Quad,0.3,true)
						if noTween then
							v.GuiElems.Main.Size = size
							v.GuiElems.Main.Position = pos
						else
							local tween = service.TweenService:Create(v.GuiElems.Main,sideTweenInfo,{Size = size, Position = pos})
							tweens[#tweens+1] = tween
							tween:Play()
						end
						currentPos = currentPos + v.SizeY+4

						if not isEnd then
							local newTemplate = template:Clone()
							newTemplate.Position = UDim2.new(1,-side.Width,0,currentPos-4)
							side.ResizeCons[#side.ResizeCons+1] = v.Gui.Main:GetPropertyChangedSignal("Size"):Connect(function()
								newTemplate.Position = UDim2.new(1,-side.Width,0, v.GuiElems.Main.Position.Y.Offset + v.GuiElems.Main.Size.Y.Offset)
							end)
							side.ResizeCons[#side.ResizeCons+1] = v.Gui.Main:GetPropertyChangedSignal("Position"):Connect(function()
								newTemplate.Position = UDim2.new(1,-side.Width,0, v.GuiElems.Main.Position.Y.Offset + v.GuiElems.Main.Size.Y.Offset)
							end)
							sideResizerHook(newTemplate,"V",side,i)
							newTemplate.Parent = side.Frame
						end
					end

					--side.Frame.Back.Position = UDim2.new(0,0,0,0)
					--side.Frame.Back.Size = UDim2.new(0,side.Width,1,0)
				end

				local function updateSide(side,noTween)
					local oldHeight = 0
					local currentPos = 0
					local neededSize = 0
					local windows = side.Windows
					local height = sidesGui.AbsoluteSize.Y - (math.max(0,#windows - 1) * 4)

					for i,v in pairs(windows) do oldHeight = oldHeight + v.SizeY end
					for i,v in pairs(windows) do
						if i == #windows then
							v.SizeY = height-currentPos
							neededSize = math.max(0,(v.MinY or 100)-v.SizeY)
						else
							v.SizeY = math.max(math.floor(v.SizeY/oldHeight*height),v.MinY or 100)
						end
						currentPos = currentPos + v.SizeY
					end

					if neededSize > 0 then
						for i = #windows-1,1,-1 do
							local window = windows[i]
							local newSize = math.max(window.SizeY-neededSize,(window.MinY or 100))
							neededSize = neededSize - (window.SizeY - newSize)
							window.SizeY = newSize
						end
						local lastWindow = windows[#windows]
						lastWindow.SizeY = (lastWindow.MinY or 100)-neededSize
					end
					renderSide(side,noTween)
				end

				updateWindows = function(noTween)
					updateSideFrames(noTween)
					updateSide(leftSide,noTween)
					updateSide(rightSide,noTween)
					local count = 0
					for i = #visibleWindows,1,-1 do
						visibleWindows[i].Gui.DisplayOrder = displayOrderStart + count
						Lib.ShowGui(visibleWindows[i].Gui)
						count = count + 1
					end

			--[[local leftTweenPos = (#leftSide.Windows == 0 and UDim2.new(0,-leftSide.Width-5,0,0) or UDim2.new(0,0,0,0))
			leftSide.Frame:TweenPosition(leftTweenPos,Enum.EasingDirection.Out,Enum.EasingStyle.Quad,0.3,true)
			local rightTweenPos = (#rightSide.Windows == 0 and UDim2.new(1,5,0,0) or UDim2.new(1,-rightSide.Width,0,0))
			rightSide.Frame:TweenPosition(rightTweenPos,Enum.EasingDirection.Out,Enum.EasingStyle.Quad,0.3,true)]]
				end

				funcs.SetMinimized = function(self,set,mode)
					local oldVal = self.Minimized
					local newVal
					if set == nil then newVal = not self.Minimized else newVal = set end
					self.Minimized = newVal
					if not mode then mode = 1 end

					local resizeControls = self.GuiElems.ResizeControls
					local minimizeControls = {"North","NorthEast","NorthWest","South","SouthEast","SouthWest"}
					for i = 1,#minimizeControls do
						local control = resizeControls:FindFirstChild(minimizeControls[i])
						if control then control.Visible = not newVal end
					end

					if mode == 1 or mode == 2 then
						self:StopTweens()
						if mode == 1 then
							self.GuiElems.Main:TweenSize(UDim2.new(0,self.SizeX,0,newVal and 20 or self.SizeY),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.25,true)
						else
							local maxY = sidesGui.AbsoluteSize.Y
							local newPos = UDim2.new(0,self.PosX,0,newVal and math.min(maxY-20,self.PosY + self.SizeY - 20) or math.max(0,self.PosY - self.SizeY + 20))

							self.GuiElems.Main:TweenPosition(newPos,Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.25,true)
							self.GuiElems.Main:TweenSize(UDim2.new(0,self.SizeX,0,newVal and 20 or self.SizeY),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.25,true)
						end
						self.GuiElems.Minimize.ImageLabel.Image = newVal and "rbxassetid://5060023708" or "rbxassetid://5034768003"
					end

					if oldVal ~= newVal then
						if newVal then
							self.OnMinimize:Fire()
						else
							self.OnRestore:Fire()
						end
					end
				end

				funcs.Resize = function(self,sizeX,sizeY)
					self.SizeX = sizeX or self.SizeX
					self.SizeY = sizeY or self.SizeY
					self.GuiElems.Main.Size = UDim2.new(0,self.SizeX,0,self.SizeY)
				end

				funcs.SetSize = funcs.Resize

				funcs.SetTitle = function(self,title)
					self.GuiElems.Title.Text = title
				end

				funcs.SetResizable = function(self,val)
					self.Resizable = val
					self.GuiElems.ResizeControls.Visible = self.Resizable and self.ResizableInternal
				end

				funcs.SetResizableInternal = function(self,val)
					self.ResizableInternal = val
					self.GuiElems.ResizeControls.Visible = self.Resizable and self.ResizableInternal
				end

				funcs.SetAligned = function(self,val)
					self.Aligned = val
					self:SetResizableInternal(not val)
					self.GuiElems.Main.Active = not val
					self.GuiElems.Main.Outlines.Visible = not val
					if not val then
						for i,v in pairs(leftSide.Windows) do if v == self then table.remove(leftSide.Windows,i) break end end
						for i,v in pairs(rightSide.Windows) do if v == self then table.remove(rightSide.Windows,i) break end end
						if not table.find(visibleWindows,self) then table.insert(visibleWindows,1,self) end
						self.GuiElems.Minimize.ImageLabel.Image = "rbxassetid://5034768003"
						self.Side = nil
						updateWindows()
					else
						self:SetMinimized(false,3)
						for i,v in pairs(visibleWindows) do if v == self then table.remove(visibleWindows,i) break end end
						self.GuiElems.Minimize.ImageLabel.Image = "rbxassetid://5448127505"
					end
				end

				funcs.Add = function(self,obj,name)
					if type(obj) == "table" and obj.Gui and obj.Gui:IsA("GuiObject") then
						obj.Gui.Parent = self.ContentPane
					else
						obj.Parent = self.ContentPane
					end
					if name then self.Elements[name] = obj end
				end

				funcs.GetElement = function(self,obj,name)
					return self.Elements[name]
				end

				funcs.AlignTo = function(self,side,pos,size,silent)
					if table.find(side.Windows,self) or self.Closed then return end

					size = size or self.SizeY
					if size > 0 and size <= 1 then
						local totalSideHeight = 0
						for i,v in pairs(side.Windows) do totalSideHeight = totalSideHeight + v.SizeY end
						self.SizeY = (totalSideHeight > 0 and totalSideHeight * size * 2) or size
					else
						self.SizeY = (size > 0 and size or 100)
					end

					self:SetAligned(true)
					self.Side = side
					self.SizeX = side.Width
					self.Gui.DisplayOrder = sideDisplayOrder + 1
					for i,v in pairs(side.Windows) do v.Gui.DisplayOrder = sideDisplayOrder end
					pos = math.min(#side.Windows+1, pos or 1)
					self.SidePos = pos
					table.insert(side.Windows, pos, self)

					if not silent then
						side.Hidden = false
					end
					updateWindows(silent)
				end

				funcs.Close = function(self)
					self.Closed = true
					self:SetResizableInternal(false)

					Lib.FindAndRemove(leftSide.Windows,self)
					Lib.FindAndRemove(rightSide.Windows,self)
					Lib.FindAndRemove(visibleWindows,self)

					self.MinimizeAnim.Disable()
					self.CloseAnim.Disable()
					self.ClosedSide = self.Side
					self.Side = nil
					self.OnDeactivate:Fire()

					if not self.Aligned then
						self:StopTweens()
						local ti = TweenInfo.new(0.2,Enum.EasingStyle.Quad,Enum.EasingDirection.Out)

						local closeTime = tick()
						self.LastClose = closeTime

						self:DoTween(self.GuiElems.Main,ti,{Size = UDim2.new(0,self.SizeX,0,20)})
						self:DoTween(self.GuiElems.Title,ti,{TextTransparency = 1})
						self:DoTween(self.GuiElems.Minimize.ImageLabel,ti,{ImageTransparency = 1})
						self:DoTween(self.GuiElems.Close.ImageLabel,ti,{ImageTransparency = 1})
						Lib.FastWait(0.2)
						if closeTime ~= self.LastClose then return end

						self:DoTween(self.GuiElems.TopBar,ti,{BackgroundTransparency = 1})
						self:DoTween(self.GuiElems.Outlines,ti,{ImageTransparency = 1})
						Lib.FastWait(0.2)
						if closeTime ~= self.LastClose then return end
					end

					self.Aligned = false
					self.Gui.Parent = nil
					updateWindows(true)
				end

				funcs.Hide = funcs.Close

				funcs.IsVisible = function(self)
					return not self.Closed and ((self.Side and not self.Side.Hidden) or not self.Side)
				end

				funcs.IsContentVisible = function(self)
					return self:IsVisible() and not self.Minimized
				end

				funcs.Focus = function(self)
					moveToTop(self)
				end

				funcs.MoveInBoundary = function(self)
					local posX,posY = self.PosX,self.PosY
					local maxX,maxY = sidesGui.AbsoluteSize.X,sidesGui.AbsoluteSize.Y
					posX = math.min(posX,maxX-self.SizeX)
					posY = math.min(posY,maxY-20)
					self.GuiElems.Main.Position = UDim2.new(0,posX,0,posY)
				end

				funcs.DoTween = function(self,...)
					local tween = service.TweenService:Create(...)
					self.Tweens[#self.Tweens+1] = tween
					tween:Play()
				end

				funcs.StopTweens = function(self)
					for i,v in pairs(self.Tweens) do
						v:Cancel()
					end
					self.Tweens = {}
				end

				funcs.Show = function(self,data)
					return static.ShowWindow(self,data)
				end

				funcs.ShowAndFocus = function(self,data)
					static.ShowWindow(self,data)
					service.RunService.RenderStepped:wait()
					self:Focus()
				end

				static.ShowWindow = function(window,data)
					data = data or {}
					local align = data.Align
					local pos = data.Pos
					local size = data.Size
					local targetSide = (align == "left" and leftSide) or (align == "right" and rightSide)

					if not window.Closed then
						if not window.Aligned then
							window:SetMinimized(false)
						elseif window.Side and not data.Silent then
							static.SetSideVisible(window.Side,true)
						end
						return
					end

					window.Closed = false
					window.LastClose = tick()
					window.GuiElems.Title.TextTransparency = 0
					window.GuiElems.Minimize.ImageLabel.ImageTransparency = 0
					window.GuiElems.Close.ImageLabel.ImageTransparency = 0
					window.GuiElems.TopBar.BackgroundTransparency = 0
					window.GuiElems.Outlines.ImageTransparency = 0
					window.GuiElems.Minimize.ImageLabel.Image = "rbxassetid://5034768003"
					window.GuiElems.Main.Active = true
					window.GuiElems.Main.Outlines.Visible = true
					window:SetMinimized(false,3)
					window:SetResizableInternal(true)
					window.MinimizeAnim.Enable()
					window.CloseAnim.Enable()

					if align then
						window:AlignTo(targetSide,pos,size,data.Silent)
					else
						if align == nil and window.ClosedSide then -- Regular open
							window:AlignTo(window.ClosedSide,window.SidePos,size,true)
							static.SetSideVisible(window.ClosedSide,true)
						else
							if table.find(visibleWindows,window) then return end

							-- TODO: make better
							window.GuiElems.Main.Size = UDim2.new(0,window.SizeX,0,20)
							local ti = TweenInfo.new(0.2,Enum.EasingStyle.Quad,Enum.EasingDirection.Out)
							window:StopTweens()
							window:DoTween(window.GuiElems.Main,ti,{Size = UDim2.new(0,window.SizeX,0,window.SizeY)})

							window.SizeY = size or window.SizeY
							table.insert(visibleWindows,1,window)
							updateWindows()
						end
					end

					window.ClosedSide = nil
					window.OnActivate:Fire()
				end

				static.ToggleSide = function(name)
					local side = (name == "left" and leftSide or rightSide)
					side.Hidden = not side.Hidden
					for i,v in pairs(side.Windows) do
						if side.Hidden then
							v.OnDeactivate:Fire()
						else
							v.OnActivate:Fire()
						end
					end
					updateWindows()
				end

				static.SetSideVisible = function(s,vis)
					local side = (type(s) == "table" and s) or (s == "left" and leftSide or rightSide)
					side.Hidden = not vis
					for i,v in pairs(side.Windows) do
						if side.Hidden then
							v.OnDeactivate:Fire()
						else
							v.OnActivate:Fire()
						end
					end
					updateWindows()
				end

				static.Init = function()
					displayOrderStart = Main.DisplayOrders.Window
					sideDisplayOrder = Main.DisplayOrders.SideWindow

					sidesGui = Instance.new("ScreenGui")
					local leftFrame = create({
						{1,"Frame",{Active=true,Name="LeftSide",BackgroundColor3=Color3.new(0.17647059261799,0.17647059261799,0.17647059261799),BorderSizePixel=0,}},
						{2,"TextButton",{AutoButtonColor=false,BackgroundColor3=Color3.new(0.2549019753933,0.2549019753933,0.2549019753933),BorderSizePixel=0,Font=3,Name="Resizer",Parent={1},Size=UDim2.new(0,5,1,0),Text="",TextColor3=Color3.new(0,0,0),TextSize=14,}},
						{3,"Frame",{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14117647707462),BorderSizePixel=0,Name="Line",Parent={2},Position=UDim2.new(0,0,0,0),Size=UDim2.new(0,1,1,0),}},
						{4,"TextButton",{AutoButtonColor=false,BackgroundColor3=Color3.new(0.2549019753933,0.2549019753933,0.2549019753933),BorderSizePixel=0,Font=3,Name="WindowResizer",Parent={1},Position=UDim2.new(1,-300,0,0),Size=UDim2.new(1,0,0,4),Text="",TextColor3=Color3.new(0,0,0),TextSize=14,}},
						{5,"Frame",{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14117647707462),BorderSizePixel=0,Name="Line",Parent={4},Size=UDim2.new(1,0,0,1),}},
					})
					leftSide.Frame = leftFrame
					leftFrame.Position = UDim2.new(0,-leftSide.Width-10,0,0)
					leftSide.WindowResizer = leftFrame.WindowResizer
					leftFrame.WindowResizer.Parent = nil
					leftFrame.Parent = sidesGui

					local rightFrame = create({
						{1,"Frame",{Active=true,Name="RightSide",BackgroundColor3=Color3.new(0.17647059261799,0.17647059261799,0.17647059261799),BorderSizePixel=0,}},
						{2,"TextButton",{AutoButtonColor=false,BackgroundColor3=Color3.new(0.2549019753933,0.2549019753933,0.2549019753933),BorderSizePixel=0,Font=3,Name="Resizer",Parent={1},Size=UDim2.new(0,5,1,0),Text="",TextColor3=Color3.new(0,0,0),TextSize=14,}},
						{3,"Frame",{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14117647707462),BorderSizePixel=0,Name="Line",Parent={2},Position=UDim2.new(0,4,0,0),Size=UDim2.new(0,1,1,0),}},
						{4,"TextButton",{AutoButtonColor=false,BackgroundColor3=Color3.new(0.2549019753933,0.2549019753933,0.2549019753933),BorderSizePixel=0,Font=3,Name="WindowResizer",Parent={1},Position=UDim2.new(1,-300,0,0),Size=UDim2.new(1,0,0,4),Text="",TextColor3=Color3.new(0,0,0),TextSize=14,}},
						{5,"Frame",{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14117647707462),BorderSizePixel=0,Name="Line",Parent={4},Size=UDim2.new(1,0,0,1),}},
					})
					rightSide.Frame = rightFrame
					rightFrame.Position = UDim2.new(1,10,0,0)
					rightSide.WindowResizer = rightFrame.WindowResizer
					rightFrame.WindowResizer.Parent = nil
					rightFrame.Parent = sidesGui

					sideResizerHook(leftFrame.Resizer,"H",leftSide)
					sideResizerHook(rightFrame.Resizer,"H",rightSide)

					alignIndicator = Instance.new("ScreenGui")
					alignIndicator.DisplayOrder = Main.DisplayOrders.Core
					local indicator = Instance.new("Frame",alignIndicator)
					indicator.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
					indicator.BorderSizePixel = 0
					indicator.BackgroundTransparency = 0.8
					indicator.Name = "Indicator"
					local corner = Instance.new("UICorner",indicator)
					corner.CornerRadius = UDim.new(0,10)

					local leftToggle = create({{1,"TextButton",{AutoButtonColor=false,BackgroundColor3=Color3.new(0.20392157137394,0.20392157137394,0.20392157137394),BorderColor3=Color3.new(0.14117647707462,0.14117647707462,0.14117647707462),BorderMode=2,Font=10,Name="LeftToggle",Position=UDim2.new(0,0,0,-36),Size=UDim2.new(0,16,0,36),Text="<",TextColor3=Color3.new(1,1,1),TextSize=14,}}})
					local rightToggle = leftToggle:Clone()
					rightToggle.Name = "RightToggle"
					rightToggle.Position = UDim2.new(1,-16,0,-36)
					Lib.ButtonAnim(leftToggle,{Mode = 2,PressColor = Color3.fromRGB(32,32,32)})
					Lib.ButtonAnim(rightToggle,{Mode = 2,PressColor = Color3.fromRGB(32,32,32)})

					leftToggle.MouseButton1Click:Connect(function()
						static.ToggleSide("left")
					end)

					rightToggle.MouseButton1Click:Connect(function()
						static.ToggleSide("right")
					end)

					leftToggle.Parent = sidesGui
					rightToggle.Parent = sidesGui

					sidesGui:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
						local maxWidth = math.max(300,sidesGui.AbsoluteSize.X-static.FreeWidth)
						leftSide.Width = math.max(static.MinWidth,math.min(leftSide.Width,maxWidth-rightSide.Width))
						rightSide.Width = math.max(static.MinWidth,math.min(rightSide.Width,maxWidth-leftSide.Width))
						for i = 1,#visibleWindows do
							visibleWindows[i]:MoveInBoundary()
						end
						updateWindows(true)
					end)

					sidesGui.DisplayOrder = sideDisplayOrder - 1
					Lib.ShowGui(sidesGui)
					updateSideFrames()
				end

				local mt = {__index = funcs}
				static.new = function()
					local obj = setmetatable({
						Minimized = false,
						Dragging = false,
						Resizing = false,
						Aligned = false,
						Draggable = true,
						Resizable = true,
						ResizableInternal = true,
						Alignable = true,
						Closed = true,
						SizeX = 300,
						SizeY = 300,
						MinX = 200,
						MinY = 200,
						PosX = 0,
						PosY = 0,
						GuiElems = {},
						Tweens = {},
						Elements = {},
						OnActivate = Lib.Signal.new(),
						OnDeactivate = Lib.Signal.new(),
						OnMinimize = Lib.Signal.new(),
						OnRestore = Lib.Signal.new()
					},mt)
					obj.Gui = createGui(obj)
					return obj
				end

				return static
			end)()

			Lib.ContextMenu = (function()
				local funcs = {}
				local mouse

				local function createGui(self)
					local contextGui = create({
						{1,"ScreenGui",{DisplayOrder=1000000,Name="Context",ZIndexBehavior=1,}},
						{2,"Frame",{Active=true,BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14117647707462),BorderColor3=Color3.new(0.14117647707462,0.14117647707462,0.14117647707462),Name="Main",Parent={1},Position=UDim2.new(0.5,-100,0.5,-150),Size=UDim2.new(0,200,0,100),}},
						{3,"UICorner",{CornerRadius=UDim.new(0,4),Parent={2},}},
						{4,"Frame",{BackgroundColor3=Color3.new(0.17647059261799,0.17647059261799,0.17647059261799),Name="Container",Parent={2},Position=UDim2.new(0,1,0,1),Size=UDim2.new(1,-2,1,-2),}},
						{5,"UICorner",{CornerRadius=UDim.new(0,4),Parent={4},}},
						{6,"ScrollingFrame",{Active=true,BackgroundColor3=Color3.new(0.20392157137394,0.20392157137394,0.20392157137394),BackgroundTransparency=1,BorderSizePixel=0,CanvasSize=UDim2.new(0,0,0,0),Name="List",Parent={4},Position=UDim2.new(0,2,0,2),ScrollBarImageColor3=Color3.new(0,0,0),ScrollBarThickness=4,Size=UDim2.new(1,-4,1,-4),VerticalScrollBarInset=1,}},
						{7,"UIListLayout",{Parent={6},SortOrder=2,}},
						{8,"Frame",{BackgroundColor3=Color3.new(0.20392157137394,0.20392157137394,0.20392157137394),BorderSizePixel=0,Name="SearchFrame",Parent={4},Size=UDim2.new(1,0,0,24),Visible=false,}},
						{9,"Frame",{BackgroundColor3=Color3.new(0.14901961386204,0.14901961386204,0.14901961386204),BorderColor3=Color3.new(0.1176470592618,0.1176470592618,0.1176470592618),BorderSizePixel=0,Name="SearchContainer",Parent={8},Position=UDim2.new(0,3,0,3),Size=UDim2.new(1,-6,0,18),}},
						{10,"TextBox",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="SearchBox",Parent={9},PlaceholderColor3=Color3.new(0.39215689897537,0.39215689897537,0.39215689897537),PlaceholderText="Search",Position=UDim2.new(0,4,0,0),Size=UDim2.new(1,-8,0,18),Text="",TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,}},
						{11,"UICorner",{CornerRadius=UDim.new(0,2),Parent={9},}},
						{12,"Frame",{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14117647707462),BorderSizePixel=0,Name="Line",Parent={8},Position=UDim2.new(0,0,1,0),Size=UDim2.new(1,0,0,1),}},
						{13,"TextButton",{AutoButtonColor=false,BackgroundColor3=Color3.new(0.20392157137394,0.20392157137394,0.20392157137394),BackgroundTransparency=1,BorderColor3=Color3.new(0.33725491166115,0.49019610881805,0.73725491762161),BorderSizePixel=0,Font=3,Name="Entry",Parent={1},Size=UDim2.new(1,0,0,22),Text="",TextSize=14,Visible=false,}},
						{14,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="EntryName",Parent={13},Position=UDim2.new(0,24,0,0),Size=UDim2.new(1,-24,1,0),Text="Duplicate",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextSize=14,TextXAlignment=0,}},
						{15,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Shortcut",Parent={13},Position=UDim2.new(0,24,0,0),Size=UDim2.new(1,-30,1,0),Text="Ctrl+D",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextSize=14,TextXAlignment=1,}},
						{16,"ImageLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,ImageRectOffset=Vector2.new(304,0),ImageRectSize=Vector2.new(16,16),Name="Icon",Parent={13},Position=UDim2.new(0,2,0,3),ScaleType=4,Size=UDim2.new(0,16,0,16),}},
						{17,"UICorner",{CornerRadius=UDim.new(0,4),Parent={13},}},
						{18,"Frame",{BackgroundColor3=Color3.new(0.21568629145622,0.21568629145622,0.21568629145622),BackgroundTransparency=1,BorderSizePixel=0,Name="Divider",Parent={1},Position=UDim2.new(0,0,0,20),Size=UDim2.new(1,0,0,7),Visible=false,}},
						{19,"Frame",{BackgroundColor3=Color3.new(0.20392157137394,0.20392157137394,0.20392157137394),BorderSizePixel=0,Name="Line",Parent={18},Position=UDim2.new(0,0,0.5,0),Size=UDim2.new(1,0,0,1),}},
						{20,"TextLabel",{AnchorPoint=Vector2.new(0,0.5),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="DividerName",Parent={18},Position=UDim2.new(0,2,0.5,0),Size=UDim2.new(1,-4,1,0),Text="Objects",TextColor3=Color3.new(1,1,1),TextSize=14,TextTransparency=0.60000002384186,TextXAlignment=0,Visible=false,}},
					})
					self.GuiElems.Main = contextGui.Main
					self.GuiElems.List = contextGui.Main.Container.List
					self.GuiElems.Entry = contextGui.Entry
					self.GuiElems.Divider = contextGui.Divider
					self.GuiElems.SearchFrame = contextGui.Main.Container.SearchFrame
					self.GuiElems.SearchBar = self.GuiElems.SearchFrame.SearchContainer.SearchBox
					Lib.ViewportTextBox.convert(self.GuiElems.SearchBar)

					self.GuiElems.SearchBar:GetPropertyChangedSignal("Text"):Connect(function()
						local lower,find = string.lower,string.find
						local searchText = lower(self.GuiElems.SearchBar.Text)
						local items = self.Items
						local map = self.ItemToEntryMap

						if searchText ~= "" then
							local results = {}
							local count = 1
							for i = 1,#items do
								local item = items[i]
								local entry = map[item]
								if entry then
									if not item.Divider and find(lower(item.Name),searchText,1,true) then
										results[count] = item
										count = count + 1
									else
										entry.Visible = false
									end
								end
							end
							table.sort(results,function(a,b) return a.Name < b.Name end)
							for i = 1,#results do
								local entry = map[results[i]]
								entry.LayoutOrder = i
								entry.Visible = true
							end
						else
							for i = 1,#items do
								local entry = map[items[i]]
								if entry then entry.LayoutOrder = i entry.Visible = true end
							end
						end

						local toSize = self.GuiElems.List.UIListLayout.AbsoluteContentSize.Y + 6
						self.GuiElems.List.CanvasSize = UDim2.new(0,0,0,toSize-6)
					end)

					return contextGui
				end

				funcs.Add = function(self,item)
					local newItem = {
						Name = item.Name or "Item",
						Icon = item.Icon or "",
						Shortcut = item.Shortcut or "",
						OnClick = item.OnClick,
						OnHover = item.OnHover,
						Disabled = item.Disabled or false,
						DisabledIcon = item.DisabledIcon or "",
						IconMap = item.IconMap,
						OnRightClick = item.OnRightClick
					}
					if self.QueuedDivider then
						local text = self.QueuedDividerText and #self.QueuedDividerText > 0 and self.QueuedDividerText
						self:AddDivider(text)
					end
					self.Items[#self.Items+1] = newItem
					self.Updated = nil
				end

				funcs.AddRegistered = function(self,name,disabled)
					if not self.Registered[name] then error(name.." is not registered") end

					if self.QueuedDivider then
						local text = self.QueuedDividerText and #self.QueuedDividerText > 0 and self.QueuedDividerText
						self:AddDivider(text)
					end
					self.Registered[name].Disabled = disabled
					self.Items[#self.Items+1] = self.Registered[name]
					self.Updated = nil
				end

				funcs.Register = function(self,name,item)
					self.Registered[name] = {
						Name = item.Name or "Item",
						Icon = item.Icon or "",
						Shortcut = item.Shortcut or "",
						OnClick = item.OnClick,
						OnHover = item.OnHover,
						DisabledIcon = item.DisabledIcon or "",
						IconMap = item.IconMap,
						OnRightClick = item.OnRightClick
					}
				end

				funcs.UnRegister = function(self,name)
					self.Registered[name] = nil
				end

				funcs.AddDivider = function(self,text)
					self.QueuedDivider = false
					local textWidth = text and service.TextService:GetTextSize(text,14,Enum.Font.SourceSans,Vector2.new(999999999,20)).X or nil
					table.insert(self.Items,{Divider = true, Text = text, TextSize = textWidth and textWidth+4})
					self.Updated = nil
				end

				funcs.QueueDivider = function(self,text)
					self.QueuedDivider = true
					self.QueuedDividerText = text or ""
				end

				funcs.Clear = function(self)
					self.Items = {}
					self.Updated = nil
				end

				funcs.Refresh = function(self)
					for i,v in pairs(self.GuiElems.List:GetChildren()) do
						if not v:IsA("UIListLayout") then
							v:Destroy()
						end
					end
					local map = {}
					self.ItemToEntryMap = map

					local dividerFrame = self.GuiElems.Divider
					local contextList = self.GuiElems.List
					local entryFrame = self.GuiElems.Entry
					local items = self.Items

					for i = 1,#items do
						local item = items[i]
						if item.Divider then
							local newDivider = dividerFrame:Clone()
							newDivider.Line.BackgroundColor3 = self.Theme.DividerColor
							if item.Text then
								newDivider.Size = UDim2.new(1,0,0,20)
								newDivider.Line.Position = UDim2.new(0,item.TextSize,0.5,0)
								newDivider.Line.Size = UDim2.new(1,-item.TextSize,0,1)
								newDivider.DividerName.TextColor3 = self.Theme.TextColor
								newDivider.DividerName.Text = item.Text
								newDivider.DividerName.Visible = true
							end
							newDivider.Visible = true
							map[item] = newDivider
							newDivider.Parent = contextList
						else
							local newEntry = entryFrame:Clone()
							newEntry.BackgroundColor3 = self.Theme.HighlightColor
							newEntry.EntryName.TextColor3 = self.Theme.TextColor
							newEntry.EntryName.Text = item.Name
							newEntry.Shortcut.Text = item.Shortcut
							if item.Disabled then
								newEntry.EntryName.TextColor3 = Color3.new(150/255,150/255,150/255)
								newEntry.Shortcut.TextColor3 = Color3.new(150/255,150/255,150/255)
							end

							if self.Iconless then
								newEntry.EntryName.Position = UDim2.new(0,2,0,0)
								newEntry.EntryName.Size = UDim2.new(1,-4,0,20)
								newEntry.Icon.Visible = false
							else
								local iconIndex = item.Disabled and item.DisabledIcon or item.Icon
								if item.IconMap then
									if type(iconIndex) == "number" then
										item.IconMap:Display(newEntry.Icon,iconIndex)
									elseif type(iconIndex) == "string" then
										item.IconMap:DisplayByKey(newEntry.Icon,iconIndex)
									end
								elseif type(iconIndex) == "string" then
									newEntry.Icon.Image = iconIndex
								end
							end

							if not item.Disabled then
								if item.OnClick then
									newEntry.MouseButton1Click:Connect(function()
										item.OnClick(item.Name)
										if not item.NoHide then
											self:Hide()
										end
									end)
								end

								if item.OnRightClick then
									newEntry.MouseButton2Click:Connect(function()
										item.OnRightClick(item.Name)
										if not item.NoHide then
											self:Hide()
										end
									end)
								end
							end

							newEntry.InputBegan:Connect(function(input)
								if input.UserInputType == Enum.UserInputType.MouseMovement then
									newEntry.BackgroundTransparency = 0
								end
							end)

							newEntry.InputEnded:Connect(function(input)
								if input.UserInputType == Enum.UserInputType.MouseMovement then
									newEntry.BackgroundTransparency = 1
								end
							end)

							newEntry.Visible = true
							map[item] = newEntry
							newEntry.Parent = contextList
						end
					end
					self.Updated = true
				end

				funcs.Show = function(self,x,y)
					-- Initialize Gui
					local elems = self.GuiElems
					elems.SearchFrame.Visible = self.SearchEnabled
					elems.List.Position = UDim2.new(0,2,0,2 + (self.SearchEnabled and 24 or 0))
					elems.List.Size = UDim2.new(1,-4,1,-4 - (self.SearchEnabled and 24 or 0))
					if self.SearchEnabled and self.ClearSearchOnShow then elems.SearchBar.Text = "" end
					self.GuiElems.List.CanvasPosition = Vector2.new(0,0)

					if not self.Updated then
						self:Refresh() -- Create entries
					end

					-- Vars
					local reverseY = false
					local x,y = x or mouse.X, y or mouse.Y
					local maxX,maxY = mouse.ViewSizeX,mouse.ViewSizeY

					-- Position and show
					if x + self.Width > maxX then
						x = self.ReverseX and x - self.Width or maxX - self.Width
					end
					elems.Main.Position = UDim2.new(0,x,0,y)
					elems.Main.Size = UDim2.new(0,self.Width,0,0)
					self.Gui.DisplayOrder = Main.DisplayOrders.Menu
					Lib.ShowGui(self.Gui)

					-- Size adjustment
					local toSize = elems.List.UIListLayout.AbsoluteContentSize.Y + 6 -- Padding
					if self.MaxHeight and toSize > self.MaxHeight then
						elems.List.CanvasSize = UDim2.new(0,0,0,toSize-6)
						toSize = self.MaxHeight
					else
						elems.List.CanvasSize = UDim2.new(0,0,0,0)
					end
					if y + toSize > maxY then reverseY = true end

					-- Close event
					local closable
					if self.CloseEvent then self.CloseEvent:Disconnect() end
					self.CloseEvent = service.UserInputService.InputBegan:Connect(function(input)
						if not closable or input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end

						if not Lib.CheckMouseInGui(elems.Main) then
							self.CloseEvent:Disconnect()
							self:Hide()
						end
					end)

					-- Resize
					if reverseY then
						elems.Main.Position = UDim2.new(0,x,0,y-(self.ReverseYOffset or 0))
						local newY = y - toSize - (self.ReverseYOffset or 0)
						y = newY >= 0 and newY or 0
						elems.Main:TweenSizeAndPosition(UDim2.new(0,self.Width,0,toSize),UDim2.new(0,x,0,y),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.2,true)
					else
						elems.Main:TweenSize(UDim2.new(0,self.Width,0,toSize),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.2,true)
					end

					-- Close debounce
					Lib.FastWait()
					if self.SearchEnabled and self.FocusSearchOnShow then elems.SearchBar:CaptureFocus() end
					closable = true
				end

				funcs.Hide = function(self)
					self.Gui.Parent = nil
				end

				funcs.ApplyTheme = function(self,data)
					local theme = self.Theme
					theme.ContentColor = data.ContentColor or Settings.Theme.Menu
					theme.OutlineColor = data.OutlineColor or Settings.Theme.Menu
					theme.DividerColor = data.DividerColor or Settings.Theme.Outline2
					theme.TextColor = data.TextColor or Settings.Theme.Text
					theme.HighlightColor = data.HighlightColor or Settings.Theme.Main1

					self.GuiElems.Main.BackgroundColor3 = theme.OutlineColor
					self.GuiElems.Main.Container.BackgroundColor3 = theme.ContentColor
				end

				local mt = {__index = funcs}
				local function new()
					if not mouse then mouse = Main.Mouse or service.Players.LocalPlayer:GetMouse() end

					local obj = setmetatable({
						Width = 200,
						MaxHeight = nil,
						Iconless = false,
						SearchEnabled = false,
						ClearSearchOnShow = true,
						FocusSearchOnShow = true,
						Updated = false,
						QueuedDivider = false,
						QueuedDividerText = "",
						Items = {},
						Registered = {},
						GuiElems = {},
						Theme = {}
					},mt)
					obj.Gui = createGui(obj)
					obj:ApplyTheme({})
					return obj
				end

				return {new = new}
			end)()

			Lib.CodeFrame = (function()
				local funcs = {}

				local typeMap = {
					[1] = "String",
					[2] = "String",
					[3] = "String",
					[4] = "Comment",
					[5] = "Operator",
					[6] = "Number",
					[7] = "Keyword",
					[8] = "BuiltIn",
					[9] = "LocalMethod",
					[10] = "LocalProperty",
					[11] = "Nil",
					[12] = "Bool",
					[13] = "Function",
					[14] = "Local",
					[15] = "Self",
					[16] = "FunctionName",
					[17] = "Bracket"
				}

				local specialKeywordsTypes = {
					["nil"] = 11,
					["true"] = 12,
					["false"] = 12,
					["function"] = 13,
					["local"] = 14,
					["self"] = 15
				}

				local keywords = {
					["and"] = true,
					["break"] = true, 
					["do"] = true,
					["else"] = true,
					["elseif"] = true,
					["end"] = true,
					["false"] = true,
					["for"] = true,
					["function"] = true,
					["if"] = true,
					["in"] = true,
					["local"] = true,
					["nil"] = true,
					["not"] = true,
					["or"] = true,
					["repeat"] = true,
					["return"] = true,
					["then"] = true,
					["true"] = true,
					["until"] = true,
					["while"] = true,
					["plugin"] = true
				}

				local builtIns = {
					["delay"] = true,
					["elapsedTime"] = true,
					["require"] = true,
					["spawn"] = true,
					["tick"] = true,
					["time"] = true,
					["typeof"] = true,
					["UserSettings"] = true,
					["wait"] = true,
					["warn"] = true,
					["game"] = true,
					["shared"] = true,
					["script"] = true,
					["workspace"] = true,
					["assert"] = true,
					["collectgarbage"] = true,
					["error"] = true,
					["getfenv"] = true,
					["getmetatable"] = true,
					["ipairs"] = true,
					["loadstring"] = true,
					["newproxy"] = true,
					["next"] = true,
					["pairs"] = true,
					["pcall"] = true,
					["print"] = true,
					["rawequal"] = true,
					["rawget"] = true,
					["rawset"] = true,
					["select"] = true,
					["setfenv"] = true,
					["setmetatable"] = true,
					["tonumber"] = true,
					["tostring"] = true,
					["type"] = true,
					["unpack"] = true,
					["xpcall"] = true,
					["_G"] = true,
					["_VERSION"] = true,
					["coroutine"] = true,
					["debug"] = true,
					["math"] = true,
					["os"] = true,
					["string"] = true,
					["table"] = true,
					["bit32"] = true,
					["utf8"] = true,
					["Axes"] = true,
					["BrickColor"] = true,
					["CFrame"] = true,
					["Color3"] = true,
					["ColorSequence"] = true,
					["ColorSequenceKeypoint"] = true,
					["DockWidgetPluginGuiInfo"] = true,
					["Enum"] = true,
					["Faces"] = true,
					["Instance"] = true,
					["NumberRange"] = true,
					["NumberSequence"] = true,
					["NumberSequenceKeypoint"] = true,
					["PathWaypoint"] = true,
					["PhysicalProperties"] = true,
					["Random"] = true,
					["Ray"] = true,
					["Rect"] = true,
					["Region3"] = true,
					["Region3int16"] = true,
					["TweenInfo"] = true,
					["UDim"] = true,
					["UDim2"] = true,
					["Vector2"] = true,
					["Vector2int16"] = true,
					["Vector3"] = true,
					["Vector3int16"] = true
				}

				local builtInInited = false

				local richReplace = {
					["'"] = "&apos;",
					["\""] = "&quot;",
					["<"] = "&lt;",
					[">"] = "&gt;",
					["&"] = "&amp;"
				}

				local tabSub = "\205"
				local tabReplacement = (" %s%s "):format(tabSub,tabSub)

				local tabJumps = {
					[("[^%s] %s"):format(tabSub,tabSub)] = 0,
					[(" %s%s"):format(tabSub,tabSub)] = -1,
					[("%s%s "):format(tabSub,tabSub)] = 2,
					[("%s [^%s]"):format(tabSub,tabSub)] = 1,
				}

				local tweenService = service.TweenService
				local lineTweens = {}

				local function initBuiltIn()
					local env = getfenv()
					local type = type
					local tostring = tostring
					for name,_ in next,builtIns do
						local envVal = env[name]
						if type(envVal) == "table" then
							local items = {}
							for i,v in next,envVal do
								items[i] = true
							end
							builtIns[name] = items
						end
					end

					local enumEntries = {}
					local enums = Enum:GetEnums()
					for i = 1,#enums do
						enumEntries[tostring(enums[i])] = true
					end
					builtIns["Enum"] = enumEntries

					builtInInited = true
				end

				local function setupEditBox(obj)
					local editBox = obj.GuiElems.EditBox

					editBox.Focused:Connect(function()
						obj:ConnectEditBoxEvent()
						obj.Editing = true
					end)

					editBox.FocusLost:Connect(function()
						obj:DisconnectEditBoxEvent()
						obj.Editing = false
					end)

					editBox:GetPropertyChangedSignal("Text"):Connect(function()
						local text = editBox.Text
						if #text == 0 or obj.EditBoxCopying then return end
						editBox.Text = ""
						obj:AppendText(text)
					end)
				end

				local function setupMouseSelection(obj)
					local mouse = plr:GetMouse()
					local codeFrame = obj.GuiElems.LinesFrame
					local lines = obj.Lines

					codeFrame.InputBegan:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseButton1 then
							local fontSizeX,fontSizeY = math.ceil(obj.FontSize/2),obj.FontSize

							local relX = mouse.X - codeFrame.AbsolutePosition.X
							local relY = mouse.Y - codeFrame.AbsolutePosition.Y
							local selX = math.round(relX / fontSizeX) + obj.ViewX
							local selY = math.floor(relY / fontSizeY) + obj.ViewY
							local releaseEvent,mouseEvent,scrollEvent
							local scrollPowerV,scrollPowerH = 0,0
							selY = math.min(#lines-1,selY)
							local relativeLine = lines[selY+1] or ""
							selX = math.min(#relativeLine, selX + obj:TabAdjust(selX,selY))

							obj.SelectionRange = {{-1,-1},{-1,-1}}
							obj:MoveCursor(selX,selY)
							obj.FloatCursorX = selX

							local function updateSelection()
								local relX = mouse.X - codeFrame.AbsolutePosition.X
								local relY = mouse.Y - codeFrame.AbsolutePosition.Y
								local sel2X = math.max(0,math.round(relX / fontSizeX) + obj.ViewX)
								local sel2Y = math.max(0,math.floor(relY / fontSizeY) + obj.ViewY)

								sel2Y = math.min(#lines-1,sel2Y)
								local relativeLine = lines[sel2Y+1] or ""
								sel2X = math.min(#relativeLine, sel2X + obj:TabAdjust(sel2X,sel2Y))

								if sel2Y < selY or (sel2Y == selY and sel2X < selX) then
									obj.SelectionRange = {{sel2X,sel2Y},{selX,selY}}
								else						
									obj.SelectionRange = {{selX,selY},{sel2X,sel2Y}}
								end

								obj:MoveCursor(sel2X,sel2Y)
								obj.FloatCursorX = sel2X
								obj:Refresh()
							end

							releaseEvent = service.UserInputService.InputEnded:Connect(function(input)
								if input.UserInputType == Enum.UserInputType.MouseButton1 then
									releaseEvent:Disconnect()
									mouseEvent:Disconnect()
									scrollEvent:Disconnect()
									obj:SetCopyableSelection()
									--updateSelection()
								end
							end)

							mouseEvent = service.UserInputService.InputChanged:Connect(function(input)
								if input.UserInputType == Enum.UserInputType.MouseMovement then
									local upDelta = mouse.Y - codeFrame.AbsolutePosition.Y
									local downDelta = mouse.Y - codeFrame.AbsolutePosition.Y - codeFrame.AbsoluteSize.Y
									local leftDelta = mouse.X - codeFrame.AbsolutePosition.X
									local rightDelta = mouse.X - codeFrame.AbsolutePosition.X - codeFrame.AbsoluteSize.X
									scrollPowerV = 0
									scrollPowerH = 0
									if downDelta > 0 then
										scrollPowerV = math.floor(downDelta*0.05) + 1
									elseif upDelta < 0 then
										scrollPowerV = math.ceil(upDelta*0.05) - 1
									end
									if rightDelta > 0 then
										scrollPowerH = math.floor(rightDelta*0.05) + 1
									elseif leftDelta < 0 then
										scrollPowerH = math.ceil(leftDelta*0.05) - 1
									end
									updateSelection()
								end
							end)

							scrollEvent = game:GetService("RunService").RenderStepped:Connect(function()
								if scrollPowerV ~= 0 or scrollPowerH ~= 0 then
									obj:ScrollDelta(scrollPowerH,scrollPowerV)
									updateSelection()
								end
							end)

							obj:Refresh()
						end
					end)
				end

				local function makeFrame(obj)
					local frame = create({
						{1,"Frame",{BackgroundColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),BorderSizePixel = 0,Position=UDim2.new(0.5,-300,0.5,-200),Size=UDim2.new(0,600,0,400),}},
					})
					local elems = {}

					local linesFrame = Instance.new("Frame")
					linesFrame.Name = "Lines"
					linesFrame.BackgroundTransparency = 1
					linesFrame.Size = UDim2.new(1,0,1,0)
					linesFrame.ClipsDescendants = true
					linesFrame.Parent = frame

					local lineNumbersLabel = Instance.new("TextLabel")
					lineNumbersLabel.Name = "LineNumbers"
					lineNumbersLabel.BackgroundTransparency = 1
					lineNumbersLabel.Font = Enum.Font.Code
					lineNumbersLabel.TextXAlignment = Enum.TextXAlignment.Right
					lineNumbersLabel.TextYAlignment = Enum.TextYAlignment.Top
					lineNumbersLabel.ClipsDescendants = true
					lineNumbersLabel.RichText = true
					lineNumbersLabel.Parent = frame

					local cursor = Instance.new("Frame")
					cursor.Name = "Cursor"
					cursor.BackgroundColor3 = Color3.fromRGB(220,220,220)
					cursor.BorderSizePixel = 0
					cursor.Parent = frame

					local editBox = Instance.new("TextBox")
					editBox.Name = "EditBox"
					editBox.MultiLine = true
					editBox.Visible = false
					editBox.Parent = frame

					lineTweens.Invis = tweenService:Create(cursor,TweenInfo.new(0.4,Enum.EasingStyle.Quart,Enum.EasingDirection.Out),{BackgroundTransparency = 1})
					lineTweens.Vis = tweenService:Create(cursor,TweenInfo.new(0.2,Enum.EasingStyle.Quart,Enum.EasingDirection.Out),{BackgroundTransparency = 0})

					elems.LinesFrame = linesFrame
					elems.LineNumbersLabel = lineNumbersLabel
					elems.Cursor = cursor
					elems.EditBox = editBox
					elems.ScrollCorner = create({{1,"Frame",{BackgroundColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),BorderSizePixel=0,Name="ScrollCorner",Position=UDim2.new(1,-16,1,-16),Size=UDim2.new(0,16,0,16),Visible=false,}}})

					elems.ScrollCorner.Parent = frame
					linesFrame.InputBegan:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseButton1 then
							obj:SetEditing(true,input)
						end
					end)

					obj.Frame = frame
					obj.Gui = frame
					obj.GuiElems = elems
					setupEditBox(obj)
					setupMouseSelection(obj)

					return frame
				end

				funcs.GetSelectionText = function(self)
					if not self:IsValidRange() then return "" end

					local selectionRange = self.SelectionRange
					local selX,selY = selectionRange[1][1], selectionRange[1][2]
					local sel2X,sel2Y = selectionRange[2][1], selectionRange[2][2]
					local deltaLines = sel2Y-selY
					local lines = self.Lines

					if not lines[selY+1] or not lines[sel2Y+1] then return "" end

					if deltaLines == 0 then
						return self:ConvertText(lines[selY+1]:sub(selX+1,sel2X), false)
					end

					local leftSub = lines[selY+1]:sub(selX+1)
					local rightSub = lines[sel2Y+1]:sub(1,sel2X)

					local result = leftSub.."\n" 
					for i = selY+1,sel2Y-1 do
						result = result..lines[i+1].."\n"
					end
					result = result..rightSub

					return self:ConvertText(result,false)
				end

				funcs.SetCopyableSelection = function(self)
					local text = self:GetSelectionText()
					local editBox = self.GuiElems.EditBox

					self.EditBoxCopying = true
					editBox.Text = text
					editBox.SelectionStart = 1
					editBox.CursorPosition = #editBox.Text + 1
					self.EditBoxCopying = false
				end

				funcs.ConnectEditBoxEvent = function(self)
					if self.EditBoxEvent then
						self.EditBoxEvent:Disconnect()
					end

					self.EditBoxEvent = service.UserInputService.InputBegan:Connect(function(input)
						if input.UserInputType ~= Enum.UserInputType.Keyboard then return end

						local keycodes = Enum.KeyCode
						local keycode = input.KeyCode

						local function setupMove(key,func)
							local endCon,finished
							endCon = service.UserInputService.InputEnded:Connect(function(input)
								if input.KeyCode ~= key then return end
								endCon:Disconnect()
								finished = true
							end)
							func()
							Lib.FastWait(0.5)
							while not finished do func() Lib.FastWait(0.03) end
						end

						if keycode == keycodes.Down then
							setupMove(keycodes.Down,function()
								self.CursorX = self.FloatCursorX
								self.CursorY = self.CursorY + 1
								self:UpdateCursor()
								self:JumpToCursor()
							end)
						elseif keycode == keycodes.Up then
							setupMove(keycodes.Up,function()
								self.CursorX = self.FloatCursorX
								self.CursorY = self.CursorY - 1
								self:UpdateCursor()
								self:JumpToCursor()
							end)
						elseif keycode == keycodes.Left then
							setupMove(keycodes.Left,function()
								local line = self.Lines[self.CursorY+1] or ""
								self.CursorX = self.CursorX - 1 - (line:sub(self.CursorX-3,self.CursorX) == tabReplacement and 3 or 0)
								if self.CursorX < 0 then
									self.CursorY = self.CursorY - 1
									local line2 = self.Lines[self.CursorY+1] or ""
									self.CursorX = #line2
								end
								self.FloatCursorX = self.CursorX
								self:UpdateCursor()
								self:JumpToCursor()
							end)
						elseif keycode == keycodes.Right then
							setupMove(keycodes.Right,function()
								local line = self.Lines[self.CursorY+1] or ""
								self.CursorX = self.CursorX + 1 + (line:sub(self.CursorX+1,self.CursorX+4) == tabReplacement and 3 or 0)
								if self.CursorX > #line then
									self.CursorY = self.CursorY + 1
									self.CursorX = 0
								end
								self.FloatCursorX = self.CursorX
								self:UpdateCursor()
								self:JumpToCursor()
							end)
						elseif keycode == keycodes.Backspace then
							setupMove(keycodes.Backspace,function()
								local startRange,endRange
								if self:IsValidRange() then
									startRange = self.SelectionRange[1]
									endRange = self.SelectionRange[2]
								else
									endRange = {self.CursorX,self.CursorY}
								end

								if not startRange then
									local line = self.Lines[self.CursorY+1] or ""
									self.CursorX = self.CursorX - 1 - (line:sub(self.CursorX-3,self.CursorX) == tabReplacement and 3 or 0)
									if self.CursorX < 0 then
										self.CursorY = self.CursorY - 1
										local line2 = self.Lines[self.CursorY+1] or ""
										self.CursorX = #line2
									end
									self.FloatCursorX = self.CursorX
									self:UpdateCursor()

									startRange = startRange or {self.CursorX,self.CursorY}
								end

								self:DeleteRange({startRange,endRange},false,true)
								self:ResetSelection(true)
								self:JumpToCursor()
							end)
						elseif keycode == keycodes.Delete then
							setupMove(keycodes.Delete,function()
								local startRange,endRange
								if self:IsValidRange() then
									startRange = self.SelectionRange[1]
									endRange = self.SelectionRange[2]
								else
									startRange = {self.CursorX,self.CursorY}
								end

								if not endRange then
									local line = self.Lines[self.CursorY+1] or ""
									local endCursorX = self.CursorX + 1 + (line:sub(self.CursorX+1,self.CursorX+4) == tabReplacement and 3 or 0)
									local endCursorY = self.CursorY
									if endCursorX > #line then
										endCursorY = endCursorY + 1
										endCursorX = 0
									end
									self:UpdateCursor()

									endRange = endRange or {endCursorX,endCursorY}
								end

								self:DeleteRange({startRange,endRange},false,true)
								self:ResetSelection(true)
								self:JumpToCursor()
							end)
						elseif service.UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
							if keycode == keycodes.A then
								self.SelectionRange = {{0,0},{#self.Lines[#self.Lines],#self.Lines-1}}
								self:SetCopyableSelection()
								self:Refresh()
							end
						end
					end)
				end

				funcs.DisconnectEditBoxEvent = function(self)
					if self.EditBoxEvent then
						self.EditBoxEvent:Disconnect()
					end
				end

				funcs.ResetSelection = function(self,norefresh)
					self.SelectionRange = {{-1,-1},{-1,-1}}
					if not norefresh then self:Refresh() end
				end

				funcs.IsValidRange = function(self,range)
					local selectionRange = range or self.SelectionRange
					local selX,selY = selectionRange[1][1], selectionRange[1][2]
					local sel2X,sel2Y = selectionRange[2][1], selectionRange[2][2]

					if selX == -1 or (selX == sel2X and selY == sel2Y) then return false end

					return true
				end

				funcs.DeleteRange = function(self,range,noprocess,updatemouse)
					range = range or self.SelectionRange
					if not self:IsValidRange(range) then return end

					local lines = self.Lines
					local selX,selY = range[1][1], range[1][2]
					local sel2X,sel2Y = range[2][1], range[2][2]
					local deltaLines = sel2Y-selY

					if not lines[selY+1] or not lines[sel2Y+1] then return end

					local leftSub = lines[selY+1]:sub(1,selX)
					local rightSub = lines[sel2Y+1]:sub(sel2X+1)
					lines[selY+1] = leftSub..rightSub

					local remove = table.remove
					for i = 1,deltaLines do
						remove(lines,selY+2)
					end

					if range == self.SelectionRange then self.SelectionRange = {{-1,-1},{-1,-1}} end
					if updatemouse then
						self.CursorX = selX
						self.CursorY = selY
						self:UpdateCursor()
					end

					if not noprocess then
						self:ProcessTextChange()
					end
				end

				funcs.AppendText = function(self,text)
					self:DeleteRange(nil,true,true)
					local lines,cursorX,cursorY = self.Lines,self.CursorX,self.CursorY
					local line = lines[cursorY+1]
					local before = line:sub(1,cursorX)
					local after = line:sub(cursorX+1)

					text = text:gsub("\r\n","\n")
					text = self:ConvertText(text,true) -- Tab Convert

					local textLines = text:split("\n")
					local insert = table.insert

					for i = 1,#textLines do
						local linePos = cursorY+i
						if i > 1 then insert(lines,linePos,"") end

						local textLine = textLines[i]
						local newBefore = (i == 1 and before or "")
						local newAfter = (i == #textLines and after or "")

						lines[linePos] = newBefore..textLine..newAfter
					end

					if #textLines > 1 then cursorX = 0 end

					self:ProcessTextChange()
					self.CursorX = cursorX + #textLines[#textLines]
					self.CursorY = cursorY + #textLines-1
					self:UpdateCursor()
				end

				funcs.ScrollDelta = function(self,x,y)
					self.ScrollV:ScrollTo(self.ScrollV.Index + y)
					self.ScrollH:ScrollTo(self.ScrollH.Index + x)
				end

				-- x and y starts at 0
				funcs.TabAdjust = function(self,x,y)
					local lines = self.Lines
					local line = lines[y+1]
					x=x+1

					if line then
						local left = line:sub(x-1,x-1)
						local middle = line:sub(x,x)
						local right = line:sub(x+1,x+1)
						local selRange = (#left > 0 and left or " ") .. (#middle > 0 and middle or " ") .. (#right > 0 and right or " ")

						for i,v in pairs(tabJumps) do
							if selRange:find(i) then
								return v
							end
						end
					end
					return 0
				end

				funcs.SetEditing = function(self,on,input)			
					self:UpdateCursor(input)

					if on then
						if self.Editable then
							self.GuiElems.EditBox.Text = ""
							self.GuiElems.EditBox:CaptureFocus()
						end
					else
						self.GuiElems.EditBox:ReleaseFocus()
					end
				end

				funcs.CursorAnim = function(self,on)
					local cursor = self.GuiElems.Cursor
					local animTime = tick()
					self.LastAnimTime = animTime

					if not on then return end

					lineTweens.Invis:Cancel()
					lineTweens.Vis:Cancel()
					cursor.BackgroundTransparency = 0

					coroutine.wrap(function()
						while self.Editable do
							Lib.FastWait(0.5)
							if self.LastAnimTime ~= animTime then return end
							lineTweens.Invis:Play()
							Lib.FastWait(0.4)
							if self.LastAnimTime ~= animTime then return end
							lineTweens.Vis:Play()
							Lib.FastWait(0.2)
						end
					end)()
				end

				funcs.MoveCursor = function(self,x,y)
					self.CursorX = x
					self.CursorY = y
					self:UpdateCursor()
					self:JumpToCursor()
				end

				funcs.JumpToCursor = function(self)
					self:Refresh()
				end

				funcs.UpdateCursor = function(self,input)
					local linesFrame = self.GuiElems.LinesFrame
					local cursor = self.GuiElems.Cursor			
					local hSize = math.max(0,linesFrame.AbsoluteSize.X)
					local vSize = math.max(0,linesFrame.AbsoluteSize.Y)
					local maxLines = math.ceil(vSize / self.FontSize)
					local maxCols = math.ceil(hSize / math.ceil(self.FontSize/2))
					local viewX,viewY = self.ViewX,self.ViewY
					local totalLinesStr = tostring(#self.Lines)
					local fontWidth = math.ceil(self.FontSize / 2)
					local linesOffset = #totalLinesStr*fontWidth + 4*fontWidth

					if input then
						local linesFrame = self.GuiElems.LinesFrame
						local frameX,frameY = linesFrame.AbsolutePosition.X,linesFrame.AbsolutePosition.Y
						local mouseX,mouseY = input.Position.X,input.Position.Y
						local fontSizeX,fontSizeY = math.ceil(self.FontSize/2),self.FontSize

						self.CursorX = self.ViewX + math.round((mouseX - frameX) / fontSizeX)
						self.CursorY = self.ViewY + math.floor((mouseY - frameY) / fontSizeY)
					end

					local cursorX,cursorY = self.CursorX,self.CursorY

					local line = self.Lines[cursorY+1] or ""
					if cursorX > #line then cursorX = #line
					elseif cursorX < 0 then cursorX = 0 end

					if cursorY >= #self.Lines then
						cursorY = math.max(0,#self.Lines-1)
					elseif cursorY < 0 then
						cursorY = 0
					end

					cursorX = cursorX + self:TabAdjust(cursorX,cursorY)

					-- Update modified
					self.CursorX = cursorX
					self.CursorY = cursorY

					local cursorVisible = (cursorX >= viewX) and (cursorY >= viewY) and (cursorX <= viewX + maxCols) and (cursorY <= viewY + maxLines)
					if cursorVisible then
						local offX = (cursorX - viewX)
						local offY = (cursorY - viewY)
						cursor.Position = UDim2.new(0,linesOffset + offX*math.ceil(self.FontSize/2) - 1,0,offY*self.FontSize)
						cursor.Size = UDim2.new(0,1,0,self.FontSize+2)
						cursor.Visible = true
						self:CursorAnim(true)
					else
						cursor.Visible = false
					end
				end

				funcs.MapNewLines = function(self)
					local newLines = {}
					local count = 1
					local text = self.Text
					local find = string.find
					local init = 1

					local pos = find(text,"\n",init,true)
					while pos do
						newLines[count] = pos
						count = count + 1
						init = pos + 1
						pos = find(text,"\n",init,true)
					end

					self.NewLines = newLines
				end

				funcs.PreHighlight = function(self)
					local start = tick()
					local text = self.Text:gsub("\\\\","  ")
					--print("BACKSLASH SUB",tick()-start)
					local textLen = #text
					local found = {}
					local foundMap = {}
					local extras = {}
					local find = string.find
					local sub = string.sub
					self.ColoredLines = {}

					local function findAll(str,pattern,typ,raw)
						local count = #found+1
						local init = 1
						local x,y,extra = find(str,pattern,init,raw)
						while x do
							found[count] = x
							foundMap[x] = typ
							if extra then
								extras[x] = extra
							end

							count = count+1
							init = y+1
							x,y,extra = find(str,pattern,init,raw)
						end
					end
					local start = tick()
					findAll(text,'"',1,true)
					findAll(text,"'",2,true)
					findAll(text,"%[(=*)%[",3)
					findAll(text,"--",4,true)
					table.sort(found)

					local newLines = self.NewLines
					local curLine = 0
					local lineTableCount = 1
					local lineStart = 0
					local lineEnd = 0
					local lastEnding = 0
					local foundHighlights = {}

					for i = 1,#found do
						local pos = found[i]
						if pos <= lastEnding then continue end

						local ending = pos
						local typ = foundMap[pos]
						if typ == 1 then
							ending = find(text,'"',pos+1,true)
							while ending and sub(text,ending-1,ending-1) == "\\" do
								ending = find(text,'"',ending+1,true)
							end
							if not ending then ending = textLen end
						elseif typ == 2 then
							ending = find(text,"'",pos+1,true)
							while ending and sub(text,ending-1,ending-1) == "\\" do
								ending = find(text,"'",ending+1,true)
							end
							if not ending then ending = textLen end
						elseif typ == 3 then
							_,ending = find(text,"]"..extras[pos].."]",pos+1,true)
							if not ending then ending = textLen end
						elseif typ == 4 then
							local ahead = foundMap[pos+2]

							if ahead == 3 then
								_,ending = find(text,"]"..extras[pos+2].."]",pos+1,true)
								if not ending then ending = textLen end
							else
								ending = find(text,"\n",pos+1,true) or textLen
							end
						end

						while pos > lineEnd do
							curLine = curLine + 1
							--lineTableCount = 1
							lineEnd = newLines[curLine] or textLen+1
						end
						while true do
							local lineTable = foundHighlights[curLine]
							if not lineTable then lineTable = {} foundHighlights[curLine] = lineTable end
							lineTable[pos] = {typ,ending}
							--lineTableCount = lineTableCount + 1

							if ending > lineEnd then
								curLine = curLine + 1
								lineEnd = newLines[curLine] or textLen+1
							else
								break
							end
						end

						lastEnding = ending
						--if i < 200 then print(curLine) end
					end
					self.PreHighlights = foundHighlights
					--print(tick()-start)
					--print(#found,curLine)
				end

				funcs.HighlightLine = function(self,line)
					local cached = self.ColoredLines[line]
					if cached then return cached end

					local sub = string.sub
					local find = string.find
					local match = string.match
					local highlights = {}
					local preHighlights = self.PreHighlights[line] or {}
					local lineText = self.Lines[line] or ""
					local lineLen = #lineText
					local lastEnding = 0
					local currentType = 0
					local lastWord = nil
					local wordBeginsDotted = false
					local funcStatus = 0
					local lineStart = self.NewLines[line-1] or 0

					local preHighlightMap = {}
					for pos,data in next,preHighlights do
						local relativePos = pos-lineStart
						if relativePos < 1 then
							currentType = data[1]
							lastEnding = data[2] - lineStart
							--warn(pos,data[2])
						else
							preHighlightMap[relativePos] = {data[1],data[2]-lineStart}
						end
					end

					for col = 1,#lineText do
						if col <= lastEnding then highlights[col] = currentType continue end

						local pre = preHighlightMap[col]
						if pre then
							currentType = pre[1]
							lastEnding = pre[2]
							highlights[col] = currentType
							wordBeginsDotted = false
							lastWord = nil
							funcStatus = 0
						else
							local char = sub(lineText,col,col)
							if find(char,"[%a_]") then
								local word = match(lineText,"[%a%d_]+",col)
								local wordType = (keywords[word] and 7) or (builtIns[word] and 8)

								lastEnding = col+#word-1

								if wordType ~= 7 then
									if wordBeginsDotted then
										local prevBuiltIn = lastWord and builtIns[lastWord]
										wordType = (prevBuiltIn and type(prevBuiltIn) == "table" and prevBuiltIn[word] and 8) or 10
									end

									if wordType ~= 8 then
										local x,y,br = find(lineText,"^%s*([%({\"'])",lastEnding+1)
										if x then
											wordType = (funcStatus > 0 and br == "(" and 16) or 9
											funcStatus = 0
										end
									end
								else
									wordType = specialKeywordsTypes[word] or wordType
									funcStatus = (word == "function" and 1 or 0)
								end

								lastWord = word
								wordBeginsDotted = false
								if funcStatus > 0 then funcStatus = 1 end

								if wordType then
									currentType = wordType
									highlights[col] = currentType
								else
									currentType = nil
								end
							elseif find(char,"%p") then
								local isDot = (char == ".")
								local isNum = isDot and find(sub(lineText,col+1,col+1),"%d")
								highlights[col] = (isNum and 6 or 5)

								if not isNum then
									local dotStr = isDot and match(lineText,"%.%.?%.?",col)
									if dotStr and #dotStr > 1 then
										currentType = 5
										lastEnding = col+#dotStr-1
										wordBeginsDotted = false
										lastWord = nil
										funcStatus = 0
									else
										if isDot then
											if wordBeginsDotted then
												lastWord = nil
											else
												wordBeginsDotted = true
											end
										else
											wordBeginsDotted = false
											lastWord = nil
										end

										funcStatus = ((isDot or char == ":") and funcStatus == 1 and 2) or 0
									end
								end
							elseif find(char,"%d") then
								local _,endPos = find(lineText,"%x+",col)
								local endPart = sub(lineText,endPos,endPos+1)
								if (endPart == "e+" or endPart == "e-") and find(sub(lineText,endPos+2,endPos+2),"%d") then
									endPos = endPos + 1
								end
								currentType = 6
								lastEnding = endPos
								highlights[col] = 6
								wordBeginsDotted = false
								lastWord = nil
								funcStatus = 0
							else
								highlights[col] = currentType
								local _,endPos = find(lineText,"%s+",col)
								if endPos then
									lastEnding = endPos
								end
							end
						end
					end

					self.ColoredLines[line] = highlights
					return highlights
				end

				funcs.Refresh = function(self)
					local start = tick()

					local linesFrame = self.Frame.Lines
					local hSize = math.max(0,linesFrame.AbsoluteSize.X)
					local vSize = math.max(0,linesFrame.AbsoluteSize.Y)
					local maxLines = math.ceil(vSize / self.FontSize)
					local maxCols = math.ceil(hSize / math.ceil(self.FontSize/2))
					local gsub = string.gsub
					local sub = string.sub

					local viewX,viewY = self.ViewX,self.ViewY

					local lineNumberStr = ""

					for row = 1,maxLines do
						local lineFrame = self.LineFrames[row]
						if not lineFrame then
							lineFrame = Instance.new("Frame")
							lineFrame.Name = "Line"
							lineFrame.Position = UDim2.new(0,0,0,(row-1)*self.FontSize)
							lineFrame.Size = UDim2.new(1,0,0,self.FontSize)
							lineFrame.BorderSizePixel = 0
							lineFrame.BackgroundTransparency = 1

							local selectionHighlight = Instance.new("Frame")
							selectionHighlight.Name = "SelectionHighlight"
							selectionHighlight.BorderSizePixel = 0
							selectionHighlight.BackgroundColor3 = Settings.Theme.Syntax.SelectionBack
							selectionHighlight.Parent = lineFrame

							local label = Instance.new("TextLabel")
							label.Name = "Label"
							label.BackgroundTransparency = 1
							label.Font = Enum.Font.Code
							label.TextSize = self.FontSize
							label.Size = UDim2.new(1,0,0,self.FontSize)
							label.RichText = true
							label.TextXAlignment = Enum.TextXAlignment.Left
							label.TextColor3 = self.Colors.Text
							label.ZIndex = 2
							label.Parent = lineFrame

							lineFrame.Parent = linesFrame
							self.LineFrames[row] = lineFrame
						end

						local relaY = viewY + row
						local lineText = self.Lines[relaY] or ""
						local resText = ""
						local highlights = self:HighlightLine(relaY)
						local colStart = viewX + 1

						local richTemplates = self.RichTemplates
						local textTemplate = richTemplates.Text
						local selectionTemplate = richTemplates.Selection
						local curType = highlights[colStart]
						local curTemplate = richTemplates[typeMap[curType]] or textTemplate

						-- Selection Highlight
						local selectionRange = self.SelectionRange
						local selPos1 = selectionRange[1]
						local selPos2 = selectionRange[2]
						local selRow,selColumn = selPos1[2],selPos1[1]
						local sel2Row,sel2Column = selPos2[2],selPos2[1]
						local selRelaX,selRelaY = viewX,relaY-1

						if selRelaY >= selPos1[2] and selRelaY <= selPos2[2] then
							local fontSizeX = math.ceil(self.FontSize/2)
							local posX = (selRelaY == selPos1[2] and selPos1[1] or 0) - viewX
							local sizeX = (selRelaY == selPos2[2] and selPos2[1]-posX-viewX or maxCols+viewX)

							lineFrame.SelectionHighlight.Position = UDim2.new(0,posX*fontSizeX,0,0)
							lineFrame.SelectionHighlight.Size = UDim2.new(0,sizeX*fontSizeX,1,0)
							lineFrame.SelectionHighlight.Visible = true
						else
							lineFrame.SelectionHighlight.Visible = false
						end

						-- Selection Text Color for first char
						local inSelection = selRelaY >= selRow and selRelaY <= sel2Row and (selRelaY == selRow and viewX >= selColumn or selRelaY ~= selRow) and (selRelaY == sel2Row and viewX < sel2Column or selRelaY ~= sel2Row)
						if inSelection then
							curType = -999
							curTemplate = selectionTemplate
						end

						for col = 2,maxCols do
							local relaX = viewX + col
							local selRelaX = relaX-1
							local posType = highlights[relaX]

							-- Selection Text Color
							local inSelection = selRelaY >= selRow and selRelaY <= sel2Row and (selRelaY == selRow and selRelaX >= selColumn or selRelaY ~= selRow) and (selRelaY == sel2Row and selRelaX < sel2Column or selRelaY ~= sel2Row)
							if inSelection then
								posType = -999
							end

							if posType ~= curType then
								local template = (inSelection and selectionTemplate) or richTemplates[typeMap[posType]] or textTemplate

								if template ~= curTemplate then
									local nextText = gsub(sub(lineText,colStart,relaX-1),"['\"<>&]",richReplace)
									resText = resText .. (curTemplate ~= textTemplate and (curTemplate .. nextText .. "</font>") or nextText)
									colStart = relaX
									curTemplate = template
								end
								curType = posType
							end
						end

						local lastText = gsub(sub(lineText,colStart,viewX+maxCols),"['\"<>&]",richReplace)
						--warn("SUB",colStart,viewX+maxCols-1)
						if #lastText > 0 then
							resText = resText .. (curTemplate ~= textTemplate and (curTemplate .. lastText .. "</font>") or lastText)
						end

						if self.Lines[relaY] then
							lineNumberStr = lineNumberStr .. (relaY == self.CursorY and ("<b>"..relaY.."</b>\n") or relaY .. "\n")
						end

						lineFrame.Label.Text = resText
					end

					for i = maxLines+1,#self.LineFrames do
						self.LineFrames[i]:Destroy()
						self.LineFrames[i] = nil
					end

					self.Frame.LineNumbers.Text = lineNumberStr
					self:UpdateCursor()

					--print("REFRESH TIME",tick()-start)
				end

				funcs.UpdateView = function(self)
					local totalLinesStr = tostring(#self.Lines)
					local fontWidth = math.ceil(self.FontSize / 2)
					local linesOffset = #totalLinesStr*fontWidth + 4*fontWidth

					local linesFrame = self.Frame.Lines
					local hSize = linesFrame.AbsoluteSize.X
					local vSize = linesFrame.AbsoluteSize.Y
					local maxLines = math.ceil(vSize / self.FontSize)
					local totalWidth = self.MaxTextCols*fontWidth
					local scrollV = self.ScrollV
					local scrollH = self.ScrollH

					scrollV.VisibleSpace = maxLines
					scrollV.TotalSpace = #self.Lines + 1
					scrollH.VisibleSpace = math.ceil(hSize/fontWidth)
					scrollH.TotalSpace = self.MaxTextCols + 1

					scrollV.Gui.Visible = #self.Lines + 1 > maxLines
					scrollH.Gui.Visible = totalWidth > hSize

					local oldOffsets = self.FrameOffsets
					self.FrameOffsets = Vector2.new(scrollV.Gui.Visible and -16 or 0, scrollH.Gui.Visible and -16 or 0)
					if oldOffsets ~= self.FrameOffsets then
						self:UpdateView()
					else
						scrollV:ScrollTo(self.ViewY,true)
						scrollH:ScrollTo(self.ViewX,true)

						if scrollV.Gui.Visible and scrollH.Gui.Visible then
							scrollV.Gui.Size = UDim2.new(0,16,1,-16)
							scrollH.Gui.Size = UDim2.new(1,-16,0,16)
							self.GuiElems.ScrollCorner.Visible = true
						else
							scrollV.Gui.Size = UDim2.new(0,16,1,0)
							scrollH.Gui.Size = UDim2.new(1,0,0,16)
							self.GuiElems.ScrollCorner.Visible = false
						end

						self.ViewY = scrollV.Index
						self.ViewX = scrollH.Index
						self.Frame.Lines.Position = UDim2.new(0,linesOffset,0,0)
						self.Frame.Lines.Size = UDim2.new(1,-linesOffset+oldOffsets.X,1,oldOffsets.Y)
						self.Frame.LineNumbers.Position = UDim2.new(0,fontWidth,0,0)
						self.Frame.LineNumbers.Size = UDim2.new(0,#totalLinesStr*fontWidth,1,oldOffsets.Y)
						self.Frame.LineNumbers.TextSize = self.FontSize
					end
				end

				funcs.ProcessTextChange = function(self)
					local maxCols = 0
					local lines = self.Lines

					for i = 1,#lines do
						local lineLen = #lines[i]
						if lineLen > maxCols then
							maxCols = lineLen
						end
					end

					self.MaxTextCols = maxCols
					self:UpdateView()	
					self.Text = table.concat(self.Lines,"\n")
					self:MapNewLines()
					self:PreHighlight()
					self:Refresh()
					--self.TextChanged:Fire()
				end

				funcs.ConvertText = function(self,text,toEditor)
					if toEditor then
						return text:gsub("\t",(" %s%s "):format(tabSub,tabSub))
					else
						return text:gsub((" %s%s "):format(tabSub,tabSub),"\t")
					end
				end

				funcs.GetText = function(self) -- TODO: better (use new tab format)
					local source = table.concat(self.Lines,"\n")
					return self:ConvertText(source,false) -- Tab Convert
				end

				funcs.SetText = function(self,txt)
					txt = self:ConvertText(txt,true) -- Tab Convert
					local lines = self.Lines
					table.clear(lines)
					local count = 1

					for line in txt:gmatch("([^\n\r]*)[\n\r]?") do
						local len = #line
						lines[count] = line
						count = count + 1
					end

					self:ProcessTextChange()
				end

				funcs.MakeRichTemplates = function(self)
					local floor = math.floor
					local templates = {}

					for name,color in pairs(self.Colors) do
						templates[name] = ('<font color="rgb(%s,%s,%s)">'):format(floor(color.r*255),floor(color.g*255),floor(color.b*255))
					end

					self.RichTemplates = templates
				end

				funcs.ApplyTheme = function(self)
					local colors = Settings.Theme.Syntax
					self.Colors = colors
					self.Frame.LineNumbers.TextColor3 = colors.Text
					self.Frame.BackgroundColor3 = colors.Background
				end

				local mt = {__index = funcs}

				local function new()
					if not builtInInited then initBuiltIn() end

					local scrollV = Lib.ScrollBar.new()
					local scrollH = Lib.ScrollBar.new(true)
					scrollH.Gui.Position = UDim2.new(0,0,1,-16)
					local obj = setmetatable({
						FontSize = 15,
						ViewX = 0,
						ViewY = 0,
						Colors = Settings.Theme.Syntax,
						ColoredLines = {},
						Lines = {""},
						LineFrames = {},
						Editable = true,
						Editing = false,
						CursorX = 0,
						CursorY = 0,
						FloatCursorX = 0,
						Text = "",
						PreHighlights = {},
						SelectionRange = {{-1,-1},{-1,-1}},
						NewLines = {},
						FrameOffsets = Vector2.new(0,0),
						MaxTextCols = 0,
						ScrollV = scrollV,
						ScrollH = scrollH
					},mt)

					scrollV.WheelIncrement = 3
					scrollH.Increment = 2
					scrollH.WheelIncrement = 7

					scrollV.Scrolled:Connect(function()
						obj.ViewY = scrollV.Index
						obj:Refresh()
					end)

					scrollH.Scrolled:Connect(function()
						obj.ViewX = scrollH.Index
						obj:Refresh()
					end)

					makeFrame(obj)
					obj:MakeRichTemplates()
					obj:ApplyTheme()
					scrollV:SetScrollFrame(obj.Frame.Lines)
					scrollV.Gui.Parent = obj.Frame
					scrollH.Gui.Parent = obj.Frame

					obj:UpdateView()
					obj.Frame:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
						obj:UpdateView()
						obj:Refresh()
					end)

					return obj
				end

				return {new = new}
			end)()

			Lib.Checkbox = (function()
				local funcs = {}
				local c3 = Color3.fromRGB
				local v2 = Vector2.new
				local ud2s = UDim2.fromScale
				local ud2o = UDim2.fromOffset
				local ud = UDim.new
				local max = math.max
				local new = Instance.new
				local TweenSize = new("Frame").TweenSize
				local ti = TweenInfo.new
				local delay = delay

				local function ripple(object, color)
					local circle = new('Frame')
					circle.BackgroundColor3 = color
					circle.BackgroundTransparency = 0.75
					circle.BorderSizePixel = 0
					circle.AnchorPoint = v2(0.5, 0.5)
					circle.Size = ud2o()
					circle.Position = ud2s(0.5, 0.5)
					circle.Parent = object
					local rounding = new('UICorner')
					rounding.CornerRadius = ud(1)
					rounding.Parent = circle

					local abssz = object.AbsoluteSize
					local size = max(abssz.X, abssz.Y) * 5/3

					TweenSize(circle, ud2o(size, size), "Out", "Quart", 0.4)
					service.TweenService:Create(circle, ti(0.4, Enum.EasingStyle.Quart, Enum.EasingDirection.In), {BackgroundTransparency = 1}):Play()

					service.Debris:AddItem(circle, 0.4)
				end

				local function initGui(self,frame)
					local checkbox = frame or create({
						{1,"Frame",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderSizePixel=0,Name="Checkbox",Position=UDim2.new(0,3,0,3),Size=UDim2.new(0,16,0,16),}},
						{2,"Frame",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderSizePixel=0,Name="ripples",Parent={1},Size=UDim2.new(1,0,1,0),}},
						{3,"Frame",{BackgroundColor3=Color3.new(0.10196078568697,0.10196078568697,0.10196078568697),BorderSizePixel=0,Name="outline",Parent={1},Size=UDim2.new(0,16,0,16),}},
						{4,"Frame",{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14117647707462),BorderSizePixel=0,Name="filler",Parent={3},Position=UDim2.new(0,1,0,1),Size=UDim2.new(0,14,0,14),}},
						{5,"Frame",{BackgroundColor3=Color3.new(0.90196084976196,0.90196084976196,0.90196084976196),BorderSizePixel=0,Name="top",Parent={4},Size=UDim2.new(0,16,0,0),}},
						{6,"Frame",{AnchorPoint=Vector2.new(0,1),BackgroundColor3=Color3.new(0.90196084976196,0.90196084976196,0.90196084976196),BorderSizePixel=0,Name="bottom",Parent={4},Position=UDim2.new(0,0,0,14),Size=UDim2.new(0,16,0,0),}},
						{7,"Frame",{BackgroundColor3=Color3.new(0.90196084976196,0.90196084976196,0.90196084976196),BorderSizePixel=0,Name="left",Parent={4},Size=UDim2.new(0,0,0,16),}},
						{8,"Frame",{AnchorPoint=Vector2.new(1,0),BackgroundColor3=Color3.new(0.90196084976196,0.90196084976196,0.90196084976196),BorderSizePixel=0,Name="right",Parent={4},Position=UDim2.new(0,14,0,0),Size=UDim2.new(0,0,0,16),}},
						{9,"Frame",{AnchorPoint=Vector2.new(0.5,0.5),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderSizePixel=0,ClipsDescendants=true,Name="checkmark",Parent={4},Position=UDim2.new(0.5,0,0.5,0),Size=UDim2.new(0,0,0,20),}},
						{10,"ImageLabel",{AnchorPoint=Vector2.new(0.5,0.5),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderSizePixel=0,Image="rbxassetid://6234266378",Parent={9},Position=UDim2.new(0.5,0,0.5,0),ScaleType=3,Size=UDim2.new(0,15,0,11),}},
						{11,"ImageLabel",{AnchorPoint=Vector2.new(0.5,0.5),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Image="rbxassetid://6401617475",ImageColor3=Color3.new(0.20784313976765,0.69803923368454,0.98431372642517),Name="checkmark2",Parent={4},Position=UDim2.new(0.5,0,0.5,0),Size=UDim2.new(0,12,0,12),Visible=false,}},
						{12,"ImageLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Image="rbxassetid://6425281788",ImageTransparency=0.20000000298023,Name="middle",Parent={4},ScaleType=2,Size=UDim2.new(1,0,1,0),TileSize=UDim2.new(0,2,0,2),Visible=false,}},
						{13,"UICorner",{CornerRadius=UDim.new(0,2),Parent={3},}},
					})
					local outline = checkbox.outline
					local filler = outline.filler
					local checkmark = filler.checkmark
					local ripples_container = checkbox.ripples

					-- walls
					local top, bottom, left, right = filler.top, filler.bottom, filler.left, filler.right

					self.Gui = checkbox
					self.GuiElems = {
						Top = top,
						Bottom = bottom,
						Left = left,
						Right = right,
						Outline = outline,
						Filler = filler,
						Checkmark = checkmark,
						Checkmark2 = filler.checkmark2,
						Middle = filler.middle
					}

					checkbox.InputBegan:Connect(function(i)
						if i.UserInputType == Enum.UserInputType.MouseButton1 then
							local release
							release = service.UserInputService.InputEnded:Connect(function(input)
								if input.UserInputType == Enum.UserInputType.MouseButton1 then
									release:Disconnect()

									if Lib.CheckMouseInGui(checkbox) then
										if self.Style == 0 then
											ripple(ripples_container, self.Disabled and self.Colors.Disabled or self.Colors.Primary)
										end

										if not self.Disabled then
											self:SetState(not self.Toggled,true)
										else
											self:Paint()
										end

										self.OnInput:Fire()
									end
								end
							end)
						end
					end)

					self:Paint()
				end

				funcs.Collapse = function(self,anim)
					local guiElems = self.GuiElems
					if anim then
						TweenSize(guiElems.Top, ud2o(14, 14), "In", "Quart", 4/15, true)
						TweenSize(guiElems.Bottom, ud2o(14, 14), "In", "Quart", 4/15, true)
						TweenSize(guiElems.Left, ud2o(14, 14), "In", "Quart", 4/15, true)
						TweenSize(guiElems.Right, ud2o(14, 14), "In", "Quart", 4/15, true)
					else
						guiElems.Top.Size = ud2o(14, 14)
						guiElems.Bottom.Size = ud2o(14, 14)
						guiElems.Left.Size = ud2o(14, 14)
						guiElems.Right.Size = ud2o(14, 14)
					end
				end

				funcs.Expand = function(self,anim)
					local guiElems = self.GuiElems
					if anim then
						TweenSize(guiElems.Top, ud2o(14, 0), "InOut", "Quart", 4/15, true)
						TweenSize(guiElems.Bottom, ud2o(14, 0), "InOut", "Quart", 4/15, true)
						TweenSize(guiElems.Left, ud2o(0, 14), "InOut", "Quart", 4/15, true)
						TweenSize(guiElems.Right, ud2o(0, 14), "InOut", "Quart", 4/15, true)
					else
						guiElems.Top.Size = ud2o(14, 0)
						guiElems.Bottom.Size = ud2o(14, 0)
						guiElems.Left.Size = ud2o(0, 14)
						guiElems.Right.Size = ud2o(0, 14)
					end
				end

				funcs.Paint = function(self)
					local guiElems = self.GuiElems

					if self.Style == 0 then
						local color_base = self.Disabled and self.Colors.Disabled
						guiElems.Outline.BackgroundColor3 = color_base or (self.Toggled and self.Colors.Primary) or self.Colors.Secondary
						local walls_color = color_base or self.Colors.Primary
						guiElems.Top.BackgroundColor3 = walls_color
						guiElems.Bottom.BackgroundColor3 = walls_color
						guiElems.Left.BackgroundColor3 = walls_color
						guiElems.Right.BackgroundColor3 = walls_color
					else
						guiElems.Outline.BackgroundColor3 = self.Disabled and self.Colors.Disabled or self.Colors.Secondary
						guiElems.Filler.BackgroundColor3 = self.Disabled and self.Colors.DisabledBackground or self.Colors.Background
						guiElems.Checkmark2.ImageColor3 = self.Disabled and self.Colors.DisabledCheck or self.Colors.Primary
					end
				end

				funcs.SetState = function(self,val,anim)
					self.Toggled = val

					if self.OutlineColorTween then self.OutlineColorTween:Cancel() end
					local setStateTime = tick()
					self.LastSetStateTime = setStateTime

					if self.Toggled then
						if self.Style == 0 then
							if anim then
								self.OutlineColorTween = service.TweenService:Create(self.GuiElems.Outline, ti(4/15, Enum.EasingStyle.Circular, Enum.EasingDirection.Out), {BackgroundColor3 = self.Colors.Primary})
								self.OutlineColorTween:Play()
								delay(0.15, function()
									if setStateTime ~= self.LastSetStateTime then return end
									self:Paint()
									TweenSize(self.GuiElems.Checkmark, ud2o(14, 20), "Out", "Bounce", 2/15, true)
								end)
							else
								self.GuiElems.Outline.BackgroundColor3 = self.Colors.Primary
								self:Paint()
								self.GuiElems.Checkmark.Size = ud2o(14, 20)
							end
							self:Collapse(anim)
						else
							self:Paint()
							self.GuiElems.Checkmark2.Visible = true
							self.GuiElems.Middle.Visible = false
						end
					else
						if self.Style == 0 then
							if anim then
								self.OutlineColorTween = service.TweenService:Create(self.GuiElems.Outline, ti(4/15, Enum.EasingStyle.Circular, Enum.EasingDirection.In), {BackgroundColor3 = self.Colors.Secondary})
								self.OutlineColorTween:Play()
								delay(0.15, function()
									if setStateTime ~= self.LastSetStateTime then return end
									self:Paint()
									TweenSize(self.GuiElems.Checkmark, ud2o(0, 20), "Out", "Quad", 1/15, true)
								end)
							else
								self.GuiElems.Outline.BackgroundColor3 = self.Colors.Secondary
								self:Paint()
								self.GuiElems.Checkmark.Size = ud2o(0, 20)
							end
							self:Expand(anim)
						else
							self:Paint()
							self.GuiElems.Checkmark2.Visible = false
							self.GuiElems.Middle.Visible = self.Toggled == nil
						end
					end
				end

				local mt = {__index = funcs}

				local function new(style)
					local obj = setmetatable({
						Toggled = false,
						Disabled = false,
						OnInput = Lib.Signal.new(),
						Style = style or 0,
						Colors = {
							Background = c3(36,36,36),
							Primary = c3(49,176,230),
							Secondary = c3(25,25,25),
							Disabled = c3(64,64,64),
							DisabledBackground = c3(52,52,52),
							DisabledCheck = c3(80,80,80)
						}
					},mt)
					initGui(obj)
					return obj
				end

				local function fromFrame(frame)
					local obj = setmetatable({
						Toggled = false,
						Disabled = false,
						Colors = {
							Background = c3(36,36,36),
							Primary = c3(49,176,230),
							Secondary = c3(25,25,25),
							Disabled = c3(64,64,64),
							DisabledBackground = c3(52,52,52)
						}
					},mt)
					initGui(obj,frame)
					return obj
				end

				return {new = new, fromFrame}
			end)()

			Lib.BrickColorPicker = (function()
				local funcs = {}
				local paletteCount = 0
				local mouse = service.Players.LocalPlayer:GetMouse()
				local hexStartX = 4
				local hexSizeX = 27
				local hexTriangleStart = 1
				local hexTriangleSize = 8

				local bottomColors = {
					Color3.fromRGB(17,17,17),
					Color3.fromRGB(99,95,98),
					Color3.fromRGB(163,162,165),
					Color3.fromRGB(205,205,205),
					Color3.fromRGB(223,223,222),
					Color3.fromRGB(237,234,234),
					Color3.fromRGB(27,42,53),
					Color3.fromRGB(91,93,105),
					Color3.fromRGB(159,161,172),
					Color3.fromRGB(202,203,209),
					Color3.fromRGB(231,231,236),
					Color3.fromRGB(248,248,248)
				}

				local function isMouseInHexagon(hex)
					local relativeX = mouse.X - hex.AbsolutePosition.X
					local relativeY = mouse.Y - hex.AbsolutePosition.Y
					if relativeX >= hexStartX and relativeX < hexStartX + hexSizeX then
						relativeX = relativeX - 4
						local relativeWidth = (13-math.min(relativeX,26 - relativeX))/13
						if relativeY >= hexTriangleStart + hexTriangleSize*relativeWidth and relativeY < hex.AbsoluteSize.Y - hexTriangleStart - hexTriangleSize*relativeWidth then
							return true
						end
					end

					return false
				end

				local function hexInput(self,hex,color)
					hex.InputBegan:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseButton1 and isMouseInHexagon(hex) then
							self.OnSelect:Fire(color)
							self:Close()
						end
					end)

					hex.InputChanged:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseMovement and isMouseInHexagon(hex) then
							self.OnPreview:Fire(color)
						end
					end)
				end

				local function createGui(self)
					local gui = create({
						{1,"ScreenGui",{Name="BrickColor",}},
						{2,"Frame",{Active=true,BackgroundColor3=Color3.new(0.17647059261799,0.17647059261799,0.17647059261799),BorderColor3=Color3.new(0.1294117718935,0.1294117718935,0.1294117718935),Parent={1},Position=UDim2.new(0.40000000596046,0,0.40000000596046,0),Size=UDim2.new(0,337,0,380),}},
						{3,"TextButton",{BackgroundColor3=Color3.new(0.2352941185236,0.2352941185236,0.2352941185236),BorderColor3=Color3.new(0.21568627655506,0.21568627655506,0.21568627655506),BorderSizePixel=0,Font=3,Name="MoreColors",Parent={2},Position=UDim2.new(0,5,1,-30),Size=UDim2.new(1,-10,0,25),Text="More Colors",TextColor3=Color3.new(1,1,1),TextSize=14,}},
						{4,"ImageLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderSizePixel=0,Image="rbxassetid://1281023007",ImageColor3=Color3.new(0.33333334326744,0.33333334326744,0.49803924560547),Name="Hex",Parent={2},Size=UDim2.new(0,35,0,35),Visible=false,}},
					})
					local colorFrame = gui.Frame
					local hex = colorFrame.Hex

					for row = 1,13 do
						local columns = math.min(row,14-row)+6
						for column = 1,columns do
							local nextColor = BrickColor.palette(paletteCount).Color
							local newHex = hex:Clone()
							newHex.Position = UDim2.new(0, (column-1)*25-(columns-7)*13+3*26 + 1, 0, (row-1)*23 + 4)
							newHex.ImageColor3 = nextColor
							newHex.Visible = true
							hexInput(self,newHex,nextColor)
							newHex.Parent = colorFrame
							paletteCount = paletteCount + 1
						end
					end

					for column = 1,12 do
						local nextColor = bottomColors[column]
						local newHex = hex:Clone()
						newHex.Position = UDim2.new(0, (column-1)*25-(12-7)*13+3*26 + 3, 0, 308)
						newHex.ImageColor3 = nextColor
						newHex.Visible = true
						hexInput(self,newHex,nextColor)
						newHex.Parent = colorFrame
						paletteCount = paletteCount + 1
					end

					colorFrame.MoreColors.MouseButton1Click:Connect(function()
						self.OnMoreColors:Fire()
						self:Close()
					end)

					self.Gui = gui
				end

				funcs.SetMoreColorsVisible = function(self,vis)
					local colorFrame = self.Gui.Frame
					colorFrame.Size = UDim2.new(0,337,0,380 - (not vis and 33 or 0))
					colorFrame.MoreColors.Visible = vis
				end

				funcs.Show = function(self,x,y,prevColor)
					self.PrevColor = prevColor or self.PrevColor

					local reverseY = false

					local x,y = x or mouse.X, y or mouse.Y
					local maxX,maxY = mouse.ViewSizeX,mouse.ViewSizeY
					Lib.ShowGui(self.Gui)
					local sizeX,sizeY = self.Gui.Frame.AbsoluteSize.X,self.Gui.Frame.AbsoluteSize.Y

					if x + sizeX > maxX then x = self.ReverseX and x - sizeX or maxX - sizeX end
					if y + sizeY > maxY then reverseY = true end

					local closable = false
					if self.CloseEvent then self.CloseEvent:Disconnect() end
					self.CloseEvent = service.UserInputService.InputBegan:Connect(function(input)
						if not closable or input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end

						if not Lib.CheckMouseInGui(self.Gui.Frame) then
							self.CloseEvent:Disconnect()
							self:Close()
						end
					end)

					if reverseY then
						local newY = y - sizeY - (self.ReverseYOffset or 0)
						y = newY >= 0 and newY or 0
					end

					self.Gui.Frame.Position = UDim2.new(0,x,0,y)

					Lib.FastWait()
					closable = true
				end

				funcs.Close = function(self)
					self.Gui.Parent = nil
					self.OnCancel:Fire()
				end

				local mt = {__index = funcs}

				local function new()
					local obj = setmetatable({
						OnPreview = Lib.Signal.new(),
						OnSelect = Lib.Signal.new(),
						OnCancel = Lib.Signal.new(),
						OnMoreColors = Lib.Signal.new(),
						PrevColor = Color3.new(0,0,0)
					},mt)
					createGui(obj)
					return obj
				end

				return {new = new}
			end)()

			Lib.ColorPicker = (function() -- TODO: Convert to newer class model
				local funcs = {}

				local function new()
					local newMt = setmetatable({},{})

					newMt.OnSelect = Lib.Signal.new()
					newMt.OnCancel = Lib.Signal.new()
					newMt.OnPreview = Lib.Signal.new()

					local guiContents = create({
						{1,"Frame",{BackgroundColor3=Color3.new(0.17647059261799,0.17647059261799,0.17647059261799),BorderSizePixel=0,ClipsDescendants=true,Name="Content",Position=UDim2.new(0,0,0,20),Size=UDim2.new(1,0,1,-20),}},
						{2,"Frame",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Name="BasicColors",Parent={1},Position=UDim2.new(0,5,0,5),Size=UDim2.new(0,180,0,200),}},
						{3,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Title",Parent={2},Position=UDim2.new(0,0,0,-5),Size=UDim2.new(1,0,0,26),Text="Basic Colors",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextSize=14,TextXAlignment=0,}},
						{4,"Frame",{BackgroundColor3=Color3.new(0.14901961386204,0.14901961386204,0.14901961386204),BorderColor3=Color3.new(0.12549020349979,0.12549020349979,0.12549020349979),Name="Blue",Parent={1},Position=UDim2.new(1,-63,0,255),Size=UDim2.new(0,52,0,16),}},
						{5,"TextBox",{BackgroundColor3=Color3.new(0.25098040699959,0.25098040699959,0.25098040699959),BackgroundTransparency=1,BorderColor3=Color3.new(0.37647062540054,0.37647062540054,0.37647062540054),Font=3,Name="Input",Parent={4},Position=UDim2.new(0,2,0,0),Size=UDim2.new(0,50,0,16),Text="0",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextSize=14,TextXAlignment=0,}},
						{6,"Frame",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderSizePixel=0,Name="ArrowFrame",Parent={5},Position=UDim2.new(1,-16,0,0),Size=UDim2.new(0,16,1,0),}},
						{7,"TextButton",{AutoButtonColor=false,BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="Up",Parent={6},Size=UDim2.new(1,0,0,8),Text="",TextSize=14,}},
						{8,"Frame",{BackgroundTransparency=1,Name="Arrow",Parent={7},Size=UDim2.new(0,16,0,8),}},
						{9,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={8},Position=UDim2.new(0,8,0,3),Size=UDim2.new(0,1,0,1),}},
						{10,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={8},Position=UDim2.new(0,7,0,4),Size=UDim2.new(0,3,0,1),}},
						{11,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={8},Position=UDim2.new(0,6,0,5),Size=UDim2.new(0,5,0,1),}},
						{12,"TextButton",{AutoButtonColor=false,BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="Down",Parent={6},Position=UDim2.new(0,0,0,8),Size=UDim2.new(1,0,0,8),Text="",TextSize=14,}},
						{13,"Frame",{BackgroundTransparency=1,Name="Arrow",Parent={12},Size=UDim2.new(0,16,0,8),}},
						{14,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={13},Position=UDim2.new(0,8,0,5),Size=UDim2.new(0,1,0,1),}},
						{15,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={13},Position=UDim2.new(0,7,0,4),Size=UDim2.new(0,3,0,1),}},
						{16,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={13},Position=UDim2.new(0,6,0,3),Size=UDim2.new(0,5,0,1),}},
						{17,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Title",Parent={4},Position=UDim2.new(0,-40,0,0),Size=UDim2.new(0,34,1,0),Text="Blue:",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextSize=14,TextXAlignment=1,}},
						{18,"Frame",{BackgroundColor3=Color3.new(0.21568627655506,0.21568627655506,0.21568627655506),BorderSizePixel=0,ClipsDescendants=true,Name="ColorSpaceFrame",Parent={1},Position=UDim2.new(1,-261,0,4),Size=UDim2.new(0,222,0,202),}},
						{19,"ImageLabel",{BackgroundColor3=Color3.new(1,1,1),BorderColor3=Color3.new(0.37647062540054,0.37647062540054,0.37647062540054),BorderSizePixel=0,Image="rbxassetid://1072518406",Name="ColorSpace",Parent={18},Position=UDim2.new(0,1,0,1),Size=UDim2.new(0,220,0,200),}},
						{20,"Frame",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderSizePixel=0,Name="Scope",Parent={19},Position=UDim2.new(0,210,0,190),Size=UDim2.new(0,20,0,20),}},
						{21,"Frame",{BackgroundColor3=Color3.new(0,0,0),BorderSizePixel=0,Name="Line",Parent={20},Position=UDim2.new(0,9,0,0),Size=UDim2.new(0,2,0,20),}},
						{22,"Frame",{BackgroundColor3=Color3.new(0,0,0),BorderSizePixel=0,Name="Line",Parent={20},Position=UDim2.new(0,0,0,9),Size=UDim2.new(0,20,0,2),}},
						{23,"Frame",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Name="CustomColors",Parent={1},Position=UDim2.new(0,5,0,210),Size=UDim2.new(0,180,0,90),}},
						{24,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Title",Parent={23},Size=UDim2.new(1,0,0,20),Text="Custom Colors (RC = Set)",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextSize=14,TextXAlignment=0,}},
						{25,"Frame",{BackgroundColor3=Color3.new(0.14901961386204,0.14901961386204,0.14901961386204),BorderColor3=Color3.new(0.12549020349979,0.12549020349979,0.12549020349979),Name="Green",Parent={1},Position=UDim2.new(1,-63,0,233),Size=UDim2.new(0,52,0,16),}},
						{26,"TextBox",{BackgroundColor3=Color3.new(0.25098040699959,0.25098040699959,0.25098040699959),BackgroundTransparency=1,BorderColor3=Color3.new(0.37647062540054,0.37647062540054,0.37647062540054),Font=3,Name="Input",Parent={25},Position=UDim2.new(0,2,0,0),Size=UDim2.new(0,50,0,16),Text="0",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextSize=14,TextXAlignment=0,}},
						{27,"Frame",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderSizePixel=0,Name="ArrowFrame",Parent={26},Position=UDim2.new(1,-16,0,0),Size=UDim2.new(0,16,1,0),}},
						{28,"TextButton",{AutoButtonColor=false,BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="Up",Parent={27},Size=UDim2.new(1,0,0,8),Text="",TextSize=14,}},
						{29,"Frame",{BackgroundTransparency=1,Name="Arrow",Parent={28},Size=UDim2.new(0,16,0,8),}},
						{30,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={29},Position=UDim2.new(0,8,0,3),Size=UDim2.new(0,1,0,1),}},
						{31,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={29},Position=UDim2.new(0,7,0,4),Size=UDim2.new(0,3,0,1),}},
						{32,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={29},Position=UDim2.new(0,6,0,5),Size=UDim2.new(0,5,0,1),}},
						{33,"TextButton",{AutoButtonColor=false,BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="Down",Parent={27},Position=UDim2.new(0,0,0,8),Size=UDim2.new(1,0,0,8),Text="",TextSize=14,}},
						{34,"Frame",{BackgroundTransparency=1,Name="Arrow",Parent={33},Size=UDim2.new(0,16,0,8),}},
						{35,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={34},Position=UDim2.new(0,8,0,5),Size=UDim2.new(0,1,0,1),}},
						{36,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={34},Position=UDim2.new(0,7,0,4),Size=UDim2.new(0,3,0,1),}},
						{37,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={34},Position=UDim2.new(0,6,0,3),Size=UDim2.new(0,5,0,1),}},
						{38,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Title",Parent={25},Position=UDim2.new(0,-40,0,0),Size=UDim2.new(0,34,1,0),Text="Green:",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextSize=14,TextXAlignment=1,}},
						{39,"Frame",{BackgroundColor3=Color3.new(0.14901961386204,0.14901961386204,0.14901961386204),BorderColor3=Color3.new(0.12549020349979,0.12549020349979,0.12549020349979),Name="Hue",Parent={1},Position=UDim2.new(1,-180,0,211),Size=UDim2.new(0,52,0,16),}},
						{40,"TextBox",{BackgroundColor3=Color3.new(0.25098040699959,0.25098040699959,0.25098040699959),BackgroundTransparency=1,BorderColor3=Color3.new(0.37647062540054,0.37647062540054,0.37647062540054),Font=3,Name="Input",Parent={39},Position=UDim2.new(0,2,0,0),Size=UDim2.new(0,50,0,16),Text="0",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextSize=14,TextXAlignment=0,}},
						{41,"Frame",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderSizePixel=0,Name="ArrowFrame",Parent={40},Position=UDim2.new(1,-16,0,0),Size=UDim2.new(0,16,1,0),}},
						{42,"TextButton",{AutoButtonColor=false,BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="Up",Parent={41},Size=UDim2.new(1,0,0,8),Text="",TextSize=14,}},
						{43,"Frame",{BackgroundTransparency=1,Name="Arrow",Parent={42},Size=UDim2.new(0,16,0,8),}},
						{44,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={43},Position=UDim2.new(0,8,0,3),Size=UDim2.new(0,1,0,1),}},
						{45,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={43},Position=UDim2.new(0,7,0,4),Size=UDim2.new(0,3,0,1),}},
						{46,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={43},Position=UDim2.new(0,6,0,5),Size=UDim2.new(0,5,0,1),}},
						{47,"TextButton",{AutoButtonColor=false,BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="Down",Parent={41},Position=UDim2.new(0,0,0,8),Size=UDim2.new(1,0,0,8),Text="",TextSize=14,}},
						{48,"Frame",{BackgroundTransparency=1,Name="Arrow",Parent={47},Size=UDim2.new(0,16,0,8),}},
						{49,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={48},Position=UDim2.new(0,8,0,5),Size=UDim2.new(0,1,0,1),}},
						{50,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={48},Position=UDim2.new(0,7,0,4),Size=UDim2.new(0,3,0,1),}},
						{51,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={48},Position=UDim2.new(0,6,0,3),Size=UDim2.new(0,5,0,1),}},
						{52,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Title",Parent={39},Position=UDim2.new(0,-40,0,0),Size=UDim2.new(0,34,1,0),Text="Hue:",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextSize=14,TextXAlignment=1,}},
						{53,"Frame",{BackgroundColor3=Color3.new(1,1,1),BorderColor3=Color3.new(0.21568627655506,0.21568627655506,0.21568627655506),Name="Preview",Parent={1},Position=UDim2.new(1,-260,0,211),Size=UDim2.new(0,35,1,-245),}},
						{54,"Frame",{BackgroundColor3=Color3.new(0.14901961386204,0.14901961386204,0.14901961386204),BorderColor3=Color3.new(0.12549020349979,0.12549020349979,0.12549020349979),Name="Red",Parent={1},Position=UDim2.new(1,-63,0,211),Size=UDim2.new(0,52,0,16),}},
						{55,"TextBox",{BackgroundColor3=Color3.new(0.25098040699959,0.25098040699959,0.25098040699959),BackgroundTransparency=1,BorderColor3=Color3.new(0.37647062540054,0.37647062540054,0.37647062540054),Font=3,Name="Input",Parent={54},Position=UDim2.new(0,2,0,0),Size=UDim2.new(0,50,0,16),Text="0",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextSize=14,TextXAlignment=0,}},
						{56,"Frame",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderSizePixel=0,Name="ArrowFrame",Parent={55},Position=UDim2.new(1,-16,0,0),Size=UDim2.new(0,16,1,0),}},
						{57,"TextButton",{AutoButtonColor=false,BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="Up",Parent={56},Size=UDim2.new(1,0,0,8),Text="",TextSize=14,}},
						{58,"Frame",{BackgroundTransparency=1,Name="Arrow",Parent={57},Size=UDim2.new(0,16,0,8),}},
						{59,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={58},Position=UDim2.new(0,8,0,3),Size=UDim2.new(0,1,0,1),}},
						{60,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={58},Position=UDim2.new(0,7,0,4),Size=UDim2.new(0,3,0,1),}},
						{61,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={58},Position=UDim2.new(0,6,0,5),Size=UDim2.new(0,5,0,1),}},
						{62,"TextButton",{AutoButtonColor=false,BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="Down",Parent={56},Position=UDim2.new(0,0,0,8),Size=UDim2.new(1,0,0,8),Text="",TextSize=14,}},
						{63,"Frame",{BackgroundTransparency=1,Name="Arrow",Parent={62},Size=UDim2.new(0,16,0,8),}},
						{64,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={63},Position=UDim2.new(0,8,0,5),Size=UDim2.new(0,1,0,1),}},
						{65,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={63},Position=UDim2.new(0,7,0,4),Size=UDim2.new(0,3,0,1),}},
						{66,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={63},Position=UDim2.new(0,6,0,3),Size=UDim2.new(0,5,0,1),}},
						{67,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Title",Parent={54},Position=UDim2.new(0,-40,0,0),Size=UDim2.new(0,34,1,0),Text="Red:",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextSize=14,TextXAlignment=1,}},
						{68,"Frame",{BackgroundColor3=Color3.new(0.14901961386204,0.14901961386204,0.14901961386204),BorderColor3=Color3.new(0.12549020349979,0.12549020349979,0.12549020349979),Name="Sat",Parent={1},Position=UDim2.new(1,-180,0,233),Size=UDim2.new(0,52,0,16),}},
						{69,"TextBox",{BackgroundColor3=Color3.new(0.25098040699959,0.25098040699959,0.25098040699959),BackgroundTransparency=1,BorderColor3=Color3.new(0.37647062540054,0.37647062540054,0.37647062540054),Font=3,Name="Input",Parent={68},Position=UDim2.new(0,2,0,0),Size=UDim2.new(0,50,0,16),Text="0",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextSize=14,TextXAlignment=0,}},
						{70,"Frame",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderSizePixel=0,Name="ArrowFrame",Parent={69},Position=UDim2.new(1,-16,0,0),Size=UDim2.new(0,16,1,0),}},
						{71,"TextButton",{AutoButtonColor=false,BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="Up",Parent={70},Size=UDim2.new(1,0,0,8),Text="",TextSize=14,}},
						{72,"Frame",{BackgroundTransparency=1,Name="Arrow",Parent={71},Size=UDim2.new(0,16,0,8),}},
						{73,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={72},Position=UDim2.new(0,8,0,3),Size=UDim2.new(0,1,0,1),}},
						{74,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={72},Position=UDim2.new(0,7,0,4),Size=UDim2.new(0,3,0,1),}},
						{75,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={72},Position=UDim2.new(0,6,0,5),Size=UDim2.new(0,5,0,1),}},
						{76,"TextButton",{AutoButtonColor=false,BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="Down",Parent={70},Position=UDim2.new(0,0,0,8),Size=UDim2.new(1,0,0,8),Text="",TextSize=14,}},
						{77,"Frame",{BackgroundTransparency=1,Name="Arrow",Parent={76},Size=UDim2.new(0,16,0,8),}},
						{78,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={77},Position=UDim2.new(0,8,0,5),Size=UDim2.new(0,1,0,1),}},
						{79,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={77},Position=UDim2.new(0,7,0,4),Size=UDim2.new(0,3,0,1),}},
						{80,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={77},Position=UDim2.new(0,6,0,3),Size=UDim2.new(0,5,0,1),}},
						{81,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Title",Parent={68},Position=UDim2.new(0,-40,0,0),Size=UDim2.new(0,34,1,0),Text="Sat:",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextSize=14,TextXAlignment=1,}},
						{82,"Frame",{BackgroundColor3=Color3.new(0.14901961386204,0.14901961386204,0.14901961386204),BorderColor3=Color3.new(0.12549020349979,0.12549020349979,0.12549020349979),Name="Val",Parent={1},Position=UDim2.new(1,-180,0,255),Size=UDim2.new(0,52,0,16),}},
						{83,"TextBox",{BackgroundColor3=Color3.new(0.25098040699959,0.25098040699959,0.25098040699959),BackgroundTransparency=1,BorderColor3=Color3.new(0.37647062540054,0.37647062540054,0.37647062540054),Font=3,Name="Input",Parent={82},Position=UDim2.new(0,2,0,0),Size=UDim2.new(0,50,0,16),Text="255",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextSize=14,TextXAlignment=0,}},
						{84,"Frame",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderSizePixel=0,Name="ArrowFrame",Parent={83},Position=UDim2.new(1,-16,0,0),Size=UDim2.new(0,16,1,0),}},
						{85,"TextButton",{AutoButtonColor=false,BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="Up",Parent={84},Size=UDim2.new(1,0,0,8),Text="",TextSize=14,}},
						{86,"Frame",{BackgroundTransparency=1,Name="Arrow",Parent={85},Size=UDim2.new(0,16,0,8),}},
						{87,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={86},Position=UDim2.new(0,8,0,3),Size=UDim2.new(0,1,0,1),}},
						{88,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={86},Position=UDim2.new(0,7,0,4),Size=UDim2.new(0,3,0,1),}},
						{89,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={86},Position=UDim2.new(0,6,0,5),Size=UDim2.new(0,5,0,1),}},
						{90,"TextButton",{AutoButtonColor=false,BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="Down",Parent={84},Position=UDim2.new(0,0,0,8),Size=UDim2.new(1,0,0,8),Text="",TextSize=14,}},
						{91,"Frame",{BackgroundTransparency=1,Name="Arrow",Parent={90},Size=UDim2.new(0,16,0,8),}},
						{92,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={91},Position=UDim2.new(0,8,0,5),Size=UDim2.new(0,1,0,1),}},
						{93,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={91},Position=UDim2.new(0,7,0,4),Size=UDim2.new(0,3,0,1),}},
						{94,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={91},Position=UDim2.new(0,6,0,3),Size=UDim2.new(0,5,0,1),}},
						{95,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Title",Parent={82},Position=UDim2.new(0,-40,0,0),Size=UDim2.new(0,34,1,0),Text="Val:",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextSize=14,TextXAlignment=1,}},
						{96,"TextButton",{AutoButtonColor=false,BackgroundColor3=Color3.new(0.2352941185236,0.2352941185236,0.2352941185236),BorderColor3=Color3.new(0.21568627655506,0.21568627655506,0.21568627655506),Font=3,Name="Cancel",Parent={1},Position=UDim2.new(1,-105,1,-28),Size=UDim2.new(0,100,0,25),Text="Cancel",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextSize=14,}},
						{97,"TextButton",{AutoButtonColor=false,BackgroundColor3=Color3.new(0.2352941185236,0.2352941185236,0.2352941185236),BorderColor3=Color3.new(0.21568627655506,0.21568627655506,0.21568627655506),Font=3,Name="Ok",Parent={1},Position=UDim2.new(1,-210,1,-28),Size=UDim2.new(0,100,0,25),Text="OK",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextSize=14,}},
						{98,"ImageLabel",{BackgroundColor3=Color3.new(1,1,1),BorderColor3=Color3.new(0.21568627655506,0.21568627655506,0.21568627655506),Image="rbxassetid://1072518502",Name="ColorStrip",Parent={1},Position=UDim2.new(1,-30,0,5),Size=UDim2.new(0,13,0,200),}},
						{99,"Frame",{BackgroundColor3=Color3.new(0.3137255012989,0.3137255012989,0.3137255012989),BackgroundTransparency=1,BorderSizePixel=0,Name="ArrowFrame",Parent={1},Position=UDim2.new(1,-16,0,1),Size=UDim2.new(0,5,0,208),}},
						{100,"Frame",{BackgroundTransparency=1,Name="Arrow",Parent={99},Position=UDim2.new(0,-2,0,-4),Size=UDim2.new(0,8,0,16),}},
						{101,"Frame",{BackgroundColor3=Color3.new(0,0,0),BorderSizePixel=0,Parent={100},Position=UDim2.new(0,2,0,8),Size=UDim2.new(0,1,0,1),}},
						{102,"Frame",{BackgroundColor3=Color3.new(0,0,0),BorderSizePixel=0,Parent={100},Position=UDim2.new(0,3,0,7),Size=UDim2.new(0,1,0,3),}},
						{103,"Frame",{BackgroundColor3=Color3.new(0,0,0),BorderSizePixel=0,Parent={100},Position=UDim2.new(0,4,0,6),Size=UDim2.new(0,1,0,5),}},
						{104,"Frame",{BackgroundColor3=Color3.new(0,0,0),BorderSizePixel=0,Parent={100},Position=UDim2.new(0,5,0,5),Size=UDim2.new(0,1,0,7),}},
						{105,"Frame",{BackgroundColor3=Color3.new(0,0,0),BorderSizePixel=0,Parent={100},Position=UDim2.new(0,6,0,4),Size=UDim2.new(0,1,0,9),}},
					})
					local window = Lib.Window.new()
					window.Resizable = false
					window.Alignable = false
					window:SetTitle("Color Picker")
					window:Resize(450,330)
					for i,v in pairs(guiContents:GetChildren()) do
						v.Parent = window.GuiElems.Content
					end
					newMt.Window = window
					newMt.Gui = window.Gui
					local pickerGui = window.Gui.Main
					local pickerTopBar = pickerGui.TopBar
					local pickerFrame = pickerGui.Content
					local colorSpace = pickerFrame.ColorSpaceFrame.ColorSpace
					local colorStrip = pickerFrame.ColorStrip
					local previewFrame = pickerFrame.Preview
					local basicColorsFrame = pickerFrame.BasicColors
					local customColorsFrame = pickerFrame.CustomColors
					local okButton = pickerFrame.Ok
					local cancelButton = pickerFrame.Cancel
					local closeButton = pickerTopBar.Close

					local colorScope = colorSpace.Scope
					local colorArrow = pickerFrame.ArrowFrame.Arrow

					local hueInput = pickerFrame.Hue.Input
					local satInput = pickerFrame.Sat.Input
					local valInput = pickerFrame.Val.Input

					local redInput = pickerFrame.Red.Input
					local greenInput = pickerFrame.Green.Input
					local blueInput = pickerFrame.Blue.Input

					local user = game:GetService("UserInputService")
					local mouse = game:GetService("Players").LocalPlayer:GetMouse()

					local hue,sat,val = 0,0,1
					local red,green,blue = 1,1,1
					local chosenColor = Color3.new(0,0,0)

					local basicColors = {Color3.new(0,0,0),Color3.new(0.66666668653488,0,0),Color3.new(0,0.33333334326744,0),Color3.new(0.66666668653488,0.33333334326744,0),Color3.new(0,0.66666668653488,0),Color3.new(0.66666668653488,0.66666668653488,0),Color3.new(0,1,0),Color3.new(0.66666668653488,1,0),Color3.new(0,0,0.49803924560547),Color3.new(0.66666668653488,0,0.49803924560547),Color3.new(0,0.33333334326744,0.49803924560547),Color3.new(0.66666668653488,0.33333334326744,0.49803924560547),Color3.new(0,0.66666668653488,0.49803924560547),Color3.new(0.66666668653488,0.66666668653488,0.49803924560547),Color3.new(0,1,0.49803924560547),Color3.new(0.66666668653488,1,0.49803924560547),Color3.new(0,0,1),Color3.new(0.66666668653488,0,1),Color3.new(0,0.33333334326744,1),Color3.new(0.66666668653488,0.33333334326744,1),Color3.new(0,0.66666668653488,1),Color3.new(0.66666668653488,0.66666668653488,1),Color3.new(0,1,1),Color3.new(0.66666668653488,1,1),Color3.new(0.33333334326744,0,0),Color3.new(1,0,0),Color3.new(0.33333334326744,0.33333334326744,0),Color3.new(1,0.33333334326744,0),Color3.new(0.33333334326744,0.66666668653488,0),Color3.new(1,0.66666668653488,0),Color3.new(0.33333334326744,1,0),Color3.new(1,1,0),Color3.new(0.33333334326744,0,0.49803924560547),Color3.new(1,0,0.49803924560547),Color3.new(0.33333334326744,0.33333334326744,0.49803924560547),Color3.new(1,0.33333334326744,0.49803924560547),Color3.new(0.33333334326744,0.66666668653488,0.49803924560547),Color3.new(1,0.66666668653488,0.49803924560547),Color3.new(0.33333334326744,1,0.49803924560547),Color3.new(1,1,0.49803924560547),Color3.new(0.33333334326744,0,1),Color3.new(1,0,1),Color3.new(0.33333334326744,0.33333334326744,1),Color3.new(1,0.33333334326744,1),Color3.new(0.33333334326744,0.66666668653488,1),Color3.new(1,0.66666668653488,1),Color3.new(0.33333334326744,1,1),Color3.new(1,1,1)}
					local customColors = {}

					local function updateColor(noupdate)
						local relativeX,relativeY,relativeStripY = 219 - hue*219, 199 - sat*199, 199 - val*199
						local hsvColor = Color3.fromHSV(hue,sat,val)

						if noupdate == 2 or not noupdate then
							hueInput.Text = tostring(math.ceil(359*hue))
							satInput.Text = tostring(math.ceil(255*sat))
							valInput.Text = tostring(math.floor(255*val))
						end
						if noupdate == 1 or not noupdate then
							redInput.Text = tostring(math.floor(255*red))
							greenInput.Text = tostring(math.floor(255*green))
							blueInput.Text = tostring(math.floor(255*blue))
						end

						chosenColor = Color3.new(red,green,blue)

						colorScope.Position = UDim2.new(0,relativeX-9,0,relativeY-9)
						colorStrip.ImageColor3 = Color3.fromHSV(hue,sat,1)
						colorArrow.Position = UDim2.new(0,-2,0,relativeStripY-4)
						previewFrame.BackgroundColor3 = chosenColor

						newMt.Color = chosenColor
						newMt.OnPreview:Fire(chosenColor)
					end

					local function colorSpaceInput()
						local relativeX = mouse.X - colorSpace.AbsolutePosition.X
						local relativeY = mouse.Y - colorSpace.AbsolutePosition.Y

						if relativeX < 0 then relativeX = 0 elseif relativeX > 219 then relativeX = 219 end
						if relativeY < 0 then relativeY = 0 elseif relativeY > 199 then relativeY = 199 end

						hue = (219 - relativeX)/219
						sat = (199 - relativeY)/199

						local hsvColor = Color3.fromHSV(hue,sat,val)
						red,green,blue = hsvColor.r,hsvColor.g,hsvColor.b

						updateColor()
					end

					local function colorStripInput()
						local relativeY = mouse.Y - colorStrip.AbsolutePosition.Y

						if relativeY < 0 then relativeY = 0 elseif relativeY > 199 then relativeY = 199 end	

						val = (199 - relativeY)/199

						local hsvColor = Color3.fromHSV(hue,sat,val)
						red,green,blue = hsvColor.r,hsvColor.g,hsvColor.b

						updateColor()
					end

					local function hookButtons(frame,func)
						frame.ArrowFrame.Up.InputBegan:Connect(function(input)
							if input.UserInputType == Enum.UserInputType.MouseMovement then
								frame.ArrowFrame.Up.BackgroundTransparency = 0.5
							elseif input.UserInputType == Enum.UserInputType.MouseButton1 then
								local releaseEvent,runEvent

								local startTime = tick()
								local pressing = true
								local startNum = tonumber(frame.Text)

								if not startNum then return end

								releaseEvent = user.InputEnded:Connect(function(input)
									if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end
									releaseEvent:Disconnect()
									pressing = false
								end)

								startNum = startNum + 1
								func(startNum)
								while pressing do
									if tick()-startTime > 0.3 then
										startNum = startNum + 1
										func(startNum)
									end
									wait(0.1)
								end
							end
						end)

						frame.ArrowFrame.Up.InputEnded:Connect(function(input)
							if input.UserInputType == Enum.UserInputType.MouseMovement then
								frame.ArrowFrame.Up.BackgroundTransparency = 1
							end
						end)

						frame.ArrowFrame.Down.InputBegan:Connect(function(input)
							if input.UserInputType == Enum.UserInputType.MouseMovement then
								frame.ArrowFrame.Down.BackgroundTransparency = 0.5
							elseif input.UserInputType == Enum.UserInputType.MouseButton1 then
								local releaseEvent,runEvent

								local startTime = tick()
								local pressing = true
								local startNum = tonumber(frame.Text)

								if not startNum then return end

								releaseEvent = user.InputEnded:Connect(function(input)
									if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end
									releaseEvent:Disconnect()
									pressing = false
								end)

								startNum = startNum - 1
								func(startNum)
								while pressing do
									if tick()-startTime > 0.3 then
										startNum = startNum - 1
										func(startNum)
									end
									wait(0.1)
								end
							end
						end)

						frame.ArrowFrame.Down.InputEnded:Connect(function(input)
							if input.UserInputType == Enum.UserInputType.MouseMovement then
								frame.ArrowFrame.Down.BackgroundTransparency = 1
							end
						end)
					end

					colorSpace.InputBegan:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseButton1 then
							local releaseEvent,mouseEvent

							releaseEvent = user.InputEnded:Connect(function(input)
								if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end
								releaseEvent:Disconnect()
								mouseEvent:Disconnect()
							end)

							mouseEvent = user.InputChanged:Connect(function(input)
								if input.UserInputType == Enum.UserInputType.MouseMovement then
									colorSpaceInput()
								end
							end)

							colorSpaceInput()
						end
					end)

					colorStrip.InputBegan:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseButton1 then
							local releaseEvent,mouseEvent

							releaseEvent = user.InputEnded:Connect(function(input)
								if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end
								releaseEvent:Disconnect()
								mouseEvent:Disconnect()
							end)

							mouseEvent = user.InputChanged:Connect(function(input)
								if input.UserInputType == Enum.UserInputType.MouseMovement then
									colorStripInput()
								end
							end)

							colorStripInput()
						end
					end)

					local function updateHue(str)
						local num = tonumber(str)
						if num then
							hue = math.clamp(math.floor(num),0,359)/359
							local hsvColor = Color3.fromHSV(hue,sat,val)
							red,green,blue = hsvColor.r,hsvColor.g,hsvColor.b
							hueInput.Text = tostring(hue*359)
							updateColor(1)
						end
					end
					hueInput.FocusLost:Connect(function() updateHue(hueInput.Text) end) hookButtons(hueInput,updateHue)

					local function updateSat(str)
						local num = tonumber(str)
						if num then
							sat = math.clamp(math.floor(num),0,255)/255
							local hsvColor = Color3.fromHSV(hue,sat,val)
							red,green,blue = hsvColor.r,hsvColor.g,hsvColor.b
							satInput.Text = tostring(sat*255)
							updateColor(1)
						end
					end
					satInput.FocusLost:Connect(function() updateSat(satInput.Text) end) hookButtons(satInput,updateSat)

					local function updateVal(str)
						local num = tonumber(str)
						if num then
							val = math.clamp(math.floor(num),0,255)/255
							local hsvColor = Color3.fromHSV(hue,sat,val)
							red,green,blue = hsvColor.r,hsvColor.g,hsvColor.b
							valInput.Text = tostring(val*255)
							updateColor(1)
						end
					end
					valInput.FocusLost:Connect(function() updateVal(valInput.Text) end) hookButtons(valInput,updateVal)

					local function updateRed(str)
						local num = tonumber(str)
						if num then
							red = math.clamp(math.floor(num),0,255)/255
							local newColor = Color3.new(red,green,blue)
							hue,sat,val = Color3.toHSV(newColor)
							redInput.Text = tostring(red*255)
							updateColor(2)
						end
					end
					redInput.FocusLost:Connect(function() updateRed(redInput.Text) end) hookButtons(redInput,updateRed)

					local function updateGreen(str)
						local num = tonumber(str)
						if num then
							green = math.clamp(math.floor(num),0,255)/255
							local newColor = Color3.new(red,green,blue)
							hue,sat,val = Color3.toHSV(newColor)
							greenInput.Text = tostring(green*255)
							updateColor(2)
						end
					end
					greenInput.FocusLost:Connect(function() updateGreen(greenInput.Text) end) hookButtons(greenInput,updateGreen)

					local function updateBlue(str)
						local num = tonumber(str)
						if num then
							blue = math.clamp(math.floor(num),0,255)/255
							local newColor = Color3.new(red,green,blue)
							hue,sat,val = Color3.toHSV(newColor)
							blueInput.Text = tostring(blue*255)
							updateColor(2)
						end
					end
					blueInput.FocusLost:Connect(function() updateBlue(blueInput.Text) end) hookButtons(blueInput,updateBlue)

					local colorChoice = Instance.new("TextButton")
					colorChoice.Name = "Choice"
					colorChoice.Size = UDim2.new(0,25,0,18)
					colorChoice.BorderColor3 = Color3.fromRGB(55,55,55)
					colorChoice.Text = ""
					colorChoice.AutoButtonColor = false

					local row = 0
					local column = 0
					for i,v in pairs(basicColors) do
						local newColor = colorChoice:Clone()
						newColor.BackgroundColor3 = v
						newColor.Position = UDim2.new(0,1 + 30*column,0,21 + 23*row)

						newColor.MouseButton1Click:Connect(function()
							red,green,blue = v.r,v.g,v.b
							local newColor = Color3.new(red,green,blue)
							hue,sat,val = Color3.toHSV(newColor)
							updateColor()
						end)	

						newColor.Parent = basicColorsFrame
						column = column + 1
						if column == 6 then row = row + 1 column = 0 end
					end

					row = 0
					column = 0
					for i = 1,12 do
						local color = customColors[i] or Color3.new(0,0,0)
						local newColor = colorChoice:Clone()
						newColor.BackgroundColor3 = color
						newColor.Position = UDim2.new(0,1 + 30*column,0,20 + 23*row)

						newColor.MouseButton1Click:Connect(function()
							local curColor = customColors[i] or Color3.new(0,0,0)
							red,green,blue = curColor.r,curColor.g,curColor.b
							hue,sat,val = Color3.toHSV(curColor)
							updateColor()
						end)

						newColor.MouseButton2Click:Connect(function()
							customColors[i] = chosenColor
							newColor.BackgroundColor3 = chosenColor
						end)

						newColor.Parent = customColorsFrame
						column = column + 1
						if column == 6 then row = row + 1 column = 0 end
					end

					okButton.MouseButton1Click:Connect(function() newMt.OnSelect:Fire(chosenColor) window:Close() end)
					okButton.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then okButton.BackgroundTransparency = 0.4 end end)
					okButton.InputEnded:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then okButton.BackgroundTransparency = 0 end end)

					cancelButton.MouseButton1Click:Connect(function() newMt.OnCancel:Fire() window:Close() end)
					cancelButton.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then cancelButton.BackgroundTransparency = 0.4 end end)
					cancelButton.InputEnded:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then cancelButton.BackgroundTransparency = 0 end end)

					updateColor()

					newMt.SetColor = function(self,color)
						red,green,blue = color.r,color.g,color.b
						hue,sat,val = Color3.toHSV(color)
						updateColor()
					end

					newMt.Show = function(self)
						self.Window:Show()
					end

					return newMt
				end

				return {new = new}
			end)()

			Lib.NumberSequenceEditor = (function()
				local function new() -- TODO: Convert to newer class model
					local newMt = setmetatable({},{})
					newMt.OnSelect = Lib.Signal.new()
					newMt.OnCancel = Lib.Signal.new()
					newMt.OnPreview = Lib.Signal.new()

					local guiContents = create({
						{1,"Frame",{BackgroundColor3=Color3.new(0.17647059261799,0.17647059261799,0.17647059261799),BorderSizePixel=0,ClipsDescendants=true,Name="Content",Position=UDim2.new(0,0,0,20),Size=UDim2.new(1,0,1,-20),}},
						{2,"Frame",{BackgroundColor3=Color3.new(0.14901961386204,0.14901961386204,0.14901961386204),BorderColor3=Color3.new(0.12549020349979,0.12549020349979,0.12549020349979),Name="Time",Parent={1},Position=UDim2.new(0,40,0,210),Size=UDim2.new(0,60,0,20),}},
						{3,"TextBox",{BackgroundColor3=Color3.new(0.25098040699959,0.25098040699959,0.25098040699959),BackgroundTransparency=1,BorderColor3=Color3.new(0.37647062540054,0.37647062540054,0.37647062540054),ClipsDescendants=true,Font=3,Name="Input",Parent={2},Position=UDim2.new(0,2,0,0),Size=UDim2.new(0,58,0,20),Text="0",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextSize=14,TextXAlignment=0,}},
						{4,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Title",Parent={2},Position=UDim2.new(0,-40,0,0),Size=UDim2.new(0,34,1,0),Text="Time",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextSize=14,TextXAlignment=1,}},
						{5,"TextButton",{AutoButtonColor=false,BackgroundColor3=Color3.new(0.2352941185236,0.2352941185236,0.2352941185236),BorderColor3=Color3.new(0.21568627655506,0.21568627655506,0.21568627655506),Font=3,Name="Close",Parent={1},Position=UDim2.new(1,-90,0,210),Size=UDim2.new(0,80,0,20),Text="Close",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextSize=14,}},
						{6,"TextButton",{AutoButtonColor=false,BackgroundColor3=Color3.new(0.2352941185236,0.2352941185236,0.2352941185236),BorderColor3=Color3.new(0.21568627655506,0.21568627655506,0.21568627655506),Font=3,Name="Reset",Parent={1},Position=UDim2.new(1,-180,0,210),Size=UDim2.new(0,80,0,20),Text="Reset",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextSize=14,}},
						{7,"TextButton",{AutoButtonColor=false,BackgroundColor3=Color3.new(0.2352941185236,0.2352941185236,0.2352941185236),BorderColor3=Color3.new(0.21568627655506,0.21568627655506,0.21568627655506),Font=3,Name="Delete",Parent={1},Position=UDim2.new(0,380,0,210),Size=UDim2.new(0,80,0,20),Text="Delete",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextSize=14,}},
						{8,"Frame",{BackgroundColor3=Color3.new(0.17647059261799,0.17647059261799,0.17647059261799),BorderColor3=Color3.new(0.21568627655506,0.21568627655506,0.21568627655506),Name="NumberLineOutlines",Parent={1},Position=UDim2.new(0,10,0,20),Size=UDim2.new(1,-20,0,170),}},
						{9,"Frame",{BackgroundColor3=Color3.new(0.25098040699959,0.25098040699959,0.25098040699959),BackgroundTransparency=1,BorderColor3=Color3.new(0.37647062540054,0.37647062540054,0.37647062540054),Name="NumberLine",Parent={1},Position=UDim2.new(0,10,0,20),Size=UDim2.new(1,-20,0,170),}},
						{10,"Frame",{BackgroundColor3=Color3.new(0.14901961386204,0.14901961386204,0.14901961386204),BorderColor3=Color3.new(0.12549020349979,0.12549020349979,0.12549020349979),Name="Value",Parent={1},Position=UDim2.new(0,170,0,210),Size=UDim2.new(0,60,0,20),}},
						{11,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Title",Parent={10},Position=UDim2.new(0,-40,0,0),Size=UDim2.new(0,34,1,0),Text="Value",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextSize=14,TextXAlignment=1,}},
						{12,"TextBox",{BackgroundColor3=Color3.new(0.25098040699959,0.25098040699959,0.25098040699959),BackgroundTransparency=1,BorderColor3=Color3.new(0.37647062540054,0.37647062540054,0.37647062540054),ClipsDescendants=true,Font=3,Name="Input",Parent={10},Position=UDim2.new(0,2,0,0),Size=UDim2.new(0,58,0,20),Text="0",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextSize=14,TextXAlignment=0,}},
						{13,"Frame",{BackgroundColor3=Color3.new(0.14901961386204,0.14901961386204,0.14901961386204),BorderColor3=Color3.new(0.12549020349979,0.12549020349979,0.12549020349979),Name="Envelope",Parent={1},Position=UDim2.new(0,300,0,210),Size=UDim2.new(0,60,0,20),}},
						{14,"TextBox",{BackgroundColor3=Color3.new(0.25098040699959,0.25098040699959,0.25098040699959),BackgroundTransparency=1,BorderColor3=Color3.new(0.37647062540054,0.37647062540054,0.37647062540054),ClipsDescendants=true,Font=3,Name="Input",Parent={13},Position=UDim2.new(0,2,0,0),Size=UDim2.new(0,58,0,20),Text="0",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextSize=14,TextXAlignment=0,}},
						{15,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Title",Parent={13},Position=UDim2.new(0,-40,0,0),Size=UDim2.new(0,34,1,0),Text="Envelope",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextSize=14,TextXAlignment=1,}},
					})
					local window = Lib.Window.new()
					window.Resizable = false
					window:Resize(680,265)
					window:SetTitle("NumberSequence Editor")
					newMt.Window = window
					newMt.Gui = window.Gui
					for i,v in pairs(guiContents:GetChildren()) do
						v.Parent = window.GuiElems.Content
					end
					local gui = window.Gui
					local pickerGui = gui.Main
					local pickerTopBar = pickerGui.TopBar
					local pickerFrame = pickerGui.Content
					local numberLine = pickerFrame.NumberLine
					local numberLineOutlines = pickerFrame.NumberLineOutlines
					local timeBox = pickerFrame.Time.Input
					local valueBox = pickerFrame.Value.Input
					local envelopeBox = pickerFrame.Envelope.Input
					local deleteButton = pickerFrame.Delete
					local resetButton = pickerFrame.Reset
					local closeButton = pickerFrame.Close
					local topClose = pickerTopBar.Close

					local points = {{1,0,3},{8,0.05,1},{5,0.6,2},{4,0.7,4},{6,1,4}}
					local lines = {}
					local eLines = {}
					local beginPoint = points[1]
					local endPoint = points[#points]
					local currentlySelected = nil
					local currentPoint = nil
					local resetSequence = nil

					local user = game:GetService("UserInputService")
					local mouse = game:GetService("Players").LocalPlayer:GetMouse()

					for i = 2,10 do
						local newLine = Instance.new("Frame")
						newLine.BackgroundTransparency = 0.5
						newLine.BackgroundColor3 = Color3.new(96/255,96/255,96/255)
						newLine.BorderSizePixel = 0
						newLine.Size = UDim2.new(0,1,1,0)
						newLine.Position = UDim2.new((i-1)/(11-1),0,0,0)
						newLine.Parent = numberLineOutlines
					end

					for i = 2,4 do
						local newLine = Instance.new("Frame")
						newLine.BackgroundTransparency = 0.5
						newLine.BackgroundColor3 = Color3.new(96/255,96/255,96/255)
						newLine.BorderSizePixel = 0
						newLine.Size = UDim2.new(1,0,0,1)
						newLine.Position = UDim2.new(0,0,(i-1)/(5-1),0)
						newLine.Parent = numberLineOutlines
					end

					local lineTemp = Instance.new("Frame")
					lineTemp.BackgroundColor3 = Color3.new(0,0,0)
					lineTemp.BorderSizePixel = 0
					lineTemp.Size = UDim2.new(0,1,0,1)

					local sequenceLine = Instance.new("Frame")
					sequenceLine.BackgroundColor3 = Color3.new(0,0,0)
					sequenceLine.BorderSizePixel = 0
					sequenceLine.Size = UDim2.new(0,1,0,0)

					for i = 1,numberLine.AbsoluteSize.X do
						local line = sequenceLine:Clone()
						eLines[i] = line
						line.Name = "E"..tostring(i)
						line.BackgroundTransparency = 0.5
						line.BackgroundColor3 = Color3.new(199/255,44/255,28/255)
						line.Position = UDim2.new(0,i-1,0,0)
						line.Parent = numberLine
					end

					for i = 1,numberLine.AbsoluteSize.X do
						local line = sequenceLine:Clone()
						lines[i] = line
						line.Name = tostring(i)
						line.Position = UDim2.new(0,i-1,0,0)
						line.Parent = numberLine
					end

					local envelopeDrag = Instance.new("Frame")
					envelopeDrag.BackgroundTransparency = 1
					envelopeDrag.BackgroundColor3 = Color3.new(0,0,0)
					envelopeDrag.BorderSizePixel = 0
					envelopeDrag.Size = UDim2.new(0,7,0,20)
					envelopeDrag.Visible = false
					envelopeDrag.ZIndex = 2
					local envelopeDragLine = Instance.new("Frame",envelopeDrag)
					envelopeDragLine.Name = "Line"
					envelopeDragLine.BackgroundColor3 = Color3.new(0,0,0)
					envelopeDragLine.BorderSizePixel = 0
					envelopeDragLine.Position = UDim2.new(0,3,0,0)
					envelopeDragLine.Size = UDim2.new(0,1,0,20)
					envelopeDragLine.ZIndex = 2

					local envelopeDragTop,envelopeDragBottom = envelopeDrag:Clone(),envelopeDrag:Clone()
					envelopeDragTop.Parent = numberLine
					envelopeDragBottom.Parent = numberLine

					local function buildSequence()
						local newPoints = {}
						for i,v in pairs(points) do
							table.insert(newPoints,NumberSequenceKeypoint.new(v[2],v[1],v[3]))
						end
						newMt.Sequence = NumberSequence.new(newPoints)
						newMt.OnSelect:Fire(newMt.Sequence)
					end

					local function round(num,places)
						local multi = 10^places
						return math.floor(num*multi + 0.5)/multi
					end

					local function updateInputs(point)
						if point then
							currentPoint = point
							local rawT,rawV,rawE = point[2],point[1],point[3]
							timeBox.Text = round(rawT,(rawT < 0.01 and 5) or (rawT < 0.1 and 4) or 3)
							valueBox.Text = round(rawV,(rawV < 0.01 and 5) or (rawV < 0.1 and 4) or (rawV < 1 and 3) or 2)
							envelopeBox.Text = round(rawE,(rawE < 0.01 and 5) or (rawE < 0.1 and 4) or (rawV < 1 and 3) or 2)

							local envelopeDistance = numberLine.AbsoluteSize.Y*(point[3]/10)
							envelopeDragTop.Position = UDim2.new(0,point[4].Position.X.Offset-1,0,point[4].Position.Y.Offset-envelopeDistance-17)
							envelopeDragTop.Visible = true
							envelopeDragBottom.Position = UDim2.new(0,point[4].Position.X.Offset-1,0,point[4].Position.Y.Offset+envelopeDistance+2)
							envelopeDragBottom.Visible = true
						end
					end

					envelopeDragTop.InputBegan:Connect(function(input)
						if input.UserInputType ~= Enum.UserInputType.MouseButton1 or not currentPoint or Lib.CheckMouseInGui(currentPoint[4].Select) then return end
						local mouseEvent,releaseEvent
						local maxSize = numberLine.AbsoluteSize.Y

						local mouseDelta = math.abs(envelopeDragTop.AbsolutePosition.Y - mouse.Y)

						envelopeDragTop.Line.Position = UDim2.new(0,2,0,0)
						envelopeDragTop.Line.Size = UDim2.new(0,3,0,20)

						releaseEvent = user.InputEnded:Connect(function(input)
							if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end
							mouseEvent:Disconnect()
							releaseEvent:Disconnect()
							envelopeDragTop.Line.Position = UDim2.new(0,3,0,0)
							envelopeDragTop.Line.Size = UDim2.new(0,1,0,20)
						end)

						mouseEvent = user.InputChanged:Connect(function(input)
							if input.UserInputType == Enum.UserInputType.MouseMovement then
								local topDiff = (currentPoint[4].AbsolutePosition.Y+2)-(mouse.Y-mouseDelta)-19
								local newEnvelope = 10*(math.max(topDiff,0)/maxSize)
								local maxEnvelope = math.min(currentPoint[1],10-currentPoint[1])
								currentPoint[3] = math.min(newEnvelope,maxEnvelope)
								newMt:Redraw()
								buildSequence()
								updateInputs(currentPoint)
							end
						end)
					end)

					envelopeDragBottom.InputBegan:Connect(function(input)
						if input.UserInputType ~= Enum.UserInputType.MouseButton1 or not currentPoint or Lib.CheckMouseInGui(currentPoint[4].Select) then return end
						local mouseEvent,releaseEvent
						local maxSize = numberLine.AbsoluteSize.Y

						local mouseDelta = math.abs(envelopeDragBottom.AbsolutePosition.Y - mouse.Y)

						envelopeDragBottom.Line.Position = UDim2.new(0,2,0,0)
						envelopeDragBottom.Line.Size = UDim2.new(0,3,0,20)

						releaseEvent = user.InputEnded:Connect(function(input)
							if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end
							mouseEvent:Disconnect()
							releaseEvent:Disconnect()
							envelopeDragBottom.Line.Position = UDim2.new(0,3,0,0)
							envelopeDragBottom.Line.Size = UDim2.new(0,1,0,20)
						end)

						mouseEvent = user.InputChanged:Connect(function(input)
							if input.UserInputType == Enum.UserInputType.MouseMovement then
								local bottomDiff = (mouse.Y+(20-mouseDelta))-(currentPoint[4].AbsolutePosition.Y+2)-19
								local newEnvelope = 10*(math.max(bottomDiff,0)/maxSize)
								local maxEnvelope = math.min(currentPoint[1],10-currentPoint[1])
								currentPoint[3] = math.min(newEnvelope,maxEnvelope)
								newMt:Redraw()
								buildSequence()
								updateInputs(currentPoint)
							end
						end)
					end)

					local function placePoint(point)
						local newPoint = Instance.new("Frame")
						newPoint.Name = "Point"
						newPoint.BorderSizePixel = 0
						newPoint.Size = UDim2.new(0,5,0,5)
						newPoint.Position = UDim2.new(0,math.floor((numberLine.AbsoluteSize.X-1) * point[2])-2,0,numberLine.AbsoluteSize.Y*(10-point[1])/10-2)
						newPoint.BackgroundColor3 = Color3.new(0,0,0)

						local newSelect = Instance.new("Frame")
						newSelect.Name = "Select"
						newSelect.BackgroundTransparency = 1
						newSelect.BackgroundColor3 = Color3.new(199/255,44/255,28/255)
						newSelect.Position = UDim2.new(0,-2,0,-2)
						newSelect.Size = UDim2.new(0,9,0,9)
						newSelect.Parent = newPoint

						newPoint.Parent = numberLine

						newSelect.InputBegan:Connect(function(input)
							if input.UserInputType == Enum.UserInputType.MouseMovement then
								for i,v in pairs(points) do v[4].Select.BackgroundTransparency = 1 end
								newSelect.BackgroundTransparency = 0
								updateInputs(point)
							end
							if input.UserInputType == Enum.UserInputType.MouseButton1 and not currentlySelected then
								currentPoint = point
								local mouseEvent,releaseEvent
								currentlySelected = true
								newSelect.BackgroundColor3 = Color3.new(249/255,191/255,59/255)

								local oldEnvelope = point[3]

								releaseEvent = user.InputEnded:Connect(function(input)
									if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end
									mouseEvent:Disconnect()
									releaseEvent:Disconnect()
									currentlySelected = nil
									newSelect.BackgroundColor3 = Color3.new(199/255,44/255,28/255)
								end)

								mouseEvent = user.InputChanged:Connect(function(input)
									if input.UserInputType == Enum.UserInputType.MouseMovement then
										local maxX = numberLine.AbsoluteSize.X-1
										local relativeX = mouse.X - numberLine.AbsolutePosition.X
										if relativeX < 0 then relativeX = 0 end
										if relativeX > maxX then relativeX = maxX end
										local maxY = numberLine.AbsoluteSize.Y-1
										local relativeY = mouse.Y - numberLine.AbsolutePosition.Y
										if relativeY < 0 then relativeY = 0 end
										if relativeY > maxY then relativeY = maxY end
										if point ~= beginPoint and point ~= endPoint then
											point[2] = relativeX/maxX
										end
										point[1] = 10-(relativeY/maxY)*10
										local maxEnvelope = math.min(point[1],10-point[1])
										point[3] = math.min(oldEnvelope,maxEnvelope)
										newMt:Redraw()
										updateInputs(point)
										for i,v in pairs(points) do v[4].Select.BackgroundTransparency = 1 end
										newSelect.BackgroundTransparency = 0
										buildSequence()
									end
								end)
							end
						end)

						return newPoint
					end

					local function placePoints()
						for i,v in pairs(points) do
							v[4] = placePoint(v)
						end
					end

					local function redraw(self)
						local numberLineSize = numberLine.AbsoluteSize
						table.sort(points,function(a,b) return a[2] < b[2] end)
						for i,v in pairs(points) do
							v[4].Position = UDim2.new(0,math.floor((numberLineSize.X-1) * v[2])-2,0,(numberLineSize.Y-1)*(10-v[1])/10-2)
						end
						lines[1].Size = UDim2.new(0,1,0,0)
						for i = 1,#points-1 do
							local fromPoint = points[i]
							local toPoint = points[i+1]
							local deltaY = toPoint[4].Position.Y.Offset-fromPoint[4].Position.Y.Offset
							local deltaX = toPoint[4].Position.X.Offset-fromPoint[4].Position.X.Offset
							local slope = deltaY/deltaX

							local fromEnvelope = fromPoint[3]
							local nextEnvelope = toPoint[3]

							local currentRise = math.abs(slope)
							local totalRise = 0
							local maxRise = math.abs(toPoint[4].Position.Y.Offset-fromPoint[4].Position.Y.Offset)

							for lineCount = math.min(fromPoint[4].Position.X.Offset+1,toPoint[4].Position.X.Offset),toPoint[4].Position.X.Offset do
								if deltaX == 0 and deltaY == 0 then return end
								local riseNow = math.floor(currentRise)
								local line = lines[lineCount+3]
								if line then
									if totalRise+riseNow > maxRise then riseNow = maxRise-totalRise end
									if math.sign(slope) == -1 then
										line.Position = UDim2.new(0,lineCount+2,0,fromPoint[4].Position.Y.Offset + -(totalRise+riseNow)+2)
									else
										line.Position = UDim2.new(0,lineCount+2,0,fromPoint[4].Position.Y.Offset + totalRise+2)
									end
									line.Size = UDim2.new(0,1,0,math.max(riseNow,1))
								end
								totalRise = totalRise + riseNow
								currentRise = currentRise - riseNow + math.abs(slope)

								local envPercent = (lineCount-fromPoint[4].Position.X.Offset)/(toPoint[4].Position.X.Offset-fromPoint[4].Position.X.Offset)
								local envLerp = fromEnvelope+(nextEnvelope-fromEnvelope)*envPercent
								local relativeSize = (envLerp/10)*numberLineSize.Y						

								local line = eLines[lineCount + 3]
								if line then
									line.Position = UDim2.new(0,lineCount+2,0,lines[lineCount+3].Position.Y.Offset-math.floor(relativeSize))
									line.Size = UDim2.new(0,1,0,math.floor(relativeSize*2))
								end
							end
						end
					end
					newMt.Redraw = redraw

					local function loadSequence(self,seq)
						resetSequence = seq
						for i,v in pairs(points) do if v[4] then v[4]:Destroy() end end
						points = {}
						for i,v in pairs(seq.Keypoints) do
							local maxEnvelope = math.min(v.Value,10-v.Value)
							local newPoint = {v.Value,v.Time,math.min(v.Envelope,maxEnvelope)}
							newPoint[4] = placePoint(newPoint)
							table.insert(points,newPoint)
						end
						beginPoint = points[1]
						endPoint = points[#points]
						currentlySelected = nil
						redraw()
						envelopeDragTop.Visible = false
						envelopeDragBottom.Visible = false
					end
					newMt.SetSequence = loadSequence

					timeBox.FocusLost:Connect(function()
						local point = currentPoint
						local num = tonumber(timeBox.Text)
						if point and num and point ~= beginPoint and point ~= endPoint then
							num = math.clamp(num,0,1)
							point[2] = num
							redraw()
							buildSequence()
							updateInputs(point)
						end
					end)

					valueBox.FocusLost:Connect(function()
						local point = currentPoint
						local num = tonumber(valueBox.Text)
						if point and num then
							local oldEnvelope = point[3]
							num = math.clamp(num,0,10)
							point[1] = num
							local maxEnvelope = math.min(point[1],10-point[1])
							point[3] = math.min(oldEnvelope,maxEnvelope)
							redraw()
							buildSequence()
							updateInputs(point)
						end
					end)

					envelopeBox.FocusLost:Connect(function()
						local point = currentPoint
						local num = tonumber(envelopeBox.Text)
						if point and num then
							num = math.clamp(num,0,5)
							local maxEnvelope = math.min(point[1],10-point[1])
							point[3] = math.min(num,maxEnvelope)
							redraw()
							buildSequence()
							updateInputs(point)
						end
					end)

					local function buttonAnimations(button,inverse)
						button.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then button.BackgroundTransparency = (inverse and 0.5 or 0.4) end end)
						button.InputEnded:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then button.BackgroundTransparency = (inverse and 1 or 0) end end)
					end

					numberLine.InputBegan:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseButton1 and #points < 20 then
							if Lib.CheckMouseInGui(envelopeDragTop) or Lib.CheckMouseInGui(envelopeDragBottom) then return end
							for i,v in pairs(points) do
								if Lib.CheckMouseInGui(v[4].Select) then return end
							end
							local maxX = numberLine.AbsoluteSize.X-1
							local relativeX = mouse.X - numberLine.AbsolutePosition.X
							if relativeX < 0 then relativeX = 0 end
							if relativeX > maxX then relativeX = maxX end
							local maxY = numberLine.AbsoluteSize.Y-1
							local relativeY = mouse.Y - numberLine.AbsolutePosition.Y
							if relativeY < 0 then relativeY = 0 end
							if relativeY > maxY then relativeY = maxY end

							local raw = relativeX/maxX
							local newPoint = {10-(relativeY/maxY)*10,raw,0}
							newPoint[4] = placePoint(newPoint)
							table.insert(points,newPoint)
							redraw()
							buildSequence()
						end
					end)

					deleteButton.MouseButton1Click:Connect(function()
						if currentPoint and currentPoint ~= beginPoint and currentPoint ~= endPoint then
							for i,v in pairs(points) do
								if v == currentPoint then
									v[4]:Destroy()
									table.remove(points,i)
									break
								end
							end
							currentlySelected = nil
							redraw()
							buildSequence()
							updateInputs(points[1])
						end
					end)

					resetButton.MouseButton1Click:Connect(function()
						if resetSequence then
							newMt:SetSequence(resetSequence)
							buildSequence()
						end
					end)

					closeButton.MouseButton1Click:Connect(function()
						window:Close()
					end)

					buttonAnimations(deleteButton)
					buttonAnimations(resetButton)
					buttonAnimations(closeButton)

					placePoints()
					redraw()

					newMt.Show = function(self)
						window:Show()
					end

					return newMt
				end

				return {new = new}
			end)()

			Lib.ColorSequenceEditor = (function() -- TODO: Convert to newer class model
				local function new()
					local newMt = setmetatable({},{})
					newMt.OnSelect = Lib.Signal.new()
					newMt.OnCancel = Lib.Signal.new()
					newMt.OnPreview = Lib.Signal.new()
					newMt.OnPickColor = Lib.Signal.new()

					local guiContents = create({
						{1,"Frame",{BackgroundColor3=Color3.new(0.17647059261799,0.17647059261799,0.17647059261799),BorderSizePixel=0,ClipsDescendants=true,Name="Content",Position=UDim2.new(0,0,0,20),Size=UDim2.new(1,0,1,-20),}},
						{2,"Frame",{BackgroundColor3=Color3.new(0.17647059261799,0.17647059261799,0.17647059261799),BorderColor3=Color3.new(0.21568627655506,0.21568627655506,0.21568627655506),Name="ColorLine",Parent={1},Position=UDim2.new(0,10,0,5),Size=UDim2.new(1,-20,0,70),}},
						{3,"Frame",{BackgroundColor3=Color3.new(1,1,1),BorderSizePixel=0,Name="Gradient",Parent={2},Size=UDim2.new(1,0,1,0),}},
						{4,"UIGradient",{Parent={3},}},
						{5,"Frame",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderSizePixel=0,Name="Arrows",Parent={1},Position=UDim2.new(0,1,0,73),Size=UDim2.new(1,-2,0,16),}},
						{6,"Frame",{BackgroundColor3=Color3.new(0,0,0),BackgroundTransparency=0.5,BorderSizePixel=0,Name="Cursor",Parent={1},Position=UDim2.new(0,10,0,0),Size=UDim2.new(0,1,0,80),}},
						{7,"Frame",{BackgroundColor3=Color3.new(0.14901961386204,0.14901961386204,0.14901961386204),BorderColor3=Color3.new(0.12549020349979,0.12549020349979,0.12549020349979),Name="Time",Parent={1},Position=UDim2.new(0,40,0,95),Size=UDim2.new(0,100,0,20),}},
						{8,"TextBox",{BackgroundColor3=Color3.new(0.25098040699959,0.25098040699959,0.25098040699959),BackgroundTransparency=1,BorderColor3=Color3.new(0.37647062540054,0.37647062540054,0.37647062540054),ClipsDescendants=true,Font=3,Name="Input",Parent={7},Position=UDim2.new(0,2,0,0),Size=UDim2.new(0,98,0,20),Text="0",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextSize=14,TextXAlignment=0,}},
						{9,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Title",Parent={7},Position=UDim2.new(0,-40,0,0),Size=UDim2.new(0,34,1,0),Text="Time",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextSize=14,TextXAlignment=1,}},
						{10,"Frame",{BackgroundColor3=Color3.new(1,1,1),BorderColor3=Color3.new(0.21568627655506,0.21568627655506,0.21568627655506),Name="ColorBox",Parent={1},Position=UDim2.new(0,220,0,95),Size=UDim2.new(0,20,0,20),}},
						{11,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Title",Parent={10},Position=UDim2.new(0,-40,0,0),Size=UDim2.new(0,34,1,0),Text="Color",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextSize=14,TextXAlignment=1,}},
						{12,"TextButton",{AutoButtonColor=false,BackgroundColor3=Color3.new(0.2352941185236,0.2352941185236,0.2352941185236),BorderColor3=Color3.new(0.21568627655506,0.21568627655506,0.21568627655506),BorderSizePixel=0,Font=3,Name="Close",Parent={1},Position=UDim2.new(1,-90,0,95),Size=UDim2.new(0,80,0,20),Text="Close",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextSize=14,}},
						{13,"TextButton",{AutoButtonColor=false,BackgroundColor3=Color3.new(0.2352941185236,0.2352941185236,0.2352941185236),BorderColor3=Color3.new(0.21568627655506,0.21568627655506,0.21568627655506),BorderSizePixel=0,Font=3,Name="Reset",Parent={1},Position=UDim2.new(1,-180,0,95),Size=UDim2.new(0,80,0,20),Text="Reset",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextSize=14,}},
						{14,"TextButton",{AutoButtonColor=false,BackgroundColor3=Color3.new(0.2352941185236,0.2352941185236,0.2352941185236),BorderColor3=Color3.new(0.21568627655506,0.21568627655506,0.21568627655506),BorderSizePixel=0,Font=3,Name="Delete",Parent={1},Position=UDim2.new(0,280,0,95),Size=UDim2.new(0,80,0,20),Text="Delete",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextSize=14,}},
						{15,"Frame",{BackgroundTransparency=1,Name="Arrow",Parent={1},Size=UDim2.new(0,16,0,16),Visible=false,}},
						{16,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={15},Position=UDim2.new(0,8,0,3),Size=UDim2.new(0,1,0,2),}},
						{17,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={15},Position=UDim2.new(0,7,0,5),Size=UDim2.new(0,3,0,2),}},
						{18,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={15},Position=UDim2.new(0,6,0,7),Size=UDim2.new(0,5,0,2),}},
						{19,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={15},Position=UDim2.new(0,5,0,9),Size=UDim2.new(0,7,0,2),}},
						{20,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={15},Position=UDim2.new(0,4,0,11),Size=UDim2.new(0,9,0,2),}},
					})
					local window = Lib.Window.new()
					window.Resizable = false
					window:Resize(650,150)
					window:SetTitle("ColorSequence Editor")
					newMt.Window = window
					newMt.Gui = window.Gui
					for i,v in pairs(guiContents:GetChildren()) do
						v.Parent = window.GuiElems.Content
					end
					local gui = window.Gui
					local pickerGui = gui.Main
					local pickerTopBar = pickerGui.TopBar
					local pickerFrame = pickerGui.Content
					local colorLine = pickerFrame.ColorLine
					local gradient = colorLine.Gradient.UIGradient
					local arrowFrame = pickerFrame.Arrows
					local arrow = pickerFrame.Arrow
					local cursor = pickerFrame.Cursor
					local timeBox = pickerFrame.Time.Input
					local colorBox = pickerFrame.ColorBox
					local deleteButton = pickerFrame.Delete
					local resetButton = pickerFrame.Reset
					local closeButton = pickerFrame.Close
					local topClose = pickerTopBar.Close

					local user = game:GetService("UserInputService")
					local mouse = game:GetService("Players").LocalPlayer:GetMouse()

					local colors = {{Color3.new(1,0,1),0},{Color3.new(0.2,0.9,0.2),0.2},{Color3.new(0.4,0.5,0.9),0.7},{Color3.new(0.6,1,1),1}}
					local resetSequence = nil

					local beginPoint = colors[1]
					local endPoint = colors[#colors]

					local currentlySelected = nil
					local currentPoint = nil

					local sequenceLine = Instance.new("Frame")
					sequenceLine.BorderSizePixel = 0
					sequenceLine.Size = UDim2.new(0,1,1,0)

					newMt.Sequence = ColorSequence.new(Color3.new(1,1,1))
					local function buildSequence(noupdate)
						local newPoints = {}
						table.sort(colors,function(a,b) return a[2] < b[2] end)
						for i,v in pairs(colors) do
							table.insert(newPoints,ColorSequenceKeypoint.new(v[2],v[1]))
						end
						newMt.Sequence = ColorSequence.new(newPoints)
						if not noupdate then newMt.OnSelect:Fire(newMt.Sequence) end
					end

					local function round(num,places)
						local multi = 10^places
						return math.floor(num*multi + 0.5)/multi
					end

					local function updateInputs(point)
						if point then
							currentPoint = point
							local raw = point[2]
							timeBox.Text = round(raw,(raw < 0.01 and 5) or (raw < 0.1 and 4) or 3)
							colorBox.BackgroundColor3 = point[1]
						end
					end

					local function placeArrow(ind,point)
						local newArrow = arrow:Clone()
						newArrow.Position = UDim2.new(0,ind-1,0,0)
						newArrow.Visible = true
						newArrow.Parent = arrowFrame

						newArrow.InputBegan:Connect(function(input)
							if input.UserInputType == Enum.UserInputType.MouseMovement then
								cursor.Visible = true
								cursor.Position = UDim2.new(0,9 + newArrow.Position.X.Offset,0,0)
							end
							if input.UserInputType == Enum.UserInputType.MouseButton1 then
								updateInputs(point)
								if point == beginPoint or point == endPoint or currentlySelected then return end

								local mouseEvent,releaseEvent
								currentlySelected = true

								releaseEvent = user.InputEnded:Connect(function(input)
									if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end
									mouseEvent:Disconnect()
									releaseEvent:Disconnect()
									currentlySelected = nil
									cursor.Visible = false
								end)

								mouseEvent = user.InputChanged:Connect(function(input)
									if input.UserInputType == Enum.UserInputType.MouseMovement then
										local maxSize = colorLine.AbsoluteSize.X-1
										local relativeX = mouse.X - colorLine.AbsolutePosition.X
										if relativeX < 0 then relativeX = 0 end
										if relativeX > maxSize then relativeX = maxSize end
										local raw = relativeX/maxSize
										point[2] = relativeX/maxSize
										updateInputs(point)
										cursor.Visible = true
										cursor.Position = UDim2.new(0,9 + newArrow.Position.X.Offset,0,0)
										buildSequence()
										newMt:Redraw()
									end
								end)
							end
						end)

						newArrow.InputEnded:Connect(function(input)
							if input.UserInputType == Enum.UserInputType.MouseMovement then
								cursor.Visible = false
							end
						end)

						return newArrow
					end

					local function placeArrows()
						for i,v in pairs(colors) do
							v[3] = placeArrow(math.floor((colorLine.AbsoluteSize.X-1) * v[2]) + 1,v)
						end
					end

					local function redraw(self)
						gradient.Color = newMt.Sequence or ColorSequence.new(Color3.new(1,1,1))

						for i = 2,#colors do
							local nextColor = colors[i]
							local endPos = math.floor((colorLine.AbsoluteSize.X-1) * nextColor[2]) + 1
							nextColor[3].Position = UDim2.new(0,endPos,0,0)
						end		
					end
					newMt.Redraw = redraw

					local function loadSequence(self,seq)
						resetSequence = seq
						for i,v in pairs(colors) do if v[3] then v[3]:Destroy() end end
						colors = {}
						currentlySelected = nil
						for i,v in pairs(seq.Keypoints) do
							local newPoint = {v.Value,v.Time}
							newPoint[3] = placeArrow(v.Time,newPoint)
							table.insert(colors,newPoint)
						end
						beginPoint = colors[1]
						endPoint = colors[#colors]
						currentlySelected = nil
						updateInputs(colors[1])
						buildSequence(true)
						redraw()
					end
					newMt.SetSequence = loadSequence

					local function buttonAnimations(button,inverse)
						button.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then button.BackgroundTransparency = (inverse and 0.5 or 0.4) end end)
						button.InputEnded:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then button.BackgroundTransparency = (inverse and 1 or 0) end end)
					end

					colorLine.InputBegan:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseButton1 and #colors < 20 then
							local maxSize = colorLine.AbsoluteSize.X-1
							local relativeX = mouse.X - colorLine.AbsolutePosition.X
							if relativeX < 0 then relativeX = 0 end
							if relativeX > maxSize then relativeX = maxSize end

							local raw = relativeX/maxSize
							local fromColor = nil
							local toColor = nil
							for i,col in pairs(colors) do
								if col[2] >= raw then
									fromColor = colors[math.max(i-1,1)]
									toColor = colors[i]
									break
								end
							end
							local lerpColor = fromColor[1]:lerp(toColor[1],(raw-fromColor[2])/(toColor[2]-fromColor[2]))
							local newPoint = {lerpColor,raw}
							newPoint[3] = placeArrow(newPoint[2],newPoint)
							table.insert(colors,newPoint)
							updateInputs(newPoint)
							buildSequence()
							redraw()
						end
					end)

					colorLine.InputChanged:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseMovement then
							local maxSize = colorLine.AbsoluteSize.X-1
							local relativeX = mouse.X - colorLine.AbsolutePosition.X
							if relativeX < 0 then relativeX = 0 end
							if relativeX > maxSize then relativeX = maxSize end
							cursor.Visible = true
							cursor.Position = UDim2.new(0,10 + relativeX,0,0)
						end
					end)

					colorLine.InputEnded:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseMovement then
							local inArrow = false
							for i,v in pairs(colors) do
								if Lib.CheckMouseInGui(v[3]) then
									inArrow = v[3]
								end
							end
							cursor.Visible = inArrow and true or false
							if inArrow then cursor.Position = UDim2.new(0,9 + inArrow.Position.X.Offset,0,0) end
						end
					end)

					timeBox:GetPropertyChangedSignal("Text"):Connect(function()
						local point = currentPoint
						local num = tonumber(timeBox.Text)
						if point and num and point ~= beginPoint and point ~= endPoint then
							num = math.clamp(num,0,1)
							point[2] = num
							buildSequence()
							redraw()
						end
					end)

					colorBox.InputBegan:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseButton1 then
							local editor = newMt.ColorPicker
							if not editor then
								editor = Lib.ColorPicker.new()
								editor.Window:SetTitle("ColorSequence Color Picker")

								editor.OnSelect:Connect(function(col)
									if currentPoint then
										currentPoint[1] = col
									end
									buildSequence()
									redraw()
								end)

								newMt.ColorPicker = editor
							end

							editor.Window:ShowAndFocus()
						end
					end)

					deleteButton.MouseButton1Click:Connect(function()
						if currentPoint and currentPoint ~= beginPoint and currentPoint ~= endPoint then
							for i,v in pairs(colors) do
								if v == currentPoint then
									v[3]:Destroy()
									table.remove(colors,i)
									break
								end
							end
							currentlySelected = nil
							updateInputs(colors[1])
							buildSequence()
							redraw()
						end
					end)

					resetButton.MouseButton1Click:Connect(function()
						if resetSequence then
							newMt:SetSequence(resetSequence)
						end
					end)

					closeButton.MouseButton1Click:Connect(function()
						window:Close()
					end)

					topClose.MouseButton1Click:Connect(function()
						window:Close()
					end)

					buttonAnimations(deleteButton)
					buttonAnimations(resetButton)
					buttonAnimations(closeButton)

					placeArrows()
					redraw()

					newMt.Show = function(self)
						window:Show()
					end

					return newMt
				end

				return {new = new}
			end)()

			Lib.ViewportTextBox = (function()
				local textService = game:GetService("TextService")

				local props = {
					OffsetX = 0,
					TextBox = PH,
					CursorPos = -1,
					Gui = PH,
					View = PH
				}
				local funcs = {}
				funcs.Update = function(self)
					local cursorPos = self.CursorPos or -1
					local text = self.TextBox.Text
					if text == "" then self.TextBox.Position = UDim2.new(0,0,0,0) return end
					if cursorPos == -1 then return end

					local cursorText = text:sub(1,cursorPos-1)
					local pos = nil
					local leftEnd = -self.TextBox.Position.X.Offset
					local rightEnd = leftEnd + self.View.AbsoluteSize.X

					local totalTextSize = textService:GetTextSize(text,self.TextBox.TextSize,self.TextBox.Font,Vector2.new(999999999,100)).X
					local cursorTextSize = textService:GetTextSize(cursorText,self.TextBox.TextSize,self.TextBox.Font,Vector2.new(999999999,100)).X

					if cursorTextSize > rightEnd then
						pos = math.max(-1,cursorTextSize - self.View.AbsoluteSize.X + 2)
					elseif cursorTextSize < leftEnd then
						pos = math.max(-1,cursorTextSize-2)
					elseif totalTextSize < rightEnd then
						pos = math.max(-1,totalTextSize - self.View.AbsoluteSize.X + 2)
					end

					if pos then
						self.TextBox.Position = UDim2.new(0,-pos,0,0)
						self.TextBox.Size = UDim2.new(1,pos,1,0)
					end
				end

				funcs.GetText = function(self)
					return self.TextBox.Text
				end

				funcs.SetText = function(self,text)
					self.TextBox.Text = text
				end

				local mt = getGuiMT(props,funcs)

				local function convert(textbox)
					local obj = initObj(props,mt)

					local view = Instance.new("Frame")
					view.BackgroundTransparency = textbox.BackgroundTransparency
					view.BackgroundColor3 = textbox.BackgroundColor3
					view.BorderSizePixel = textbox.BorderSizePixel
					view.BorderColor3 = textbox.BorderColor3
					view.Position = textbox.Position
					view.Size = textbox.Size
					view.ClipsDescendants = true
					view.Name = textbox.Name
					textbox.BackgroundTransparency = 1
					textbox.Position = UDim2.new(0,0,0,0)
					textbox.Size = UDim2.new(1,0,1,0)
					textbox.TextXAlignment = Enum.TextXAlignment.Left
					textbox.Name = "Input"

					obj.TextBox = textbox
					obj.View = view
					obj.Gui = view

					textbox.Changed:Connect(function(prop)
						if prop == "Text" or prop == "CursorPosition" or prop == "AbsoluteSize" then
							local cursorPos = obj.TextBox.CursorPosition
							if cursorPos ~= -1 then obj.CursorPos = cursorPos end
							obj:Update()
						end
					end)

					obj:Update()

					view.Parent = textbox.Parent
					textbox.Parent = view

					return obj
				end

				local function new()
					local textBox = Instance.new("TextBox")
					textBox.Size = UDim2.new(0,100,0,20)
					textBox.BackgroundColor3 = Settings.Theme.TextBox
					textBox.BorderColor3 = Settings.Theme.Outline3
					textBox.ClearTextOnFocus = false
					textBox.TextColor3 = Settings.Theme.Text
					textBox.Font = Enum.Font.SourceSans
					textBox.TextSize = 14
					textBox.Text = ""
					return convert(textBox)
				end

				return {new = new, convert = convert}
			end)()

			Lib.Label = (function()
				local props,funcs = {},{}

				local mt = getGuiMT(props,funcs)

				local function new()
					local label = Instance.new("TextLabel")
					label.BackgroundTransparency = 1
					label.TextXAlignment = Enum.TextXAlignment.Left
					label.TextColor3 = Settings.Theme.Text
					label.TextTransparency = 0.1
					label.Size = UDim2.new(0,100,0,20)
					label.Font = Enum.Font.SourceSans
					label.TextSize = 14

					local obj = setmetatable({
						Gui = label
					},mt)
					return obj
				end

				return {new = new}
			end)()

			Lib.Frame = (function()
				local props,funcs = {},{}

				local mt = getGuiMT(props,funcs)

				local function new()
					local fr = Instance.new("Frame")
					fr.BackgroundColor3 = Settings.Theme.Main1
					fr.BorderColor3 = Settings.Theme.Outline1
					fr.Size = UDim2.new(0,50,0,50)

					local obj = setmetatable({
						Gui = fr
					},mt)
					return obj
				end

				return {new = new}
			end)()

			Lib.Button = (function()
				local props = {
					Gui = PH,
					Anim = PH,
					Disabled = false,
					OnClick = SIGNAL,
					OnDown = SIGNAL,
					OnUp = SIGNAL,
					AllowedButtons = {1}
				}
				local funcs = {}
				local tableFind = table.find

				funcs.Trigger = function(self,event,button)
					if not self.Disabled and tableFind(self.AllowedButtons,button) then
						self["On"..event]:Fire(button)
					end
				end

				funcs.SetDisabled = function(self,dis)
					self.Disabled = dis

					if dis then
						self.Anim:Disable()
						self.Gui.TextTransparency = 0.5
					else
						self.Anim.Enable()
						self.Gui.TextTransparency = 0
					end
				end

				local mt = getGuiMT(props,funcs)

				local function new()
					local b = Instance.new("TextButton")
					b.AutoButtonColor = false
					b.TextColor3 = Settings.Theme.Text
					b.TextTransparency = 0.1
					b.Size = UDim2.new(0,100,0,20)
					b.Font = Enum.Font.SourceSans
					b.TextSize = 14
					b.BackgroundColor3 = Settings.Theme.Button
					b.BorderColor3 = Settings.Theme.Outline2

					local obj = initObj(props,mt)
					obj.Gui = b
					obj.Anim = Lib.ButtonAnim(b,{Mode = 2, StartColor = Settings.Theme.Button, HoverColor = Settings.Theme.ButtonHover, PressColor = Settings.Theme.ButtonPress, OutlineColor = Settings.Theme.Outline2})

					b.MouseButton1Click:Connect(function() obj:Trigger("Click",1) end)
					b.MouseButton1Down:Connect(function() obj:Trigger("Down",1) end)
					b.MouseButton1Up:Connect(function() obj:Trigger("Up",1) end)

					b.MouseButton2Click:Connect(function() obj:Trigger("Click",2) end)
					b.MouseButton2Down:Connect(function() obj:Trigger("Down",2) end)
					b.MouseButton2Up:Connect(function() obj:Trigger("Up",2) end)

					return obj
				end

				return {new = new}
			end)()

			Lib.DropDown = (function()
				local props = {
					Gui = PH,
					Anim = PH,
					Context = PH,
					Selected = PH,
					Disabled = false,
					CanBeEmpty = true,
					Options = {},
					GuiElems = {},
					OnSelect = SIGNAL
				}
				local funcs = {}

				funcs.Update = function(self)
					local options = self.Options

					if #options > 0 then
						if not self.Selected then
							if not self.CanBeEmpty then
								self.Selected = options[1]
								self.GuiElems.Label.Text = options[1]
							else
								self.GuiElems.Label.Text = "- Select -"
							end
						else
							self.GuiElems.Label.Text = self.Selected
						end
					else
						self.GuiElems.Label.Text = "- Select -"
					end
				end

				funcs.ShowOptions = function(self)
					local context = self.Context

					context.Width = self.Gui.AbsoluteSize.X
					context.ReverseYOffset = self.Gui.AbsoluteSize.Y
					context:Show(self.Gui.AbsolutePosition.X, self.Gui.AbsolutePosition.Y + context.ReverseYOffset)
				end

				funcs.SetOptions = function(self,opts)
					self.Options = opts

					local context = self.Context
					local options = self.Options
					context:Clear()

					local onClick = function(option) self.Selected = option self.OnSelect:Fire(option) self:Update() end

					if self.CanBeEmpty then
						context:Add({Name = "- Select -", OnClick = function() self.Selected = nil self.OnSelect:Fire(nil) self:Update() end})
					end

					for i = 1,#options do
						context:Add({Name = options[i], OnClick = onClick})
					end

					self:Update()
				end

				funcs.SetSelected = function(self,opt)
					self.Selected = type(opt) == "number" and self.Options[opt] or opt
					self:Update()
				end

				local mt = getGuiMT(props,funcs)

				local function new()
					local f = Instance.new("TextButton")
					f.AutoButtonColor = false
					f.Text = ""
					f.Size = UDim2.new(0,100,0,20)
					f.BackgroundColor3 = Settings.Theme.TextBox
					f.BorderColor3 = Settings.Theme.Outline3

					local label = Lib.Label.new()
					label.Position = UDim2.new(0,2,0,0)
					label.Size = UDim2.new(1,-22,1,0)
					label.TextTruncate = Enum.TextTruncate.AtEnd
					label.Parent = f
					local arrow = create({
						{1,"Frame",{BackgroundTransparency=1,Name="EnumArrow",Position=UDim2.new(1,-16,0,2),Size=UDim2.new(0,16,0,16),}},
						{2,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={1},Position=UDim2.new(0,8,0,9),Size=UDim2.new(0,1,0,1),}},
						{3,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={1},Position=UDim2.new(0,7,0,8),Size=UDim2.new(0,3,0,1),}},
						{4,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={1},Position=UDim2.new(0,6,0,7),Size=UDim2.new(0,5,0,1),}},
					})
					arrow.Parent = f

					local obj = initObj(props,mt)
					obj.Gui = f
					obj.Anim = Lib.ButtonAnim(f,{Mode = 2, StartColor = Settings.Theme.TextBox, LerpTo = Settings.Theme.Button, LerpDelta = 0.15})
					obj.Context = Lib.ContextMenu.new()
					obj.Context.Iconless = true
					obj.Context.MaxHeight = 200
					obj.Selected = nil
					obj.GuiElems = {Label = label}
					f.MouseButton1Down:Connect(function() obj:ShowOptions() end)
					obj:Update()
					return obj
				end

				return {new = new}
			end)()

			Lib.ClickSystem = (function()
				local props = {
					LastItem = PH,
					OnDown = SIGNAL,
					OnRelease = SIGNAL,
					AllowedButtons = {1},
					Combo = 0,
					MaxCombo = 2,
					ComboTime = 0.5,
					Items = {},
					ItemCons = {},
					ClickId = -1,
					LastButton = ""
				}
				local funcs = {}
				local tostring = tostring

				local disconnect = function(con)
					local pos = table.find(con.Signal.Connections,con)
					if pos then table.remove(con.Signal.Connections,pos) end
				end

				funcs.Trigger = function(self,item,button)
					if table.find(self.AllowedButtons,button) then
						if self.LastButton ~= button or self.LastItem ~= item or self.Combo == self.MaxCombo or tick() - self.ClickId > self.ComboTime then
							self.Combo = 0
							self.LastButton = button
							self.LastItem = item
						end
						self.Combo = self.Combo + 1
						self.ClickId = tick()

						local release
						release = service.UserInputService.InputEnded:Connect(function(input)
							if input.UserInputType == Enum.UserInputType["MouseButton"..button] then
								release:Disconnect()
								if Lib.CheckMouseInGui(item) and self.LastButton == button and self.LastItem == item then
									self["OnRelease"]:Fire(item,self.Combo,button)
								end
							end
						end)

						self["OnDown"]:Fire(item,self.Combo,button)
					end
				end

				funcs.Add = function(self,item)
					if table.find(self.Items,item) then return end

					local cons = {}
					cons[1] = item.MouseButton1Down:Connect(function() self:Trigger(item,1) end)
					cons[2] = item.MouseButton2Down:Connect(function() self:Trigger(item,2) end)

					self.ItemCons[item] = cons
					self.Items[#self.Items+1] = item
				end

				funcs.Remove = function(self,item)
					local ind = table.find(self.Items,item)
					if not ind then return end

					for i,v in pairs(self.ItemCons[item]) do
						v:Disconnect()
					end
					self.ItemCons[item] = nil
					table.remove(self.Items,ind)
				end

				local mt = {__index = funcs}

				local function new()
					local obj = initObj(props,mt)

					return obj
				end

				return {new = new}
			end)()

			return Lib
		end

		-- TODO: Remove when open source
		if gethsfuncs then
			_G.moduleData = {InitDeps = initDeps, InitAfterMain = initAfterMain, Main = main}
		else
			return {InitDeps = initDeps, InitAfterMain = initAfterMain, Main = main}
		end
	end,
	["Properties"] = function()
--[[
	Properties App Module
	
	The main properties interface
]]

		-- Common Locals
		local Main,Lib,Apps,Settings -- Main Containers
		local Explorer, Properties, ScriptViewer, Notebook -- Major Apps
		local API,RMD,env,service,plr,create,createSimple -- Main Locals

		local function initDeps(data)
			Main = data.Main
			Lib = data.Lib
			Apps = data.Apps
			Settings = data.Settings

			API = data.API
			RMD = data.RMD
			env = data.env
			service = data.service
			plr = data.plr
			create = data.create
			createSimple = data.createSimple
		end

		local function initAfterMain()
			Explorer = Apps.Explorer
			Properties = Apps.Properties
			ScriptViewer = Apps.ScriptViewer
			Notebook = Apps.Notebook
		end

		local function main()
			local Properties = {}

			local window, toolBar, propsFrame
			local scrollV, scrollH
			local categoryOrder
			local props,viewList,expanded,indexableProps,propEntries,autoUpdateObjs = {},{},{},{},{},{}
			local inputBox,inputTextBox,inputProp
			local checkboxes,propCons = {},{}
			local table,string = table,string
			local getPropChangedSignal = game.GetPropertyChangedSignal
			local getAttributeChangedSignal = game.GetAttributeChangedSignal
			local isa = game.IsA
			local getAttribute = game.GetAttribute
			local setAttribute = game.SetAttribute

			Properties.GuiElems = {}
			Properties.Index = 0
			Properties.ViewWidth = 0
			Properties.MinInputWidth = 100
			Properties.EntryIndent = 16
			Properties.EntryOffset = 4
			Properties.NameWidthCache = {}
			Properties.SubPropCache = {}
			Properties.ClassLists = {}
			Properties.SearchText = ""

			Properties.AddAttributeProp = {Category = "Attributes", Class = "", Name = "", SpecialRow = "AddAttribute", Tags = {}}
			Properties.SoundPreviewProp = {Category = "Data", ValueType = {Name = "SoundPlayer"}, Class = "Sound", Name = "Preview", Tags = {}}

			Properties.IgnoreProps = {
				["DataModel"] = {
					["PrivateServerId"] = true,
					["PrivateServerOwnerId"] = true,
					["VIPServerId"] = true,
					["VIPServerOwnerId"] = true
				}
			}

			Properties.ExpandableTypes = {
				["Vector2"] = true,
				["Vector3"] = true,
				["UDim"] = true,
				["UDim2"] = true,
				["CFrame"] = true,
				["Rect"] = true,
				["PhysicalProperties"] = true,
				["Ray"] = true,
				["NumberRange"] = true,
				["Faces"] = true,
				["Axes"] = true,
			}

			Properties.ExpandableProps = {
				["Sound.SoundId"] = true
			}

			Properties.CollapsedCategories = {
				["Surface Inputs"] = true,
				["Surface"] = true
			}

			Properties.ConflictSubProps = {
				["Vector2"] = {"X","Y"},
				["Vector3"] = {"X","Y","Z"},
				["UDim"] = {"Scale","Offset"},
				["UDim2"] = {"X","X.Scale","X.Offset","Y","Y.Scale","Y.Offset"},
				["CFrame"] = {"Position","Position.X","Position.Y","Position.Z",
					"RightVector","RightVector.X","RightVector.Y","RightVector.Z",
					"UpVector","UpVector.X","UpVector.Y","UpVector.Z",
					"LookVector","LookVector.X","LookVector.Y","LookVector.Z"},
				["Rect"] = {"Min.X","Min.Y","Max.X","Max.Y"},
				["PhysicalProperties"] = {"Density","Elasticity","ElasticityWeight","Friction","FrictionWeight"},
				["Ray"] = {"Origin","Origin.X","Origin.Y","Origin.Z","Direction","Direction.X","Direction.Y","Direction.Z"},
				["NumberRange"] = {"Min","Max"},
				["Faces"] = {"Back","Bottom","Front","Left","Right","Top"},
				["Axes"] = {"X","Y","Z"}
			}

			Properties.ConflictIgnore = {
				["BasePart"] = {
					["ResizableFaces"] = true
				}
			}

			Properties.RoundableTypes = {
				["float"] = true,
				["double"] = true,
				["Color3"] = true,
				["UDim"] = true,
				["UDim2"] = true,
				["Vector2"] = true,
				["Vector3"] = true,
				["NumberRange"] = true,
				["Rect"] = true,
				["NumberSequence"] = true,
				["ColorSequence"] = true,
				["Ray"] = true,
				["CFrame"] = true
			}

			Properties.TypeNameConvert = {
				["number"] = "double",
				["boolean"] = "bool"
			}

			Properties.ToNumberTypes = {
				["int"] = true,
				["int64"] = true,
				["float"] = true,
				["double"] = true
			}

			Properties.DefaultPropValue = {
				string = "",
				bool = false,
				double = 0,
				UDim = UDim.new(0,0),
				UDim2 = UDim2.new(0,0,0,0),
				BrickColor = BrickColor.new("Medium stone grey"),
				Color3 = Color3.new(1,1,1),
				Vector2 = Vector2.new(0,0),
				Vector3 = Vector3.new(0,0,0),
				NumberSequence = NumberSequence.new(1),
				ColorSequence = ColorSequence.new(Color3.new(1,1,1)),
				NumberRange = NumberRange.new(0),
				Rect = Rect.new(0,0,0,0)
			}

			Properties.AllowedAttributeTypes = {"string","boolean","number","UDim","UDim2","BrickColor","Color3","Vector2","Vector3","NumberSequence","ColorSequence","NumberRange","Rect"}

			Properties.StringToValue = function(prop,str)
				local typeData = prop.ValueType
				local typeName = typeData.Name

				if typeName == "string" or typeName == "Content" then
					return str
				elseif Properties.ToNumberTypes[typeName] then
					return tonumber(str)
				elseif typeName == "Vector2" then
					local vals = str:split(",")
					local x,y = tonumber(vals[1]),tonumber(vals[2])
					if x and y and #vals >= 2 then return Vector2.new(x,y) end
				elseif typeName == "Vector3" then
					local vals = str:split(",")
					local x,y,z = tonumber(vals[1]),tonumber(vals[2]),tonumber(vals[3])
					if x and y and z and #vals >= 3 then return Vector3.new(x,y,z) end
				elseif typeName == "UDim" then
					local vals = str:split(",")
					local scale,offset = tonumber(vals[1]),tonumber(vals[2])
					if scale and offset and #vals >= 2 then return UDim.new(scale,offset) end
				elseif typeName == "UDim2" then
					local vals = str:gsub("[{}]",""):split(",")
					local xScale,xOffset,yScale,yOffset = tonumber(vals[1]),tonumber(vals[2]),tonumber(vals[3]),tonumber(vals[4])
					if xScale and xOffset and yScale and yOffset and #vals >= 4 then return UDim2.new(xScale,xOffset,yScale,yOffset) end
				elseif typeName == "CFrame" then
					local vals = str:split(",")
					local s,result = pcall(CFrame.new,unpack(vals))
					if s and #vals >= 12 then return result end
				elseif typeName == "Rect" then
					local vals = str:split(",")
					local s,result = pcall(Rect.new,unpack(vals))
					if s and #vals >= 4 then return result end
				elseif typeName == "Ray" then
					local vals = str:gsub("[{}]",""):split(",")
					local s,origin = pcall(Vector3.new,unpack(vals,1,3))
					local s2,direction = pcall(Vector3.new,unpack(vals,4,6))
					if s and s2 and #vals >= 6 then return Ray.new(origin,direction) end
				elseif typeName == "NumberRange" then
					local vals = str:split(",")
					local s,result = pcall(NumberRange.new,unpack(vals))
					if s and #vals >= 1 then return result end
				elseif typeName == "Color3" then
					local vals = str:gsub("[{}]",""):split(",")
					local s,result = pcall(Color3.fromRGB,unpack(vals))
					if s and #vals >= 3 then return result end
				end

				return nil
			end

			Properties.ValueToString = function(prop,val)
				local typeData = prop.ValueType
				local typeName = typeData.Name

				if typeName == "Color3" then
					return Lib.ColorToBytes(val)
				elseif typeName == "NumberRange" then
					return val.Min..", "..val.Max
				end

				return tostring(val)
			end

			Properties.GetIndexableProps = function(obj,classData)
				if not Main.Elevated then
					if not pcall(function() return obj.ClassName end) then return nil end
				end

				local ignoreProps = Properties.IgnoreProps[classData.Name] or {}

				local result = {}
				local count = 1
				local props = classData.Properties
				for i = 1,#props do
					local prop = props[i]
					if not ignoreProps[prop.Name] then
						local s = pcall(function() return obj[prop.Name] end)
						if s then
							result[count] = prop
							count = count + 1
						end
					end
				end

				return result
			end

			Properties.FindFirstObjWhichIsA = function(class)
				local classList = Properties.ClassLists[class] or {}
				if classList and #classList > 0 then
					return classList[1]
				end

				return nil
			end

			Properties.ComputeConflicts = function(p)
				local maxConflictCheck = Settings.Properties.MaxConflictCheck
				local sList = Explorer.Selection.List
				local classLists = Properties.ClassLists
				local stringSplit = string.split
				local t_clear = table.clear
				local conflictIgnore = Properties.ConflictIgnore
				local conflictMap = {}
				local propList = p and {p} or props

				if p then
					local gName = p.Class.."."..p.Name
					autoUpdateObjs[gName] = nil
					local subProps = Properties.ConflictSubProps[p.ValueType.Name] or {}
					for i = 1,#subProps do
						autoUpdateObjs[gName.."."..subProps[i]] = nil
					end
				else
					table.clear(autoUpdateObjs)
				end

				if #sList > 0 then
					for i = 1,#propList do
						local prop = propList[i]
						local propName,propClass = prop.Name,prop.Class
						local typeData = prop.RootType or prop.ValueType
						local typeName = typeData.Name
						local attributeName = prop.AttributeName
						local gName = propClass.."."..propName

						local checked = 0
						local subProps = Properties.ConflictSubProps[typeName] or {}
						local subPropCount = #subProps
						local toCheck = subPropCount + 1
						local conflictsFound = 0
						local indexNames = {}
						local ignored = conflictIgnore[propClass] and conflictIgnore[propClass][propName]
						local truthyCheck = (typeName == "PhysicalProperties")
						local isAttribute = prop.IsAttribute
						local isMultiType = prop.MultiType

						t_clear(conflictMap)

						if not isMultiType then
							local firstVal,firstObj,firstSet
							local classList = classLists[prop.Class] or {}
							for c = 1,#classList do
								local obj = classList[c]
								if not firstSet then
									if isAttribute then
										firstVal = getAttribute(obj,attributeName)
										if firstVal ~= nil then
											firstObj = obj
											firstSet = true
										end
									else
										firstVal = obj[propName]
										firstObj = obj
										firstSet = true
									end
									if ignored then break end
								else
									local propVal,skip
									if isAttribute then
										propVal = getAttribute(obj,attributeName)
										if propVal == nil then skip = true end
									else
										propVal = obj[propName]
									end

									if not skip then
										if not conflictMap[1] then
											if truthyCheck then
												if (firstVal and true or false) ~= (propVal and true or false) then
													conflictMap[1] = true
													conflictsFound = conflictsFound + 1
												end
											elseif firstVal ~= propVal then
												conflictMap[1] = true
												conflictsFound = conflictsFound + 1
											end
										end

										if subPropCount > 0 then
											for sPropInd = 1,subPropCount do
												local indexes = indexNames[sPropInd]
												if not indexes then indexes = stringSplit(subProps[sPropInd],".") indexNames[sPropInd] = indexes end

												local firstValSub = firstVal
												local propValSub = propVal

												for j = 1,#indexes do
													if not firstValSub or not propValSub then break end -- PhysicalProperties
													local indexName = indexes[j]
													firstValSub = firstValSub[indexName]
													propValSub = propValSub[indexName]
												end

												local mapInd = sPropInd + 1
												if not conflictMap[mapInd] and firstValSub ~= propValSub then
													conflictMap[mapInd] = true
													conflictsFound = conflictsFound + 1
												end
											end
										end

										if conflictsFound == toCheck then break end
									end
								end

								checked = checked + 1
								if checked == maxConflictCheck then break end
							end

							if not conflictMap[1] then autoUpdateObjs[gName] = firstObj end
							for sPropInd = 1,subPropCount do
								if not conflictMap[sPropInd+1] then
									autoUpdateObjs[gName.."."..subProps[sPropInd]] = firstObj
								end
							end
						end
					end
				end

				if p then
					Properties.Refresh()
				end
			end

			-- Fetches the properties to be displayed based on the explorer selection
			Properties.ShowExplorerProps = function()
				local maxConflictCheck = Settings.Properties.MaxConflictCheck
				local sList = Explorer.Selection.List
				local foundClasses = {}
				local propCount = 1
				local elevated = Main.Elevated
				local showDeprecated,showHidden = Settings.Properties.ShowDeprecated,Settings.Properties.ShowHidden
				local Classes = API.Classes
				local classLists = {}
				local lower = string.lower
				local RMDCustomOrders = RMD.PropertyOrders
				local getAttributes = game.GetAttributes
				local maxAttrs = Settings.Properties.MaxAttributes
				local showingAttrs = Settings.Properties.ShowAttributes
				local foundAttrs = {}
				local attrCount = 0
				local typeof = typeof
				local typeNameConvert = Properties.TypeNameConvert

				table.clear(props)

				for i = 1,#sList do
					local node = sList[i]
					local obj = node.Obj
					local class = node.Class
					if not class then class = obj.ClassName node.Class = class end

					local apiClass = Classes[class]
					while apiClass do
						local APIClassName = apiClass.Name
						if not foundClasses[APIClassName] then
							local apiProps = indexableProps[APIClassName]
							if not apiProps then apiProps = Properties.GetIndexableProps(obj,apiClass) indexableProps[APIClassName] = apiProps end

							for i = 1,#apiProps do
								local prop = apiProps[i]
								local tags = prop.Tags
								if (not tags.Deprecated or showDeprecated) and (not tags.Hidden or showHidden) then
									props[propCount] = prop
									propCount = propCount + 1
								end
							end
							foundClasses[APIClassName] = true
						end

						local classList = classLists[APIClassName]
						if not classList then classList = {} classLists[APIClassName] = classList end
						classList[#classList+1] = obj

						apiClass = apiClass.Superclass
					end

					if showingAttrs and attrCount < maxAttrs then
						local attrs = getAttributes(obj)
						for name,val in pairs(attrs) do
							local typ = typeof(val)
							if not foundAttrs[name] then
								local category = (typ == "Instance" and "Class") or (typ == "EnumItem" and "Enum") or "Other"
								local valType = {Name = typeNameConvert[typ] or typ, Category = category}
								local attrProp = {IsAttribute = true, Name = "ATTR_"..name, AttributeName = name, DisplayName = name, Class = "Instance", ValueType = valType, Category = "Attributes", Tags = {}}
								props[propCount] = attrProp
								propCount = propCount + 1
								attrCount = attrCount + 1
								foundAttrs[name] = {typ,attrProp}
								if attrCount == maxAttrs then break end
							elseif foundAttrs[name][1] ~= typ then
								foundAttrs[name][2].MultiType = true
								foundAttrs[name][2].Tags.ReadOnly = true
								foundAttrs[name][2].ValueType = {Name = "string"}
							end
						end
					end
				end

				table.sort(props,function(a,b)
					if a.Category ~= b.Category then
						return (categoryOrder[a.Category] or 9999) < (categoryOrder[b.Category] or 9999)
					else
						local aOrder = (RMDCustomOrders[a.Class] and RMDCustomOrders[a.Class][a.Name]) or 9999999
						local bOrder = (RMDCustomOrders[b.Class] and RMDCustomOrders[b.Class][b.Name]) or 9999999
						if aOrder ~= bOrder then
							return aOrder < bOrder
						else
							return lower(a.Name) < lower(b.Name)
						end
					end
				end)

				-- Find conflicts and get auto-update instances
				Properties.ClassLists = classLists
				Properties.ComputeConflicts()
				--warn("CONFLICT",tick()-start)
				if #props > 0 then
					props[#props+1] = Properties.AddAttributeProp
				end

				Properties.Update()
				Properties.Refresh()
			end

			Properties.UpdateView = function()
				local maxEntries = math.ceil(propsFrame.AbsoluteSize.Y / 23)
				local maxX = propsFrame.AbsoluteSize.X
				local totalWidth = Properties.ViewWidth + Properties.MinInputWidth

				scrollV.VisibleSpace = maxEntries
				scrollV.TotalSpace = #viewList + 1
				scrollH.VisibleSpace = maxX
				scrollH.TotalSpace = totalWidth

				scrollV.Gui.Visible = #viewList + 1 > maxEntries
				scrollH.Gui.Visible = Settings.Properties.ScaleType == 0 and totalWidth > maxX

				local oldSize = propsFrame.Size
				propsFrame.Size = UDim2.new(1,(scrollV.Gui.Visible and -16 or 0),1,(scrollH.Gui.Visible and -39 or -23))
				if oldSize ~= propsFrame.Size then
					Properties.UpdateView()
				else
					scrollV:Update()
					scrollH:Update()

					if scrollV.Gui.Visible and scrollH.Gui.Visible then
						scrollV.Gui.Size = UDim2.new(0,16,1,-39)
						scrollH.Gui.Size = UDim2.new(1,-16,0,16)
						Properties.Window.GuiElems.Content.ScrollCorner.Visible = true
					else
						scrollV.Gui.Size = UDim2.new(0,16,1,-23)
						scrollH.Gui.Size = UDim2.new(1,0,0,16)
						Properties.Window.GuiElems.Content.ScrollCorner.Visible = false
					end

					Properties.Index = scrollV.Index
				end
			end

			Properties.MakeSubProp = function(prop,subName,valueType,displayName)
				local subProp = {}
				for i,v in pairs(prop) do
					subProp[i] = v
				end
				subProp.RootType = subProp.RootType or subProp.ValueType
				subProp.ValueType = valueType
				subProp.SubName = subProp.SubName and (subProp.SubName..subName) or subName
				subProp.DisplayName = displayName

				return subProp
			end

			Properties.GetExpandedProps = function(prop) -- TODO: Optimize using table
				local result = {}
				local typeData = prop.ValueType
				local typeName = typeData.Name
				local makeSubProp = Properties.MakeSubProp

				if typeName == "Vector2" then
					result[1] = makeSubProp(prop,".X",{Name = "float"})
					result[2] = makeSubProp(prop,".Y",{Name = "float"})
				elseif typeName == "Vector3" then
					result[1] = makeSubProp(prop,".X",{Name = "float"})
					result[2] = makeSubProp(prop,".Y",{Name = "float"})
					result[3] = makeSubProp(prop,".Z",{Name = "float"})
				elseif typeName == "CFrame" then
					result[1] = makeSubProp(prop,".Position",{Name = "Vector3"})
					result[2] = makeSubProp(prop,".RightVector",{Name = "Vector3"})
					result[3] = makeSubProp(prop,".UpVector",{Name = "Vector3"})
					result[4] = makeSubProp(prop,".LookVector",{Name = "Vector3"})
				elseif typeName == "UDim" then
					result[1] = makeSubProp(prop,".Scale",{Name = "float"})
					result[2] = makeSubProp(prop,".Offset",{Name = "int"})
				elseif typeName == "UDim2" then
					result[1] = makeSubProp(prop,".X",{Name = "UDim"})
					result[2] = makeSubProp(prop,".Y",{Name = "UDim"})
				elseif typeName == "Rect" then
					result[1] = makeSubProp(prop,".Min.X",{Name = "float"},"X0")
					result[2] = makeSubProp(prop,".Min.Y",{Name = "float"},"Y0")
					result[3] = makeSubProp(prop,".Max.X",{Name = "float"},"X1")
					result[4] = makeSubProp(prop,".Max.Y",{Name = "float"},"Y1")
				elseif typeName == "PhysicalProperties" then
					result[1] = makeSubProp(prop,".Density",{Name = "float"})
					result[2] = makeSubProp(prop,".Elasticity",{Name = "float"})
					result[3] = makeSubProp(prop,".ElasticityWeight",{Name = "float"})
					result[4] = makeSubProp(prop,".Friction",{Name = "float"})
					result[5] = makeSubProp(prop,".FrictionWeight",{Name = "float"})
				elseif typeName == "Ray" then
					result[1] = makeSubProp(prop,".Origin",{Name = "Vector3"})
					result[2] = makeSubProp(prop,".Direction",{Name = "Vector3"})
				elseif typeName == "NumberRange" then
					result[1] = makeSubProp(prop,".Min",{Name = "float"})
					result[2] = makeSubProp(prop,".Max",{Name = "float"})
				elseif typeName == "Faces" then
					result[1] = makeSubProp(prop,".Back",{Name = "bool"})
					result[2] = makeSubProp(prop,".Bottom",{Name = "bool"})
					result[3] = makeSubProp(prop,".Front",{Name = "bool"})
					result[4] = makeSubProp(prop,".Left",{Name = "bool"})
					result[5] = makeSubProp(prop,".Right",{Name = "bool"})
					result[6] = makeSubProp(prop,".Top",{Name = "bool"})
				elseif typeName == "Axes" then
					result[1] = makeSubProp(prop,".X",{Name = "bool"})
					result[2] = makeSubProp(prop,".Y",{Name = "bool"})
					result[3] = makeSubProp(prop,".Z",{Name = "bool"})
				end

				if prop.Name == "SoundId" and prop.Class == "Sound" then
					result[1] = Properties.SoundPreviewProp
				end

				return result
			end

			Properties.Update = function()
				table.clear(viewList)

				local nameWidthCache = Properties.NameWidthCache
				local lastCategory
				local count = 1
				local maxWidth,maxDepth = 0,1

				local textServ = service.TextService
				local getTextSize = textServ.GetTextSize
				local font = Enum.Font.SourceSans
				local size = Vector2.new(math.huge,20)
				local stringSplit = string.split
				local entryIndent = Properties.EntryIndent
				local isFirstScaleType = Settings.Properties.ScaleType == 0
				local find,lower = string.find,string.lower
				local searchText = (#Properties.SearchText > 0 and lower(Properties.SearchText))

				local function recur(props,depth)
					for i = 1,#props do
						local prop = props[i]
						local propName = prop.Name
						local subName = prop.SubName
						local category = prop.Category

						local visible
						if searchText and depth == 1 then
							if find(lower(propName),searchText,1,true) then
								visible = true
							end
						else
							visible = true
						end

						if visible and lastCategory ~= category then
							viewList[count] = {CategoryName = category}
							count = count + 1
							lastCategory = category
						end

						if (expanded["CAT_"..category] and visible) or prop.SpecialRow then
							if depth > 1 then prop.Depth = depth if depth > maxDepth then maxDepth = depth end end

							if isFirstScaleType then
								local nameArr = subName and stringSplit(subName,".")
								local displayName = prop.DisplayName or (nameArr and nameArr[#nameArr]) or propName

								local nameWidth = nameWidthCache[displayName]
								if not nameWidth then nameWidth = getTextSize(textServ,displayName,14,font,size).X nameWidthCache[displayName] = nameWidth end

								local totalWidth = nameWidth + entryIndent*depth
								if totalWidth > maxWidth then
									maxWidth = totalWidth
								end
							end

							viewList[count] = prop
							count = count + 1

							local fullName = prop.Class.."."..prop.Name..(prop.SubName or "")
							if expanded[fullName] then
								local nextDepth = depth+1
								local expandedProps = Properties.GetExpandedProps(prop)
								if #expandedProps > 0 then
									recur(expandedProps,nextDepth)
								end
							end
						end
					end
				end
				recur(props,1)

				inputProp = nil
				Properties.ViewWidth = maxWidth + 9 + Properties.EntryOffset
				Properties.UpdateView()
			end

			Properties.NewPropEntry = function(index)
				local newEntry = Properties.EntryTemplate:Clone()
				local nameFrame = newEntry.NameFrame
				local valueFrame = newEntry.ValueFrame
				local newCheckbox = Lib.Checkbox.new(1)
				newCheckbox.Gui.Position = UDim2.new(0,3,0,3)
				newCheckbox.Gui.Parent = valueFrame
				newCheckbox.OnInput:Connect(function()
					local prop = viewList[index + Properties.Index]
					if not prop then return end

					if prop.ValueType.Name == "PhysicalProperties" then
						Properties.SetProp(prop,newCheckbox.Toggled and true or nil)
					else
						Properties.SetProp(prop,newCheckbox.Toggled)
					end
				end)
				checkboxes[index] = newCheckbox

				local iconFrame = Main.MiscIcons:GetLabel()
				iconFrame.Position = UDim2.new(0,2,0,3)
				iconFrame.Parent = newEntry.ValueFrame.RightButton

				newEntry.Position = UDim2.new(0,0,0,23*(index-1))

				nameFrame.Expand.InputBegan:Connect(function(input)
					local prop = viewList[index + Properties.Index]
					if not prop or input.UserInputType ~= Enum.UserInputType.MouseMovement then return end

					local fullName = (prop.CategoryName and "CAT_"..prop.CategoryName) or prop.Class.."."..prop.Name..(prop.SubName or "")

					Main.MiscIcons:DisplayByKey(newEntry.NameFrame.Expand.Icon, expanded[fullName] and "Collapse_Over" or "Expand_Over")
				end)

				nameFrame.Expand.InputEnded:Connect(function(input)
					local prop = viewList[index + Properties.Index]
					if not prop or input.UserInputType ~= Enum.UserInputType.MouseMovement then return end

					local fullName = (prop.CategoryName and "CAT_"..prop.CategoryName) or prop.Class.."."..prop.Name..(prop.SubName or "")

					Main.MiscIcons:DisplayByKey(newEntry.NameFrame.Expand.Icon, expanded[fullName] and "Collapse" or "Expand")
				end)

				nameFrame.Expand.MouseButton1Down:Connect(function()
					local prop = viewList[index + Properties.Index]
					if not prop then return end

					local fullName = (prop.CategoryName and "CAT_"..prop.CategoryName) or prop.Class.."."..prop.Name..(prop.SubName or "")
					if not prop.CategoryName and not Properties.ExpandableTypes[prop.ValueType and prop.ValueType.Name] and not Properties.ExpandableProps[fullName] then return end

					expanded[fullName] = not expanded[fullName]
					Properties.Update()
					Properties.Refresh()
				end)

				nameFrame.PropName.InputBegan:Connect(function(input)
					local prop = viewList[index + Properties.Index]
					if not prop then return end
					if input.UserInputType == Enum.UserInputType.MouseMovement and not nameFrame.PropName.TextFits then
						local fullNameFrame = Properties.FullNameFrame	
						local nameArr = string.split(prop.Class.."."..prop.Name..(prop.SubName or ""),".")
						local dispName = prop.DisplayName or nameArr[#nameArr]
						local sizeX = service.TextService:GetTextSize(dispName,14,Enum.Font.SourceSans,Vector2.new(math.huge,20)).X

						fullNameFrame.TextLabel.Text = dispName
						--fullNameFrame.Position = UDim2.new(0,Properties.EntryIndent*(prop.Depth or 1) + Properties.EntryOffset,0,23*(index-1))
						fullNameFrame.Size = UDim2.new(0,sizeX + 4,0,22)
						fullNameFrame.Visible = true
						Properties.FullNameFrameIndex = index
						Properties.FullNameFrameAttach.SetData(fullNameFrame, {Target = nameFrame})
						Properties.FullNameFrameAttach.Enable()
					end
				end)

				nameFrame.PropName.InputEnded:Connect(function(input)
					if input.UserInputType == Enum.UserInputType.MouseMovement and Properties.FullNameFrameIndex == index then
						Properties.FullNameFrame.Visible = false
						Properties.FullNameFrameAttach.Disable()
					end
				end)

				valueFrame.ValueBox.MouseButton1Down:Connect(function()
					local prop = viewList[index + Properties.Index]
					if not prop then return end

					Properties.SetInputProp(prop,index)
				end)

				valueFrame.ColorButton.MouseButton1Down:Connect(function()
					local prop = viewList[index + Properties.Index]
					if not prop then return end

					Properties.SetInputProp(prop,index,"color")
				end)

				valueFrame.RightButton.MouseButton1Click:Connect(function()
					local prop = viewList[index + Properties.Index]
					if not prop then return end

					local fullName = prop.Class.."."..prop.Name..(prop.SubName or "")
					local inputFullName = inputProp and (inputProp.Class.."."..inputProp.Name..(inputProp.SubName or ""))

					if fullName == inputFullName and inputProp.ValueType.Category == "Class" then
						inputProp = nil
						Properties.SetProp(prop,nil)
					else
						Properties.SetInputProp(prop,index,"right")
					end
				end)

				nameFrame.ToggleAttributes.MouseButton1Click:Connect(function()
					Settings.Properties.ShowAttributes = not Settings.Properties.ShowAttributes
					Properties.ShowExplorerProps()
				end)

				newEntry.RowButton.MouseButton1Click:Connect(function()
					Properties.DisplayAddAttributeWindow()
				end)

				newEntry.EditAttributeButton.MouseButton1Down:Connect(function()
					local prop = viewList[index + Properties.Index]
					if not prop then return end

					Properties.DisplayAttributeContext(prop)
				end)

				valueFrame.SoundPreview.ControlButton.MouseButton1Click:Connect(function()
					if Properties.PreviewSound and Properties.PreviewSound.Playing then
						Properties.SetSoundPreview(false)
					else
						local soundObj = Properties.FindFirstObjWhichIsA("Sound")
						if soundObj then Properties.SetSoundPreview(soundObj) end
					end
				end)

				valueFrame.SoundPreview.InputBegan:Connect(function(input)
					if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end

					local releaseEvent,mouseEvent
					releaseEvent = service.UserInputService.InputEnded:Connect(function(input)
						if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end
						releaseEvent:Disconnect()
						mouseEvent:Disconnect()
					end)

					local timeLine = newEntry.ValueFrame.SoundPreview.TimeLine
					local soundObj = Properties.FindFirstObjWhichIsA("Sound")
					if soundObj then Properties.SetSoundPreview(soundObj,true) end

					local function update(input)
						local sound = Properties.PreviewSound
						if not sound or sound.TimeLength == 0 then return end

						local mouseX = input.Position.X
						local timeLineSize = timeLine.AbsoluteSize
						local relaX = mouseX - timeLine.AbsolutePosition.X

						if timeLineSize.X <= 1 then return end
						if relaX < 0 then relaX = 0 elseif relaX >= timeLineSize.X then relaX = timeLineSize.X-1 end

						local perc = (relaX/(timeLineSize.X-1))
						sound.TimePosition = perc*sound.TimeLength
						timeLine.Slider.Position = UDim2.new(perc,-4,0,-8)
					end
					update(input)

					mouseEvent = service.UserInputService.InputChanged:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseMovement then
							update(input)
						end
					end)
				end)

				newEntry.Parent = propsFrame

				return {
					Gui = newEntry,
					GuiElems = {
						NameFrame = nameFrame,
						ValueFrame = valueFrame,
						PropName = nameFrame.PropName,
						ValueBox = valueFrame.ValueBox,
						Expand = nameFrame.Expand,
						ColorButton = valueFrame.ColorButton,
						ColorPreview = valueFrame.ColorButton.ColorPreview,
						Gradient = valueFrame.ColorButton.ColorPreview.UIGradient,
						EnumArrow = valueFrame.EnumArrow,
						Checkbox = valueFrame.Checkbox,
						RightButton = valueFrame.RightButton,
						RightButtonIcon = iconFrame,
						RowButton = newEntry.RowButton,
						EditAttributeButton = newEntry.EditAttributeButton,
						ToggleAttributes = nameFrame.ToggleAttributes,
						SoundPreview = valueFrame.SoundPreview,
						SoundPreviewSlider = valueFrame.SoundPreview.TimeLine.Slider
					}
				}
			end

			Properties.GetSoundPreviewEntry = function()
				for i = 1,#viewList do
					if viewList[i] == Properties.SoundPreviewProp then
						return propEntries[i - Properties.Index]
					end
				end
			end

			Properties.SetSoundPreview = function(soundObj,noplay)
				local sound = Properties.PreviewSound
				if not sound then
					sound = Instance.new("Sound")
					sound.Name = "Preview"
					sound.Paused:Connect(function()
						local entry = Properties.GetSoundPreviewEntry()
						if entry then Main.MiscIcons:DisplayByKey(entry.GuiElems.SoundPreview.ControlButton.Icon, "Play") end
					end)
					sound.Resumed:Connect(function() Properties.Refresh() end)
					sound.Ended:Connect(function()
						local entry = Properties.GetSoundPreviewEntry()
						if entry then entry.GuiElems.SoundPreviewSlider.Position = UDim2.new(0,-4,0,-8) end
						Properties.Refresh()
					end)
					sound.Parent = window.Gui
					Properties.PreviewSound = sound
				end

				if not soundObj then
					sound:Pause()
				else
					local newId = sound.SoundId ~= soundObj.SoundId
					sound.SoundId = soundObj.SoundId
					sound.PlaybackSpeed = soundObj.PlaybackSpeed
					sound.Volume = soundObj.Volume
					if newId then sound.TimePosition = 0 end
					if not noplay then sound:Resume() end

					coroutine.wrap(function()
						local previewTime = tick()
						Properties.SoundPreviewTime = previewTime
						while previewTime == Properties.SoundPreviewTime and sound.Playing do
							local entry = Properties.GetSoundPreviewEntry()
							if entry then
								local tl = sound.TimeLength
								local perc = sound.TimePosition/(tl == 0 and 1 or tl)
								entry.GuiElems.SoundPreviewSlider.Position = UDim2.new(perc,-4,0,-8)
							end
							Lib.FastWait()
						end
					end)()
					Properties.Refresh()
				end
			end

			Properties.DisplayAttributeContext = function(prop)
				local context = Properties.AttributeContext
				if not context then
					context = Lib.ContextMenu.new()
					context.Iconless = true
					context.Width = 80
				end
				context:Clear()

				context:Add({Name = "Edit", OnClick = function()
					Properties.DisplayAddAttributeWindow(prop)
				end})
				context:Add({Name = "Delete", OnClick = function()
					Properties.SetProp(prop,nil,true)
					Properties.ShowExplorerProps()
				end})

				context:Show()
			end

			Properties.DisplayAddAttributeWindow = function(editAttr)
				local win = Properties.AddAttributeWindow
				if not win then
					win = Lib.Window.new()
					win.Alignable = false
					win.Resizable = false
					win:SetTitle("Add Attribute")
					win:SetSize(200,130)

					local saveButton = Lib.Button.new()
					local nameLabel = Lib.Label.new()
					nameLabel.Text = "Name"
					nameLabel.Position = UDim2.new(0,30,0,10)
					nameLabel.Size = UDim2.new(0,40,0,20)
					win:Add(nameLabel)

					local nameBox = Lib.ViewportTextBox.new()
					nameBox.Position = UDim2.new(0,75,0,10)
					nameBox.Size = UDim2.new(0,120,0,20)
					win:Add(nameBox,"NameBox")
					nameBox.TextBox:GetPropertyChangedSignal("Text"):Connect(function()
						saveButton:SetDisabled(#nameBox:GetText() == 0)
					end)

					local typeLabel = Lib.Label.new()
					typeLabel.Text = "Type"
					typeLabel.Position = UDim2.new(0,30,0,40)
					typeLabel.Size = UDim2.new(0,40,0,20)
					win:Add(typeLabel)

					local typeChooser = Lib.DropDown.new()
					typeChooser.CanBeEmpty = false
					typeChooser.Position = UDim2.new(0,75,0,40)
					typeChooser.Size = UDim2.new(0,120,0,20)
					typeChooser:SetOptions(Properties.AllowedAttributeTypes)
					win:Add(typeChooser,"TypeChooser")

					local errorLabel = Lib.Label.new()
					errorLabel.Text = ""
					errorLabel.Position = UDim2.new(0,5,1,-45)
					errorLabel.Size = UDim2.new(1,-10,0,20)
					errorLabel.TextColor3 = Settings.Theme.Important
					win.ErrorLabel = errorLabel
					win:Add(errorLabel,"Error")

					local cancelButton = Lib.Button.new()
					cancelButton.Text = "Cancel"
					cancelButton.Position = UDim2.new(1,-97,1,-25)
					cancelButton.Size = UDim2.new(0,92,0,20)
					cancelButton.OnClick:Connect(function()
						win:Close()
					end)
					win:Add(cancelButton)

					saveButton.Text = "Save"
					saveButton.Position = UDim2.new(0,5,1,-25)
					saveButton.Size = UDim2.new(0,92,0,20)
					saveButton.OnClick:Connect(function()
						local name = nameBox:GetText()
						if #name > 100 then
							errorLabel.Text = "Error: Name over 100 chars"
							return
						elseif name:sub(1,3) == "RBX" then
							errorLabel.Text = "Error: Name begins with 'RBX'"
							return
						end

						local typ = typeChooser.Selected
						local valType = {Name = Properties.TypeNameConvert[typ] or typ, Category = "DataType"}
						local attrProp = {IsAttribute = true, Name = "ATTR_"..name, AttributeName = name, DisplayName = name, Class = "Instance", ValueType = valType, Category = "Attributes", Tags = {}}

						Settings.Properties.ShowAttributes = true
						Properties.SetProp(attrProp,Properties.DefaultPropValue[valType.Name],true,Properties.EditingAttribute)
						Properties.ShowExplorerProps()
						win:Close()
					end)
					win:Add(saveButton,"SaveButton")

					Properties.AddAttributeWindow = win
				end

				Properties.EditingAttribute = editAttr
				win:SetTitle(editAttr and "Edit Attribute "..editAttr.AttributeName or "Add Attribute")
				win.Elements.Error.Text = ""
				win.Elements.NameBox:SetText("")
				win.Elements.SaveButton:SetDisabled(true)
				win.Elements.TypeChooser:SetSelected(1)
				win:Show()
			end

			Properties.IsTextEditable = function(prop)
				local typeData = prop.ValueType
				local typeName = typeData.Name

				return typeName ~= "bool" and typeData.Category ~= "Enum" and typeData.Category ~= "Class" and typeName ~= "BrickColor"
			end

			Properties.DisplayEnumDropdown = function(entryIndex)
				local context = Properties.EnumContext
				if not context then
					context = Lib.ContextMenu.new()
					context.Iconless = true
					context.MaxHeight = 200
					context.ReverseYOffset = 22
					Properties.EnumDropdown = context
				end

				if not inputProp or inputProp.ValueType.Category ~= "Enum" then return end
				local prop = inputProp

				local entry = propEntries[entryIndex]
				local valueFrame = entry.GuiElems.ValueFrame

				local enum = Enum[prop.ValueType.Name]
				if not enum then return end

				local sorted = {}
				for name,enum in next,enum:GetEnumItems() do
					sorted[#sorted+1] = enum
				end
				table.sort(sorted,function(a,b) return a.Name < b.Name end)

				context:Clear()

				local function onClick(name)
					if prop ~= inputProp then return end

					local enumItem = enum[name]
					inputProp = nil
					Properties.SetProp(prop,enumItem)
				end

				for i = 1,#sorted do
					local enumItem = sorted[i]
					context:Add({Name = enumItem.Name, OnClick = onClick})
				end

				context.Width = valueFrame.AbsoluteSize.X
				context:Show(valueFrame.AbsolutePosition.X, valueFrame.AbsolutePosition.Y + 22)
			end

			Properties.DisplayBrickColorEditor = function(prop,entryIndex,col)
				local editor = Properties.BrickColorEditor
				if not editor then
					editor = Lib.BrickColorPicker.new()
					editor.Gui.DisplayOrder = Main.DisplayOrders.Menu
					editor.ReverseYOffset = 22

					editor.OnSelect:Connect(function(col)
						if not editor.CurrentProp or editor.CurrentProp.ValueType.Name ~= "BrickColor" then return end

						if editor.CurrentProp == inputProp then inputProp = nil end
						Properties.SetProp(editor.CurrentProp,BrickColor.new(col))
					end)

					editor.OnMoreColors:Connect(function() -- TODO: Special Case BasePart.BrickColor to BasePart.Color
						editor:Close()
						local colProp
						for i,v in pairs(API.Classes.BasePart.Properties) do
							if v.Name == "Color" then
								colProp = v
								break
							end
						end
						Properties.DisplayColorEditor(colProp,editor.SavedColor.Color)
					end)

					Properties.BrickColorEditor = editor
				end

				local entry = propEntries[entryIndex]
				local valueFrame = entry.GuiElems.ValueFrame

				editor.CurrentProp = prop
				editor.SavedColor = col
				if prop and prop.Class == "BasePart" and prop.Name == "BrickColor" then
					editor:SetMoreColorsVisible(true)
				else
					editor:SetMoreColorsVisible(false)
				end
				editor:Show(valueFrame.AbsolutePosition.X, valueFrame.AbsolutePosition.Y + 22)
			end

			Properties.DisplayColorEditor = function(prop,col)
				local editor = Properties.ColorEditor
				if not editor then
					editor = Lib.ColorPicker.new()

					editor.OnSelect:Connect(function(col)
						if not editor.CurrentProp then return end
						local typeName = editor.CurrentProp.ValueType.Name
						if typeName ~= "Color3" and typeName ~= "BrickColor" then return end

						local colVal = (typeName == "Color3" and col or BrickColor.new(col))

						if editor.CurrentProp == inputProp then inputProp = nil end
						Properties.SetProp(editor.CurrentProp,colVal)
					end)

					Properties.ColorEditor = editor
				end

				editor.CurrentProp = prop
				if col then
					editor:SetColor(col)
				else
					local firstVal = Properties.GetFirstPropVal(prop)
					if firstVal then editor:SetColor(firstVal) end
				end
				editor:Show()
			end

			Properties.DisplayNumberSequenceEditor = function(prop,seq)
				local editor = Properties.NumberSequenceEditor
				if not editor then
					editor = Lib.NumberSequenceEditor.new()

					editor.OnSelect:Connect(function(val)
						if not editor.CurrentProp or editor.CurrentProp.ValueType.Name ~= "NumberSequence" then return end

						if editor.CurrentProp == inputProp then inputProp = nil end
						Properties.SetProp(editor.CurrentProp,val)
					end)

					Properties.NumberSequenceEditor = editor
				end

				editor.CurrentProp = prop
				if seq then
					editor:SetSequence(seq)
				else
					local firstVal = Properties.GetFirstPropVal(prop)
					if firstVal then editor:SetSequence(firstVal) end
				end
				editor:Show()
			end

			Properties.DisplayColorSequenceEditor = function(prop,seq)
				local editor = Properties.ColorSequenceEditor
				if not editor then
					editor = Lib.ColorSequenceEditor.new()

					editor.OnSelect:Connect(function(val)
						if not editor.CurrentProp or editor.CurrentProp.ValueType.Name ~= "ColorSequence" then return end

						if editor.CurrentProp == inputProp then inputProp = nil end
						Properties.SetProp(editor.CurrentProp,val)
					end)

					Properties.ColorSequenceEditor = editor
				end

				editor.CurrentProp = prop
				if seq then
					editor:SetSequence(seq)
				else
					local firstVal = Properties.GetFirstPropVal(prop)
					if firstVal then editor:SetSequence(firstVal) end
				end
				editor:Show()
			end

			Properties.GetFirstPropVal = function(prop)
				local first = Properties.FindFirstObjWhichIsA(prop.Class)
				if first then
					return Properties.GetPropVal(prop,first)
				end
			end

			Properties.GetPropVal = function(prop,obj)
				if prop.MultiType then return "<Multiple Types>" end
				if not obj then return end

				local propVal
				if prop.IsAttribute then
					propVal = getAttribute(obj,prop.AttributeName)
					if propVal == nil then return nil end

					local typ = typeof(propVal)
					local currentType = Properties.TypeNameConvert[typ] or typ
					if prop.RootType then
						if prop.RootType.Name ~= currentType then
							return nil
						end
					elseif prop.ValueType.Name ~= currentType then
						return nil
					end
				else
					propVal = obj[prop.Name]
				end
				if prop.SubName then
					local indexes = string.split(prop.SubName,".")
					for i = 1,#indexes do
						local indexName = indexes[i]
						if #indexName > 0 and propVal then
							propVal = propVal[indexName]
						end
					end
				end

				return propVal
			end

			Properties.SelectObject = function(obj)
				if inputProp and inputProp.ValueType.Category == "Class" then
					local prop = inputProp
					inputProp = nil

					if isa(obj,prop.ValueType.Name) then
						Properties.SetProp(prop,obj)
					else
						Properties.Refresh()
					end

					return true
				end

				return false
			end

			Properties.DisplayProp = function(prop,entryIndex)
				local propName = prop.Name
				local typeData = prop.ValueType
				local typeName = typeData.Name
				local tags = prop.Tags
				local gName = prop.Class.."."..prop.Name..(prop.SubName or "")
				local propObj = autoUpdateObjs[gName]
				local entryData = propEntries[entryIndex]
				local UDim2 = UDim2

				local guiElems = entryData.GuiElems
				local valueFrame = guiElems.ValueFrame
				local valueBox = guiElems.ValueBox
				local colorButton = guiElems.ColorButton
				local colorPreview = guiElems.ColorPreview
				local gradient = guiElems.Gradient
				local enumArrow = guiElems.EnumArrow
				local checkbox = guiElems.Checkbox
				local rightButton = guiElems.RightButton
				local soundPreview = guiElems.SoundPreview

				local propVal = Properties.GetPropVal(prop,propObj)
				local inputFullName = inputProp and (inputProp.Class.."."..inputProp.Name..(inputProp.SubName or ""))

				local offset = 4
				local endOffset = 6

				-- Offsetting the ValueBox for ValueType specific buttons
				if (typeName == "Color3" or typeName == "BrickColor" or typeName == "ColorSequence") then
					colorButton.Visible = true
					enumArrow.Visible = false
					if propVal then
						gradient.Color = (typeName == "Color3" and ColorSequence.new(propVal)) or (typeName == "BrickColor" and ColorSequence.new(propVal.Color)) or propVal
					else
						gradient.Color = ColorSequence.new(Color3.new(1,1,1))
					end
					colorPreview.BorderColor3 = (typeName == "ColorSequence" and Color3.new(1,1,1) or Color3.new(0,0,0))
					offset = 22
					endOffset = 24 + (typeName == "ColorSequence" and 20 or 0)
				elseif typeData.Category == "Enum" then
					colorButton.Visible = false
					enumArrow.Visible = not prop.Tags.ReadOnly
					endOffset = 22
				elseif (gName == inputFullName and typeData.Category == "Class") or typeName == "NumberSequence" then
					colorButton.Visible = false
					enumArrow.Visible = false
					endOffset = 26
				else
					colorButton.Visible = false
					enumArrow.Visible = false
				end

				valueBox.Position = UDim2.new(0,offset,0,0)
				valueBox.Size = UDim2.new(1,-endOffset,1,0)

				-- Right button
				if inputFullName == gName and typeData.Category == "Class" then
					Main.MiscIcons:DisplayByKey(guiElems.RightButtonIcon, "Delete")
					guiElems.RightButtonIcon.Visible = true
					rightButton.Text = ""
					rightButton.Visible = true
				elseif typeName == "NumberSequence" or typeName == "ColorSequence" then
					guiElems.RightButtonIcon.Visible = false
					rightButton.Text = "..."
					rightButton.Visible = true
				else
					rightButton.Visible = false
				end

				-- Displays the correct ValueBox for the ValueType, and sets it to the prop value
				if typeName == "bool" or typeName == "PhysicalProperties" then
					valueBox.Visible = false
					checkbox.Visible = true
					soundPreview.Visible = false
					checkboxes[entryIndex].Disabled = tags.ReadOnly
					if typeName == "PhysicalProperties" and autoUpdateObjs[gName] then
						checkboxes[entryIndex]:SetState(propVal and true or false)
					else
						checkboxes[entryIndex]:SetState(propVal)
					end
				elseif typeName == "SoundPlayer" then
					valueBox.Visible = false
					checkbox.Visible = false
					soundPreview.Visible = true
					local playing = Properties.PreviewSound and Properties.PreviewSound.Playing
					Main.MiscIcons:DisplayByKey(soundPreview.ControlButton.Icon, playing and "Pause" or "Play")
				else
					valueBox.Visible = true
					checkbox.Visible = false
					soundPreview.Visible = false

					if propVal ~= nil then
						if typeName == "Color3" then
							valueBox.Text = "["..Lib.ColorToBytes(propVal).."]"
						elseif typeData.Category == "Enum" then
							valueBox.Text = propVal.Name
						elseif Properties.RoundableTypes[typeName] and Settings.Properties.NumberRounding then
							local rawStr = Properties.ValueToString(prop,propVal)
							valueBox.Text = rawStr:gsub("-?%d+%.%d+",function(num)
								return tostring(tonumber(("%."..Settings.Properties.NumberRounding.."f"):format(num)))
							end)
						else
							valueBox.Text = Properties.ValueToString(prop,propVal)
						end
					else
						valueBox.Text = ""
					end

					valueBox.TextColor3 = tags.ReadOnly and Settings.Theme.PlaceholderText or Settings.Theme.Text
				end
			end

			Properties.Refresh = function()
				local maxEntries = math.max(math.ceil((propsFrame.AbsoluteSize.Y) / 23),0)	
				local maxX = propsFrame.AbsoluteSize.X
				local valueWidth = math.max(Properties.MinInputWidth,maxX-Properties.ViewWidth)
				local inputPropVisible = false
				local isa = game.IsA
				local UDim2 = UDim2
				local stringSplit = string.split
				local scaleType = Settings.Properties.ScaleType

				-- Clear connections
				for i = 1,#propCons do
					propCons[i]:Disconnect()
				end
				table.clear(propCons)

				-- Hide full name viewer
				Properties.FullNameFrame.Visible = false
				Properties.FullNameFrameAttach.Disable()

				for i = 1,maxEntries do
					local entryData = propEntries[i]
					if not propEntries[i] then entryData = Properties.NewPropEntry(i) propEntries[i] = entryData end

					local entry = entryData.Gui
					local guiElems = entryData.GuiElems
					local nameFrame = guiElems.NameFrame
					local propNameLabel = guiElems.PropName
					local valueFrame = guiElems.ValueFrame
					local expand = guiElems.Expand
					local valueBox = guiElems.ValueBox
					local propNameBox = guiElems.PropName
					local rightButton = guiElems.RightButton
					local editAttributeButton = guiElems.EditAttributeButton
					local toggleAttributes = guiElems.ToggleAttributes

					local prop = viewList[i + Properties.Index]
					if prop then
						local entryXOffset = (scaleType == 0 and scrollH.Index or 0)
						entry.Visible = true
						entry.Position = UDim2.new(0,-entryXOffset,0,entry.Position.Y.Offset)
						entry.Size = UDim2.new(scaleType == 0 and 0 or 1, scaleType == 0 and Properties.ViewWidth + valueWidth or 0,0,22)

						if prop.SpecialRow then
							if prop.SpecialRow == "AddAttribute" then
								nameFrame.Visible = false
								valueFrame.Visible = false
								guiElems.RowButton.Visible = true
							end
						else
							-- Revert special row stuff
							nameFrame.Visible = true
							guiElems.RowButton.Visible = false

							local depth = Properties.EntryIndent*(prop.Depth or 1)
							local leftOffset = depth + Properties.EntryOffset
							nameFrame.Position = UDim2.new(0,leftOffset,0,0)
							propNameLabel.Size = UDim2.new(1,-2 - (scaleType == 0 and 0 or 6),1,0)

							local gName = (prop.CategoryName and "CAT_"..prop.CategoryName) or prop.Class.."."..prop.Name..(prop.SubName or "")

							if prop.CategoryName then
								entry.BackgroundColor3 = Settings.Theme.Main1
								valueFrame.Visible = false

								propNameBox.Text = prop.CategoryName
								propNameBox.Font = Enum.Font.SourceSansBold
								expand.Visible = true
								propNameBox.TextColor3 = Settings.Theme.Text
								nameFrame.BackgroundTransparency = 1
								nameFrame.Size = UDim2.new(1,0,1,0)
								editAttributeButton.Visible = false

								local showingAttrs = Settings.Properties.ShowAttributes
								toggleAttributes.Position = UDim2.new(1,-85-leftOffset,0,0)
								toggleAttributes.Text = (showingAttrs and "[Setting: ON]" or "[Setting: OFF]")
								toggleAttributes.TextColor3 = Settings.Theme.Text
								toggleAttributes.Visible = (prop.CategoryName == "Attributes")
							else
								local propName = prop.Name
								local typeData = prop.ValueType
								local typeName = typeData.Name
								local tags = prop.Tags
								local propObj = autoUpdateObjs[gName]

								local attributeOffset = (prop.IsAttribute and 20 or 0)
								editAttributeButton.Visible = (prop.IsAttribute and not prop.RootType)
								toggleAttributes.Visible = false

								-- Moving around the frames
								if scaleType == 0 then
									nameFrame.Size = UDim2.new(0,Properties.ViewWidth - leftOffset - 1,1,0)
									valueFrame.Position = UDim2.new(0,Properties.ViewWidth,0,0)
									valueFrame.Size = UDim2.new(0,valueWidth - attributeOffset,1,0)
								else
									nameFrame.Size = UDim2.new(0.5,-leftOffset - 1,1,0)
									valueFrame.Position = UDim2.new(0.5,0,0,0)
									valueFrame.Size = UDim2.new(0.5,-attributeOffset,1,0)
								end

								local nameArr = stringSplit(gName,".")
								propNameBox.Text = prop.DisplayName or nameArr[#nameArr]
								propNameBox.Font = Enum.Font.SourceSans
								entry.BackgroundColor3 = Settings.Theme.Main2
								valueFrame.Visible = true

								expand.Visible = typeData.Category == "DataType" and Properties.ExpandableTypes[typeName] or Properties.ExpandableProps[gName]
								propNameBox.TextColor3 = tags.ReadOnly and Settings.Theme.PlaceholderText or Settings.Theme.Text

								-- Display property value
								Properties.DisplayProp(prop,i)
								if propObj then
									if prop.IsAttribute then
										propCons[#propCons+1] = getAttributeChangedSignal(propObj,prop.AttributeName):Connect(function()
											Properties.DisplayProp(prop,i)
										end)
									else
										propCons[#propCons+1] = getPropChangedSignal(propObj,propName):Connect(function()
											Properties.DisplayProp(prop,i)
										end)
									end
								end

								-- Position and resize Input Box
								local beforeVisible = valueBox.Visible
								local inputFullName = inputProp and (inputProp.Class.."."..inputProp.Name..(inputProp.SubName or ""))
								if gName == inputFullName then
									nameFrame.BackgroundColor3 = Settings.Theme.ListSelection
									nameFrame.BackgroundTransparency = 0
									if typeData.Category == "Class" or typeData.Category == "Enum" or typeName == "BrickColor" then
										valueFrame.BackgroundColor3 = Settings.Theme.TextBox
										valueFrame.BackgroundTransparency = 0
										valueBox.Visible = true
									else
										inputPropVisible = true
										local scale = (scaleType == 0 and 0 or 0.5)
										local offset = (scaleType == 0 and Properties.ViewWidth-scrollH.Index or 0)
										local endOffset = 0

										if typeName == "Color3" or typeName == "ColorSequence" then
											offset = offset + 22
										end

										if typeName == "NumberSequence" or typeName == "ColorSequence" then
											endOffset = 20
										end

										inputBox.Position = UDim2.new(scale,offset,0,entry.Position.Y.Offset)
										inputBox.Size = UDim2.new(1-scale,-offset-endOffset-attributeOffset,0,22)
										inputBox.Visible = true
										valueBox.Visible = false
									end
								else
									nameFrame.BackgroundColor3 = Settings.Theme.Main1
									nameFrame.BackgroundTransparency = 1
									valueFrame.BackgroundColor3 = Settings.Theme.Main1
									valueFrame.BackgroundTransparency = 1
									valueBox.Visible = beforeVisible
								end
							end

							-- Expand
							if prop.CategoryName or Properties.ExpandableTypes[prop.ValueType and prop.ValueType.Name] or Properties.ExpandableProps[gName] then
								if Lib.CheckMouseInGui(expand) then
									Main.MiscIcons:DisplayByKey(expand.Icon, expanded[gName] and "Collapse_Over" or "Expand_Over")
								else
									Main.MiscIcons:DisplayByKey(expand.Icon, expanded[gName] and "Collapse" or "Expand")
								end
								expand.Visible = true
							else
								expand.Visible = false
							end
						end
						entry.Visible = true
					else
						entry.Visible = false
					end
				end

				if not inputPropVisible then
					inputBox.Visible = false
				end

				for i = maxEntries+1,#propEntries do
					propEntries[i].Gui:Destroy()
					propEntries[i] = nil
					checkboxes[i] = nil
				end
			end

			Properties.SetProp = function(prop,val,noupdate,prevAttribute)
				local sList = Explorer.Selection.List
				local propName = prop.Name
				local subName = prop.SubName
				local propClass = prop.Class
				local typeData = prop.ValueType
				local typeName = typeData.Name
				local attributeName = prop.AttributeName
				local rootTypeData = prop.RootType
				local rootTypeName = rootTypeData and rootTypeData.Name
				local fullName = prop.Class.."."..prop.Name..(prop.SubName or "")
				local Vector3 = Vector3

				for i = 1,#sList do
					local node = sList[i]
					local obj = node.Obj

					if isa(obj,propClass) then
						pcall(function()
							local setVal = val
							local root
							if prop.IsAttribute then
								root = getAttribute(obj,attributeName)
							else
								root = obj[propName]
							end

							if prevAttribute then
								if prevAttribute.ValueType.Name == typeName then
									setVal = getAttribute(obj,prevAttribute.AttributeName) or setVal
								end
								setAttribute(obj,prevAttribute.AttributeName,nil)
							end

							if rootTypeName then
								if rootTypeName == "Vector2" then
									setVal = Vector2.new((subName == ".X" and setVal) or root.X, (subName == ".Y" and setVal) or root.Y)
								elseif rootTypeName == "Vector3" then
									setVal = Vector3.new((subName == ".X" and setVal) or root.X, (subName == ".Y" and setVal) or root.Y, (subName == ".Z" and setVal) or root.Z)
								elseif rootTypeName == "UDim" then
									setVal = UDim.new((subName == ".Scale" and setVal) or root.Scale, (subName == ".Offset" and setVal) or root.Offset)
								elseif rootTypeName == "UDim2" then
									local rootX,rootY = root.X,root.Y
									local X_UDim = (subName == ".X" and setVal) or UDim.new((subName == ".X.Scale" and setVal) or rootX.Scale, (subName == ".X.Offset" and setVal) or rootX.Offset)
									local Y_UDim = (subName == ".Y" and setVal) or UDim.new((subName == ".Y.Scale" and setVal) or rootY.Scale, (subName == ".Y.Offset" and setVal) or rootY.Offset)
									setVal = UDim2.new(X_UDim,Y_UDim)
								elseif rootTypeName == "CFrame" then
									local rootPos,rootRight,rootUp,rootLook = root.Position,root.RightVector,root.UpVector,root.LookVector
									local pos = (subName == ".Position" and setVal) or Vector3.new((subName == ".Position.X" and setVal) or rootPos.X, (subName == ".Position.Y" and setVal) or rootPos.Y, (subName == ".Position.Z" and setVal) or rootPos.Z)
									local rightV = (subName == ".RightVector" and setVal) or Vector3.new((subName == ".RightVector.X" and setVal) or rootRight.X, (subName == ".RightVector.Y" and setVal) or rootRight.Y, (subName == ".RightVector.Z" and setVal) or rootRight.Z)
									local upV = (subName == ".UpVector" and setVal) or Vector3.new((subName == ".UpVector.X" and setVal) or rootUp.X, (subName == ".UpVector.Y" and setVal) or rootUp.Y, (subName == ".UpVector.Z" and setVal) or rootUp.Z)
									local lookV = (subName == ".LookVector" and setVal) or Vector3.new((subName == ".LookVector.X" and setVal) or rootLook.X, (subName == ".RightVector.Y" and setVal) or rootLook.Y, (subName == ".RightVector.Z" and setVal) or rootLook.Z)
									setVal = CFrame.fromMatrix(pos,rightV,upV,-lookV)
								elseif rootTypeName == "Rect" then
									local rootMin,rootMax = root.Min,root.Max
									local min = Vector2.new((subName == ".Min.X" and setVal) or rootMin.X, (subName == ".Min.Y" and setVal) or rootMin.Y)
									local max = Vector2.new((subName == ".Max.X" and setVal) or rootMax.X, (subName == ".Max.Y" and setVal) or rootMax.Y)
									setVal = Rect.new(min,max)
								elseif rootTypeName == "PhysicalProperties" then
									local rootProps = PhysicalProperties.new(obj.Material)
									local density = (subName == ".Density" and setVal) or (root and root.Density) or rootProps.Density
									local friction = (subName == ".Friction" and setVal) or (root and root.Friction) or rootProps.Friction
									local elasticity = (subName == ".Elasticity" and setVal) or (root and root.Elasticity) or rootProps.Elasticity
									local frictionWeight = (subName == ".FrictionWeight" and setVal) or (root and root.FrictionWeight) or rootProps.FrictionWeight
									local elasticityWeight = (subName == ".ElasticityWeight" and setVal) or (root and root.ElasticityWeight) or rootProps.ElasticityWeight
									setVal = PhysicalProperties.new(density,friction,elasticity,frictionWeight,elasticityWeight)
								elseif rootTypeName == "Ray" then
									local rootOrigin,rootDirection = root.Origin,root.Direction
									local origin = (subName == ".Origin" and setVal) or Vector3.new((subName == ".Origin.X" and setVal) or rootOrigin.X, (subName == ".Origin.Y" and setVal) or rootOrigin.Y, (subName == ".Origin.Z" and setVal) or rootOrigin.Z)
									local direction = (subName == ".Direction" and setVal) or Vector3.new((subName == ".Direction.X" and setVal) or rootDirection.X, (subName == ".Direction.Y" and setVal) or rootDirection.Y, (subName == ".Direction.Z" and setVal) or rootDirection.Z)
									setVal = Ray.new(origin,direction)
								elseif rootTypeName == "Faces" then
									local faces = {}
									local faceList = {"Back","Bottom","Front","Left","Right","Top"}
									for _,face in pairs(faceList) do
										local val
										if subName == "."..face then
											val = setVal
										else
											val = root[face]
										end
										if val then faces[#faces+1] = Enum.NormalId[face] end
									end
									setVal = Faces.new(unpack(faces))
								elseif rootTypeName == "Axes" then
									local axes = {}
									local axesList = {"X","Y","Z"}
									for _,axe in pairs(axesList) do
										local val
										if subName == "."..axe then
											val = setVal
										else
											val = root[axe]
										end
										if val then axes[#axes+1] = Enum.Axis[axe] end
									end
									setVal = Axes.new(unpack(axes))
								elseif rootTypeName == "NumberRange" then
									setVal = NumberRange.new(subName == ".Min" and setVal or root.Min, subName == ".Max" and setVal or root.Max)
								end
							end

							if typeName == "PhysicalProperties" and setVal then
								setVal = root or PhysicalProperties.new(obj.Material)
							end

							if prop.IsAttribute then
								setAttribute(obj,attributeName,setVal)
							else
								obj[propName] = setVal
							end
						end)
					end
				end

				if not noupdate then
					Properties.ComputeConflicts(prop)
				end
			end

			Properties.InitInputBox = function()
				inputBox = create({
					{1,"Frame",{BackgroundColor3=Color3.new(0.14901961386204,0.14901961386204,0.14901961386204),BorderSizePixel=0,Name="InputBox",Size=UDim2.new(0,200,0,22),Visible=false,ZIndex=2,}},
					{2,"TextBox",{BackgroundColor3=Color3.new(0.17647059261799,0.17647059261799,0.17647059261799),BackgroundTransparency=1,BorderColor3=Color3.new(0.062745101749897,0.51764708757401,1),BorderSizePixel=0,ClearTextOnFocus=false,Font=3,Parent={1},PlaceholderColor3=Color3.new(0.69803923368454,0.69803923368454,0.69803923368454),Position=UDim2.new(0,3,0,0),Size=UDim2.new(1,-6,1,0),Text="",TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,ZIndex=2,}},
				})
				inputTextBox = inputBox.TextBox
				inputBox.BackgroundColor3 = Settings.Theme.TextBox
				inputBox.Parent = Properties.Window.GuiElems.Content.List

				inputTextBox.FocusLost:Connect(function()
					if not inputProp then return end

					local prop = inputProp
					inputProp = nil
					local val = Properties.StringToValue(prop,inputTextBox.Text)
					if val then Properties.SetProp(prop,val) else Properties.Refresh() end
				end)

				inputTextBox.Focused:Connect(function()
					inputTextBox.SelectionStart = 1
					inputTextBox.CursorPosition = #inputTextBox.Text + 1
				end)

				Lib.ViewportTextBox.convert(inputTextBox)
			end

			Properties.SetInputProp = function(prop,entryIndex,special)
				local typeData = prop.ValueType
				local typeName = typeData.Name
				local fullName = prop.Class.."."..prop.Name..(prop.SubName or "")
				local propObj = autoUpdateObjs[fullName]
				local propVal = Properties.GetPropVal(prop,propObj)

				if prop.Tags.ReadOnly then return end

				inputProp = prop
				if special then
					if special == "color" then
						if typeName == "Color3" then
							inputTextBox.Text = propVal and Properties.ValueToString(prop,propVal) or ""
							Properties.DisplayColorEditor(prop,propVal)
						elseif typeName == "BrickColor" then
							Properties.DisplayBrickColorEditor(prop,entryIndex,propVal)
						elseif typeName == "ColorSequence" then
							inputTextBox.Text = propVal and Properties.ValueToString(prop,propVal) or ""
							Properties.DisplayColorSequenceEditor(prop,propVal)
						end
					elseif special == "right" then
						if typeName == "NumberSequence" then
							inputTextBox.Text = propVal and Properties.ValueToString(prop,propVal) or ""
							Properties.DisplayNumberSequenceEditor(prop,propVal)
						elseif typeName == "ColorSequence" then
							inputTextBox.Text = propVal and Properties.ValueToString(prop,propVal) or ""
							Properties.DisplayColorSequenceEditor(prop,propVal)
						end
					end
				else
					if Properties.IsTextEditable(prop) then
						inputTextBox.Text = propVal and Properties.ValueToString(prop,propVal) or ""
						inputTextBox:CaptureFocus()
					elseif typeData.Category == "Enum" then
						Properties.DisplayEnumDropdown(entryIndex)
					elseif typeName == "BrickColor" then
						Properties.DisplayBrickColorEditor(prop,entryIndex,propVal)
					end
				end
				Properties.Refresh()
			end

			Properties.InitSearch = function()
				local searchBox = Properties.GuiElems.ToolBar.SearchFrame.SearchBox

				Lib.ViewportTextBox.convert(searchBox)

				searchBox:GetPropertyChangedSignal("Text"):Connect(function()
					Properties.SearchText = searchBox.Text
					Properties.Update()
					Properties.Refresh()
				end)
			end

			Properties.InitEntryStuff = function()
				Properties.EntryTemplate = create({
					{1,"TextButton",{AutoButtonColor=false,BackgroundColor3=Color3.new(0.17647059261799,0.17647059261799,0.17647059261799),BorderColor3=Color3.new(0.1294117718935,0.1294117718935,0.1294117718935),Font=3,Name="Entry",Position=UDim2.new(0,1,0,1),Size=UDim2.new(0,250,0,22),Text="",TextSize=14,}},
					{2,"Frame",{BackgroundColor3=Color3.new(0.04313725605607,0.35294118523598,0.68627452850342),BackgroundTransparency=1,BorderColor3=Color3.new(0.33725491166115,0.49019610881805,0.73725491762161),BorderSizePixel=0,Name="NameFrame",Parent={1},Position=UDim2.new(0,20,0,0),Size=UDim2.new(1,-40,1,0),}},
					{3,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="PropName",Parent={2},Position=UDim2.new(0,2,0,0),Size=UDim2.new(1,-2,1,0),Text="Anchored",TextColor3=Color3.new(1,1,1),TextSize=14,TextTransparency=0.10000000149012,TextTruncate=1,TextXAlignment=0,}},
					{4,"TextButton",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,ClipsDescendants=true,Font=3,Name="Expand",Parent={2},Position=UDim2.new(0,-20,0,1),Size=UDim2.new(0,20,0,20),Text="",TextSize=14,Visible=false,}},
					{5,"ImageLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Image="rbxassetid://5642383285",ImageRectOffset=Vector2.new(144,16),ImageRectSize=Vector2.new(16,16),Name="Icon",Parent={4},Position=UDim2.new(0,2,0,2),ScaleType=4,Size=UDim2.new(0,16,0,16),}},
					{6,"TextButton",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderSizePixel=0,Font=4,Name="ToggleAttributes",Parent={2},Position=UDim2.new(1,-85,0,0),Size=UDim2.new(0,85,0,22),Text="[SETTING: OFF]",TextColor3=Color3.new(1,1,1),TextSize=14,TextTransparency=0.10000000149012,Visible=false,}},
					{7,"Frame",{BackgroundColor3=Color3.new(0.04313725605607,0.35294118523598,0.68627452850342),BackgroundTransparency=1,BorderColor3=Color3.new(0.33725491166115,0.49019607901573,0.73725491762161),BorderSizePixel=0,Name="ValueFrame",Parent={1},Position=UDim2.new(1,-100,0,0),Size=UDim2.new(0,80,1,0),}},
					{8,"Frame",{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14117647707462),BorderColor3=Color3.new(0.33725491166115,0.49019610881805,0.73725491762161),BorderSizePixel=0,Name="Line",Parent={7},Position=UDim2.new(0,-1,0,0),Size=UDim2.new(0,1,1,0),}},
					{9,"TextButton",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="ColorButton",Parent={7},Size=UDim2.new(0,20,0,22),Text="",TextColor3=Color3.new(1,1,1),TextSize=14,Visible=false,}},
					{10,"Frame",{BackgroundColor3=Color3.new(1,1,1),BorderColor3=Color3.new(0,0,0),Name="ColorPreview",Parent={9},Position=UDim2.new(0,5,0,6),Size=UDim2.new(0,10,0,10),}},
					{11,"UIGradient",{Parent={10},}},
					{12,"Frame",{BackgroundTransparency=1,Name="EnumArrow",Parent={7},Position=UDim2.new(1,-16,0,3),Size=UDim2.new(0,16,0,16),Visible=false,}},
					{13,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={12},Position=UDim2.new(0,8,0,9),Size=UDim2.new(0,1,0,1),}},
					{14,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={12},Position=UDim2.new(0,7,0,8),Size=UDim2.new(0,3,0,1),}},
					{15,"Frame",{BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BorderSizePixel=0,Parent={12},Position=UDim2.new(0,6,0,7),Size=UDim2.new(0,5,0,1),}},
					{16,"TextButton",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="ValueBox",Parent={7},Position=UDim2.new(0,4,0,0),Size=UDim2.new(1,-8,1,0),Text="",TextColor3=Color3.new(1,1,1),TextSize=14,TextTransparency=0.10000000149012,TextTruncate=1,TextXAlignment=0,}},
					{17,"TextButton",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="RightButton",Parent={7},Position=UDim2.new(1,-20,0,0),Size=UDim2.new(0,20,0,22),Text="...",TextColor3=Color3.new(1,1,1),TextSize=14,Visible=false,}},
					{18,"TextButton",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="SettingsButton",Parent={7},Position=UDim2.new(1,-20,0,0),Size=UDim2.new(0,20,0,22),Text="",TextColor3=Color3.new(1,1,1),TextSize=14,Visible=false,}},
					{19,"Frame",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Name="SoundPreview",Parent={7},Size=UDim2.new(1,0,1,0),Visible=false,}},
					{20,"TextButton",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="ControlButton",Parent={19},Size=UDim2.new(0,20,0,22),Text="",TextColor3=Color3.new(1,1,1),TextSize=14,}},
					{21,"ImageLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Image="rbxassetid://5642383285",ImageRectOffset=Vector2.new(144,16),ImageRectSize=Vector2.new(16,16),Name="Icon",Parent={20},Position=UDim2.new(0,2,0,3),ScaleType=4,Size=UDim2.new(0,16,0,16),}},
					{22,"Frame",{BackgroundColor3=Color3.new(0.3137255012989,0.3137255012989,0.3137255012989),BorderSizePixel=0,Name="TimeLine",Parent={19},Position=UDim2.new(0,26,0.5,-1),Size=UDim2.new(1,-34,0,2),}},
					{23,"Frame",{BackgroundColor3=Color3.new(0.2352941185236,0.2352941185236,0.2352941185236),BorderColor3=Color3.new(0.1294117718935,0.1294117718935,0.1294117718935),Name="Slider",Parent={22},Position=UDim2.new(0,-4,0,-8),Size=UDim2.new(0,8,0,18),}},
					{24,"TextButton",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="EditAttributeButton",Parent={1},Position=UDim2.new(1,-20,0,0),Size=UDim2.new(0,20,0,22),Text="",TextColor3=Color3.new(1,1,1),TextSize=14,}},
					{25,"ImageLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Image="rbxassetid://5034718180",ImageTransparency=0.20000000298023,Name="Icon",Parent={24},Position=UDim2.new(0,2,0,3),Size=UDim2.new(0,16,0,16),}},
					{26,"TextButton",{AutoButtonColor=false,BackgroundColor3=Color3.new(0.2352941185236,0.2352941185236,0.2352941185236),BorderSizePixel=0,Font=3,Name="RowButton",Parent={1},Size=UDim2.new(1,0,1,0),Text="Add Attribute",TextColor3=Color3.new(1,1,1),TextSize=14,TextTransparency=0.10000000149012,Visible=false,}},
				})

				local fullNameFrame = Lib.Frame.new()
				local label = Lib.Label.new()
				label.Parent = fullNameFrame.Gui
				label.Position = UDim2.new(0,2,0,0)
				label.Size = UDim2.new(1,-4,1,0)
				fullNameFrame.Visible = false
				fullNameFrame.Parent = window.Gui

				Properties.FullNameFrame = fullNameFrame
				Properties.FullNameFrameAttach = Lib.AttachTo(fullNameFrame)
			end

			Properties.Init = function() -- TODO: MAKE BETTER
				local guiItems = create({
					{1,"Folder",{Name="Items",}},
					{2,"Frame",{BackgroundColor3=Color3.new(0.20392157137394,0.20392157137394,0.20392157137394),BorderSizePixel=0,Name="ToolBar",Parent={1},Size=UDim2.new(1,0,0,22),}},
					{3,"Frame",{BackgroundColor3=Color3.new(0.14901961386204,0.14901961386204,0.14901961386204),BorderColor3=Color3.new(0.1176470592618,0.1176470592618,0.1176470592618),BorderSizePixel=0,Name="SearchFrame",Parent={2},Position=UDim2.new(0,3,0,1),Size=UDim2.new(1,-6,0,18),}},
					{4,"TextBox",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,ClearTextOnFocus=false,Font=3,Name="SearchBox",Parent={3},PlaceholderColor3=Color3.new(0.39215689897537,0.39215689897537,0.39215689897537),PlaceholderText="Search properties",Position=UDim2.new(0,4,0,0),Size=UDim2.new(1,-24,0,18),Text="",TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,}},
					{5,"UICorner",{CornerRadius=UDim.new(0,2),Parent={3},}},
					{6,"TextButton",{AutoButtonColor=false,BackgroundColor3=Color3.new(0.12549020349979,0.12549020349979,0.12549020349979),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="Reset",Parent={3},Position=UDim2.new(1,-17,0,1),Size=UDim2.new(0,16,0,16),Text="",TextColor3=Color3.new(1,1,1),TextSize=14,}},
					{7,"ImageLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Image="rbxassetid://5034718129",ImageColor3=Color3.new(0.39215686917305,0.39215686917305,0.39215686917305),Parent={6},Size=UDim2.new(0,16,0,16),}},
					{8,"TextButton",{AutoButtonColor=false,BackgroundColor3=Color3.new(0.12549020349979,0.12549020349979,0.12549020349979),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="Refresh",Parent={2},Position=UDim2.new(1,-20,0,1),Size=UDim2.new(0,18,0,18),Text="",TextColor3=Color3.new(1,1,1),TextSize=14,Visible=false,}},
					{9,"ImageLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Image="rbxassetid://5642310344",Parent={8},Position=UDim2.new(0,3,0,3),Size=UDim2.new(0,12,0,12),}},
					{10,"Frame",{BackgroundColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),BorderSizePixel=0,Name="ScrollCorner",Parent={1},Position=UDim2.new(1,-16,1,-16),Size=UDim2.new(0,16,0,16),Visible=false,}},
					{11,"Frame",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,ClipsDescendants=true,Name="List",Parent={1},Position=UDim2.new(0,0,0,23),Size=UDim2.new(1,0,1,-23),}},
				})

				-- Vars
				categoryOrder =  API.CategoryOrder
				for category,_ in next,categoryOrder do
					if not Properties.CollapsedCategories[category] then
						expanded["CAT_"..category] = true
					end
				end
				expanded["Sound.SoundId"] = true

				-- Init window
				window = Lib.Window.new()
				Properties.Window = window
				window:SetTitle("Properties")

				toolBar = guiItems.ToolBar
				propsFrame = guiItems.List

				Properties.GuiElems.ToolBar = toolBar
				Properties.GuiElems.PropsFrame = propsFrame

				Properties.InitEntryStuff()

				-- Window events
				window.GuiElems.Main:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
					if Properties.Window:IsContentVisible() then
						Properties.UpdateView()
						Properties.Refresh()
					end
				end)
				window.OnActivate:Connect(function()
					Properties.UpdateView()
					Properties.Update()
					Properties.Refresh()
				end)
				window.OnRestore:Connect(function()
					Properties.UpdateView()
					Properties.Update()
					Properties.Refresh()
				end)

				-- Init scrollbars
				scrollV = Lib.ScrollBar.new()		
				scrollV.WheelIncrement = 3
				scrollV.Gui.Position = UDim2.new(1,-16,0,23)
				scrollV:SetScrollFrame(propsFrame)
				scrollV.Scrolled:Connect(function()
					Properties.Index = scrollV.Index
					Properties.Refresh()
				end)

				scrollH = Lib.ScrollBar.new(true)
				scrollH.Increment = 5
				scrollH.WheelIncrement = 20
				scrollH.Gui.Position = UDim2.new(0,0,1,-16)
				scrollH.Scrolled:Connect(function()
					Properties.Refresh()
				end)

				-- Setup Gui
				window.GuiElems.Line.Position = UDim2.new(0,0,0,22)
				toolBar.Parent = window.GuiElems.Content
				propsFrame.Parent = window.GuiElems.Content
				guiItems.ScrollCorner.Parent = window.GuiElems.Content
				scrollV.Gui.Parent = window.GuiElems.Content
				scrollH.Gui.Parent = window.GuiElems.Content
				Properties.InitInputBox()
				Properties.InitSearch()
			end

			return Properties
		end

		-- TODO: Remove when open source
		if gethsfuncs then
			_G.moduleData = {InitDeps = initDeps, InitAfterMain = initAfterMain, Main = main}
		else
			return {InitDeps = initDeps, InitAfterMain = initAfterMain, Main = main}
		end
	end,
	["ScriptViewer"] = function()
--[[
	Script Viewer App Module
	
	A script viewer that is basically a notepad
]]

		-- Common Locals
		local Main,Lib,Apps,Settings -- Main Containers
		local Explorer, Properties, ScriptViewer, Notebook -- Major Apps
		local API,RMD,env,service,plr,create,createSimple -- Main Locals

		local function initDeps(data)
			Main = data.Main
			Lib = data.Lib
			Apps = data.Apps
			Settings = data.Settings

			API = data.API
			RMD = data.RMD
			env = data.env
			service = data.service
			plr = data.plr
			create = data.create
			createSimple = data.createSimple
		end

		local function initAfterMain()
			Explorer = Apps.Explorer
			Properties = Apps.Properties
			ScriptViewer = Apps.ScriptViewer
			Notebook = Apps.Notebook
		end

		local function main()
			local ScriptViewer = {}

			local window,codeFrame

			ScriptViewer.ViewScript = function(scr)
				local s,source = pcall(env.decompile or function() end,scr)
				if not s or not source then
					source = "local test = 5\n\nlocal c = test + tick()\ngame.Workspace.Board:Destroy()\nstring.match('wow\\'f',\"yes\",3.4e-5,true)\ngame. Workspace.Wow\nfunction bar() print(54) end\n string . match() string 4 .match()"
					source = source.."\n"..[==[
			function a.sad() end
			function a.b:sad() end
			function 4.why() end
			function a b() end
			function string.match() end
			function string.match.why() end
			function local() end
			function local.thing() end
			string  . "sad" match
			().magnitude = 3
			a..b
			a..b()
			a...b
			a...b()
			a....b
			a....b()
			string..match()
			string....match()
			]==]
				end

				codeFrame:SetText(source)
				window:Show()
			end

			ScriptViewer.Init = function()
				window = Lib.Window.new()
				window:SetTitle("Script Viewer")
				window:Resize(500,400)
				ScriptViewer.Window = window

				codeFrame = Lib.CodeFrame.new()
				codeFrame.Frame.Position = UDim2.new(0,0,0,20)
				codeFrame.Frame.Size = UDim2.new(1,0,1,-20)
				codeFrame.Frame.Parent = window.GuiElems.Content

				-- TODO: REMOVE AND MAKE BETTER
				local copy = Instance.new("TextButton",window.GuiElems.Content)
				copy.BackgroundTransparency = 1
				copy.Size = UDim2.new(0.5,0,0,20)
				copy.Text = "Copy to Clipboard"
				copy.TextColor3 = Color3.new(1,1,1)

				copy.MouseButton1Click:Connect(function()
					local source = codeFrame:GetText()
					setclipboard(source)
				end)

				local save = Instance.new("TextButton",window.GuiElems.Content)
				save.BackgroundTransparency = 1
				save.Position = UDim2.new(0.5,0,0,0)
				save.Size = UDim2.new(0.5,0,0,20)
				save.Text = "Save to File"
				save.TextColor3 = Color3.new(1,1,1)

				save.MouseButton1Click:Connect(function()
					local source = codeFrame:GetText()
					local filename = "Place_"..game.PlaceId.."_Script_"..os.time()..".txt"

					writefile(filename,source)
					if movefileas then -- TODO: USE ENV
						movefileas(filename,".txt")
					end
				end)
			end

			return ScriptViewer
		end

		-- TODO: Remove when open source
		if gethsfuncs then
			_G.moduleData = {InitDeps = initDeps, InitAfterMain = initAfterMain, Main = main}
		else
			return {InitDeps = initDeps, InitAfterMain = initAfterMain, Main = main}
		end
	end,
}
--[[
	New Dex
	Final Version
	Developed by Moon
	
	Dex is a debugging suite designed to help the user debug games and find any potential vulnerabilities.
	
	This is the final version of this script.
	You are encouraged to edit, fork, do whatever with this. I pretty much won't be updating it anymore.
	Though I would appreciate it if you kept the credits in the script if you enjoy this hard work.
	
	If you want more info, you can join the server: https://discord.io/zinnia
	Note that very limited to no support will be provided.
]]

-- Main vars
local Main, Explorer, Properties, ScriptViewer, DefaultSettings, Notebook, Serializer, Lib
local API, RMD

-- Default Settings
DefaultSettings = (function()
	local rgb = Color3.fromRGB
	return {
		Explorer = {
			_Recurse = true,
			Sorting = true,
			TeleportToOffset = Vector3.new(0,0,0),
			ClickToRename = true,
			AutoUpdateSearch = true,
			AutoUpdateMode = 0, -- 0 Default, 1 no tree update, 2 no descendant events, 3 frozen
			PartSelectionBox = true,
			GuiSelectionBox = true,
			CopyPathUseGetChildren = true
		},
		Properties = {
			_Recurse = true,
			MaxConflictCheck = 50,
			ShowDeprecated = false,
			ShowHidden = false,
			ClearOnFocus = false,
			LoadstringInput = true,
			NumberRounding = 3,
			ShowAttributes = false,
			MaxAttributes = 50,
			ScaleType = 1 -- 0 Full Name Shown, 1 Equal Halves
		},
		Theme = {
			_Recurse = true,
			Main1 = rgb(52,52,52),
			Main2 = rgb(45,45,45),
			Outline1 = rgb(33,33,33), -- Mainly frames
			Outline2 = rgb(55,55,55), -- Mainly button
			Outline3 = rgb(30,30,30), -- Mainly textbox
			TextBox = rgb(38,38,38),
			Menu = rgb(32,32,32),
			ListSelection = rgb(11,90,175),
			Button = rgb(60,60,60),
			ButtonHover = rgb(68,68,68),
			ButtonPress = rgb(40,40,40),
			Highlight = rgb(75,75,75),
			Text = rgb(255,255,255),
			PlaceholderText = rgb(100,100,100),
			Important = rgb(255,0,0),
			ExplorerIconMap = "",
			MiscIconMap = "",
			Syntax = {
				Text = rgb(204,204,204),
				Background = rgb(36,36,36),
				Selection = rgb(255,255,255),
				SelectionBack = rgb(11,90,175),
				Operator = rgb(204,204,204),
				Number = rgb(255,198,0),
				String = rgb(173,241,149),
				Comment = rgb(102,102,102),
				Keyword = rgb(248,109,124),
				Error = rgb(255,0,0),
				FindBackground = rgb(141,118,0),
				MatchingWord = rgb(85,85,85),
				BuiltIn = rgb(132,214,247),
				CurrentLine = rgb(45,50,65),
				LocalMethod = rgb(253,251,172),
				LocalProperty = rgb(97,161,241),
				Nil = rgb(255,198,0),
				Bool = rgb(255,198,0),
				Function = rgb(248,109,124),
				Local = rgb(248,109,124),
				Self = rgb(248,109,124),
				FunctionName = rgb(253,251,172),
				Bracket = rgb(204,204,204)
			},
		}
	}
end)()

-- Vars
local Settings = {}
local Apps = {}
local env = {}
local service = setmetatable({},{__index = function(self,name)
	local serv = game:GetService(name)
	self[name] = serv
	return serv
end})
local plr = service.Players.LocalPlayer or service.Players.PlayerAdded:wait()

local create = function(data)
	local insts = {}
	for i,v in pairs(data) do insts[v[1]] = Instance.new(v[2]) end

	for _,v in pairs(data) do
		for prop,val in pairs(v[3]) do
			if type(val) == "table" then
				insts[v[1]][prop] = insts[val[1]]
			else
				insts[v[1]][prop] = val
			end
		end
	end

	return insts[1]
end

local createSimple = function(class,props)
	local inst = Instance.new(class)
	for i,v in next,props do
		inst[i] = v
	end
	return inst
end

Main = (function()
	local Main = {}

	Main.ModuleList = {"Explorer","Properties","ScriptViewer"}
	Main.Elevated = false
	Main.MissingEnv = {}
	Main.Version = "Beta 1.0.0"
	Main.Mouse = plr:GetMouse()
	Main.AppControls = {}
	Main.Apps = Apps
	Main.MenuApps = {}
	Main.GitRepoName = "peyton2465/Dex"

	Main.DisplayOrders = {
		SideWindow = 8,
		Window = 10,
		Menu = 100000,
		Core = 101000
	}

	Main.GetInitDeps = function()
		return {
			Main = Main,
			Lib = Lib,
			Apps = Apps,
			Settings = Settings,

			API = API,
			RMD = RMD,
			env = env,
			service = service,
			plr = plr,
			create = create,
			createSimple = createSimple
		}
	end

	Main.Error = function(str)
		if rconsoleprint then
			rconsoleprint("DEX ERROR: "..tostring(str).."\n")
			coroutine.yield()
		else
			error(str)
		end
	end

	Main.LoadModule = function(name)
		if Main.Elevated then -- If you don't have filesystem api then ur outta luck tbh
			local control

			if EmbeddedModules then -- Offline Modules
				control = EmbeddedModules[name]()

				-- TODO: Remove when open source
				if gethsfuncs then
					control = _G.moduleData
				end

				if not control then Main.Error("Missing Embedded Module: "..name) end
			elseif _G.DebugLoadModel then -- Load Debug Model File
				local model = Main.DebugModel
				if not model then model = game:GetObjects(getsynasset("AfterModules.rbxm"))[1] end

				control = loadstring(model.Modules[name].Source)()
				print("Locally Loaded Module",name,control)
			else
				-- Get hash data
				local hashs = Main.ModuleHashData
				if not hashs then
					local s,hashDataStr = true, ""
					if not s then Main.Error("Failed to get module hashs") end

					local s,hashData = pcall(service.HttpService.JSONDecode,service.HttpService,hashDataStr)
					if not s then Main.Error("Failed to decode module hash JSON") end

					hashs = hashData
					Main.ModuleHashData = hashs
				end

				-- Check if local copy exists with matching hashs
				local hashfunc = (syn and syn.crypt.hash) or function() return "" end
				local filePath = "dex/ModuleCache/"..name..".lua"
				local s,moduleStr = pcall(env.readfile,filePath)

				if s and hashfunc(moduleStr) == hashs[name] then
					control = loadstring(moduleStr)()
				else
					-- Download and cache
					local s,moduleStr = false, ""
					if not s then Main.Error("Failed to get external module data of "..name) end

					env.writefile(filePath,moduleStr)
					control = loadstring(moduleStr)()
				end
			end

			Main.AppControls[name] = control
			control.InitDeps(Main.GetInitDeps())

			local moduleData = control.Main()
			Apps[name] = moduleData
			return moduleData
		else
			local module = script:WaitForChild("Modules"):WaitForChild(name,2)
			if not module then Main.Error("CANNOT FIND MODULE "..name) end

			local control = require(module)
			Main.AppControls[name] = control
			control.InitDeps(Main.GetInitDeps())

			local moduleData = control.Main()
			Apps[name] = moduleData
			return moduleData
		end
	end

	Main.LoadModules = function()
		for i,v in pairs(Main.ModuleList) do
			local s,e = pcall(Main.LoadModule,v)
			if not s then
				Main.Error("FAILED LOADING " + v + " CAUSE " + e)
			end
		end

		-- Init Major Apps and define them in modules
		Explorer = Apps.Explorer
		Properties = Apps.Properties
		ScriptViewer = Apps.ScriptViewer
		Notebook = Apps.Notebook
		local appTable = {
			Explorer = Explorer,
			Properties = Properties,
			ScriptViewer = ScriptViewer,
			Notebook = Notebook
		}

		Main.AppControls.Lib.InitAfterMain(appTable)
		for i,v in pairs(Main.ModuleList) do
			local control = Main.AppControls[v]
			if control then
				control.InitAfterMain(appTable)
			end
		end
	end

	Main.InitEnv = function()
		setmetatable(env,{__newindex = function(self,name,func)
			if not func then Main.MissingEnv[#Main.MissingEnv+1] = name return end
			rawset(self,name,func)
		end})

		-- file
		env.readfile = readfile
		env.writefile = writefile
		env.appendfile = appendfile
		env.makefolder = makefolder
		env.listfiles = listfiles
		env.loadfile = loadfile
		env.saveinstance = saveinstance

		-- debug
		env.getupvalues = debug.getupvalues or getupvals
		env.getconstants = debug.getconstants or getconsts
		env.islclosure = islclosure or is_l_closure
		env.checkcaller = checkcaller
		env.getreg = getreg
		env.getgc = getgc

		-- other
		env.setfflag = setfflag
		env.decompile = decompile
		env.protectgui = protect_gui or (syn and syn.protect_gui)
		env.gethui = gethui
		env.setclipboard = setclipboard
		env.getnilinstances = getnilinstances or get_nil_instances
		env.getloadedmodules = getloadedmodules

		if identifyexecutor then
			Main.Executor = identifyexecutor()
		end

		Main.GuiHolder = Main.Elevated and service.CoreGui or plr:FindFirstChildOfClass("PlayerGui")

		setmetatable(env,nil)
	end

	--[[
	Main.IncompatibleTest = function()
		local function incompatibleMessage(reason)
			local msg = Instance.new("ScreenGui")
			local t = Instance.new("TextLabel",msg)
			t.BackgroundColor3 = Color3.fromRGB(50,50,50)
			t.Position = UDim2.new(0,0,0,-36)
			t.Size = UDim2.new(1,0,1,36)
			t.TextColor3 = Color3.new(1,1,1)
			t.TextWrapped = true
			t.TextScaled = true
			t.Text = "\n\n\n\n\n\n\n\nHello Skidsploit user,\nZinnia and the Secret Service does not approve of Dex being used on your skidsploit.\nPlease consider getting something better.\n\nIncompatible Reason: "..reason.."\n\n\n\n\n\n\n\n"
			
			local sound = Instance.new("Sound",msg)
			sound.SoundId = "rbxassetid://175964948"
			sound.Volume = 1
			sound.Looped = true
			sound.Playing = true
			Lib.ShowGui(msg)
			
			if os and os.execute then pcall(os.execute,'explorer "https://x.synapse.to/"') end
			while wait() do end
		end
		
		local t = {}
		t[1] = t
		local x = unpack(t) or incompatibleMessage("WRAPPER FAILED TO CYCLIC #1")
		if x[1] ~= t then incompatibleMessage("WRAPPER FAILED TO CYCLIC #2") end
		
		if game ~= workspace.Parent then incompatibleMessage("WRAPPER NO CACHE") end
		
		if Main.Elevated and not loadstring("for i = 1,1 do continue end") then incompatibleMessage("CAN'T CONTINUE OR NO LOADSTRING") end
		
		local obj = newproxy(true)
		local mt = getmetatable(obj)
		mt.__index = function() incompatibleMessage("CAN'T NAMECALL") end
		mt.__namecall = function() end
		obj:No()
		
		local fEnv = setmetatable({zin = 5},{__index = getfenv()})
		local caller = function(f) f() end
		setfenv(caller,fEnv)
		caller(function() if not getfenv(2).zin then incompatibleMessage("RERU WILL BE FILING A LAWSUIT AGAINST YOU SOON") end end)
		
		local second = false
		coroutine.wrap(function() local start = tick() wait(5) if tick() - start < 0.1 or not second then incompatibleMessage("SKIDDED YIELDING") end end)()
		second = true
	end
	]]

	Main.LoadSettings = function()
		local s,data = pcall(env.readfile or error,"DexSettings.json")
		if s and data and data ~= "" then
			local s,decoded = service.HttpService:JSONDecode(data)
			if s and decoded then
				for i,v in next,decoded do

				end
			else
				-- TODO: Notification
			end
		else
			Main.ResetSettings()
		end
	end

	Main.ResetSettings = function()
		local function recur(t,res)
			for set,val in pairs(t) do
				if type(val) == "table" and val._Recurse then
					if type(res[set]) ~= "table" then
						res[set] = {}
					end
					recur(val,res[set])
				else
					res[set] = val
				end
			end
			return res
		end
		recur(DefaultSettings,Settings)
	end

	Main.FetchAPI = function()
		local api,rawAPI
		--if Main.Elevated then
			--if Main.LocalDepsUpToDate() then
				rawAPI = '{"Classes":[{"Members":[{"Category":"Behavior","MemberType":"Property","Name":"Archivable","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"ClassName","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"Data","MemberType":"Property","Name":"DataCost","Security":{"Read":"LocalUserSecurity","Write":"LocalUserSecurity"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Data","MemberType":"Property","Name":"Name","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"Data","MemberType":"Property","Name":"Parent","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"Class","Name":"Instance"}},{"Category":"Data","MemberType":"Property","Name":"RobloxLocked","Security":{"Read":"PluginSecurity","Write":"PluginSecurity"},"Serialization":{"CanLoad":false,"CanSave":false},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Behavior","MemberType":"Property","Name":"archivable","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["Hidden","NotReplicated","Deprecated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"className","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated","Deprecated"],"ValueType":{"Category":"Primitive","Name":"string"}},{"MemberType":"Function","Name":"ClearAllChildren","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"Clone","Parameters":[],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None"},{"MemberType":"Function","Name":"Destroy","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"FindFirstAncestor","Parameters":[{"Name":"name","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None"},{"MemberType":"Function","Name":"FindFirstAncestorOfClass","Parameters":[{"Name":"className","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None"},{"MemberType":"Function","Name":"FindFirstAncestorWhichIsA","Parameters":[{"Name":"className","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None"},{"MemberType":"Function","Name":"FindFirstChild","Parameters":[{"Name":"name","Type":{"Category":"Primitive","Name":"string"}},{"Default":"false","Name":"recursive","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None"},{"MemberType":"Function","Name":"FindFirstChildOfClass","Parameters":[{"Name":"className","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None"},{"MemberType":"Function","Name":"FindFirstChildWhichIsA","Parameters":[{"Name":"className","Type":{"Category":"Primitive","Name":"string"}},{"Default":"false","Name":"recursive","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None"},{"MemberType":"Function","Name":"GetChildren","Parameters":[],"ReturnType":{"Category":"DataType","Name":"Objects"},"Security":"None"},{"MemberType":"Function","Name":"GetDebugId","Parameters":[{"Default":"4","Name":"scopeLength","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Primitive","Name":"string"},"Security":"PluginSecurity","Tags":["NotBrowsable"]},{"MemberType":"Function","Name":"GetDescendants","Parameters":[],"ReturnType":{"Category":"Group","Name":"Array"},"Security":"None","Tags":["CustomLuaState"]},{"MemberType":"Function","Name":"GetFullName","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"string"},"Security":"None"},{"MemberType":"Function","Name":"GetPropertyChangedSignal","Parameters":[{"Name":"property","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"DataType","Name":"RBXScriptSignal"},"Security":"None"},{"MemberType":"Function","Name":"IsA","Parameters":[{"Name":"className","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Function","Name":"IsAncestorOf","Parameters":[{"Name":"descendant","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Function","Name":"IsDescendantOf","Parameters":[{"Name":"ancestor","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Function","Name":"Remove","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"WaitForChild","Parameters":[{"Name":"childName","Type":{"Category":"Primitive","Name":"string"}},{"Name":"timeOut","Type":{"Category":"Primitive","Name":"double"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None","Tags":["CustomLuaState","CanYield"]},{"MemberType":"Function","Name":"children","Parameters":[],"ReturnType":{"Category":"DataType","Name":"Objects"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"clone","Parameters":[],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"destroy","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"findFirstChild","Parameters":[{"Name":"name","Type":{"Category":"Primitive","Name":"string"}},{"Default":"false","Name":"recursive","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"getChildren","Parameters":[],"ReturnType":{"Category":"DataType","Name":"Objects"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"isA","Parameters":[{"Name":"className","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"isDescendantOf","Parameters":[{"Name":"ancestor","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"remove","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Event","Name":"AncestryChanged","Parameters":[{"Name":"child","Type":{"Category":"Class","Name":"Instance"}},{"Name":"parent","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"},{"MemberType":"Event","Name":"Changed","Parameters":[{"Name":"property","Type":{"Category":"Primitive","Name":"string"}}],"Security":"None"},{"MemberType":"Event","Name":"ChildAdded","Parameters":[{"Name":"child","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"},{"MemberType":"Event","Name":"ChildRemoved","Parameters":[{"Name":"child","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"},{"MemberType":"Event","Name":"DescendantAdded","Parameters":[{"Name":"descendant","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"},{"MemberType":"Event","Name":"DescendantRemoving","Parameters":[{"Name":"descendant","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"},{"MemberType":"Event","Name":"childAdded","Parameters":[{"Name":"child","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None","Tags":["Deprecated"]}],"MemoryCategory":"Instances","Name":"Instance","Superclass":"<<<ROOT>>>","Tags":["NotCreatable","NotBrowsable"]},{"Members":[{"Category":"Appearance","MemberType":"Property","Name":"AttachmentForward","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Appearance","MemberType":"Property","Name":"AttachmentPoint","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"CFrame"}},{"Category":"Appearance","MemberType":"Property","Name":"AttachmentPos","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Appearance","MemberType":"Property","Name":"AttachmentRight","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Appearance","MemberType":"Property","Name":"AttachmentUp","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"DataType","Name":"Vector3"}}],"MemoryCategory":"Instances","Name":"Accoutrement","Superclass":"Instance"},{"Members":[],"MemoryCategory":"Instances","Name":"Accessory","Superclass":"Accoutrement"},{"Members":[],"MemoryCategory":"Instances","Name":"Hat","Superclass":"Accoutrement","Tags":["Deprecated"]},{"Members":[{"MemberType":"Function","Name":"ShowVideoAd","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Event","Name":"VideoAdClosed","Parameters":[{"Name":"adShown","Type":{"Category":"Primitive","Name":"bool"}}],"Security":"None","Tags":["Deprecated"]}],"MemoryCategory":"Instances","Name":"AdService","Superclass":"Instance","Tags":["NotCreatable","Service"]},{"Members":[],"MemoryCategory":"Instances","Name":"AdvancedDragger","Superclass":"Instance"},{"Members":[{"MemberType":"Function","Name":"ReleaseRBXEventStream","Parameters":[{"Name":"target","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"ReportCounter","Parameters":[{"Name":"counterName","Type":{"Category":"Primitive","Name":"string"}},{"Default":"1","Name":"amount","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"ReportInfluxSeries","Parameters":[{"Name":"seriesName","Type":{"Category":"Primitive","Name":"string"}},{"Name":"points","Type":{"Category":"Group","Name":"Dictionary"}},{"Name":"throttlingPercentage","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"ReportStats","Parameters":[{"Name":"category","Type":{"Category":"Primitive","Name":"string"}},{"Name":"value","Type":{"Category":"Primitive","Name":"float"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"SendEventDeferred","Parameters":[{"Name":"target","Type":{"Category":"Primitive","Name":"string"}},{"Name":"eventContext","Type":{"Category":"Primitive","Name":"string"}},{"Name":"eventName","Type":{"Category":"Primitive","Name":"string"}},{"Name":"additionalArgs","Type":{"Category":"Group","Name":"Dictionary"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"SendEventImmediately","Parameters":[{"Name":"target","Type":{"Category":"Primitive","Name":"string"}},{"Name":"eventContext","Type":{"Category":"Primitive","Name":"string"}},{"Name":"eventName","Type":{"Category":"Primitive","Name":"string"}},{"Name":"additionalArgs","Type":{"Category":"Group","Name":"Dictionary"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"SetRBXEvent","Parameters":[{"Name":"target","Type":{"Category":"Primitive","Name":"string"}},{"Name":"eventContext","Type":{"Category":"Primitive","Name":"string"}},{"Name":"eventName","Type":{"Category":"Primitive","Name":"string"}},{"Name":"additionalArgs","Type":{"Category":"Group","Name":"Dictionary"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"SetRBXEventStream","Parameters":[{"Name":"target","Type":{"Category":"Primitive","Name":"string"}},{"Name":"eventContext","Type":{"Category":"Primitive","Name":"string"}},{"Name":"eventName","Type":{"Category":"Primitive","Name":"string"}},{"Name":"additionalArgs","Type":{"Category":"Group","Name":"Dictionary"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"TrackEvent","Parameters":[{"Name":"category","Type":{"Category":"Primitive","Name":"string"}},{"Name":"action","Type":{"Category":"Primitive","Name":"string"}},{"Name":"label","Type":{"Category":"Primitive","Name":"string"}},{"Default":"0","Name":"value","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"UpdateHeartbeatObject","Parameters":[{"Name":"args","Type":{"Category":"Group","Name":"Dictionary"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"}],"MemoryCategory":"Instances","Name":"AnalyticsService","Superclass":"Instance","Tags":["NotCreatable","Service"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"AnimationId","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Content"}}],"MemoryCategory":"Animation","Name":"Animation","Superclass":"Instance"},{"Members":[{"MemberType":"Function","Name":"GetPlayingAnimationTracks","Parameters":[],"ReturnType":{"Category":"Group","Name":"Array"},"Security":"None"},{"MemberType":"Function","Name":"LoadAnimation","Parameters":[{"Name":"animation","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None"},{"MemberType":"Event","Name":"AnimationPlayed","Parameters":[{"Name":"animationTrack","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"}],"MemoryCategory":"Animation","Name":"AnimationController","Superclass":"Instance"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Animation","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Class","Name":"Animation"}},{"Category":"Data","MemberType":"Property","Name":"IsPlaying","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"Length","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"Looped","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"Priority","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"AnimationPriority"}},{"Category":"Data","MemberType":"Property","Name":"Speed","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"TimePosition","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"WeightCurrent","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"WeightTarget","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"MemberType":"Function","Name":"AdjustSpeed","Parameters":[{"Default":"1","Name":"speed","Type":{"Category":"Primitive","Name":"float"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"AdjustWeight","Parameters":[{"Default":"1","Name":"weight","Type":{"Category":"Primitive","Name":"float"}},{"Default":"0.100000001","Name":"fadeTime","Type":{"Category":"Primitive","Name":"float"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"GetTimeOfKeyframe","Parameters":[{"Name":"keyframeName","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"double"},"Security":"None"},{"MemberType":"Function","Name":"Play","Parameters":[{"Default":"0.100000001","Name":"fadeTime","Type":{"Category":"Primitive","Name":"float"}},{"Default":"1","Name":"weight","Type":{"Category":"Primitive","Name":"float"}},{"Default":"1","Name":"speed","Type":{"Category":"Primitive","Name":"float"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"Stop","Parameters":[{"Default":"0.100000001","Name":"fadeTime","Type":{"Category":"Primitive","Name":"float"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Event","Name":"DidLoop","Parameters":[],"Security":"None"},{"MemberType":"Event","Name":"KeyframeReached","Parameters":[{"Name":"keyframeName","Type":{"Category":"Primitive","Name":"string"}}],"Security":"None"},{"MemberType":"Event","Name":"Stopped","Parameters":[],"Security":"None"}],"MemoryCategory":"Animation","Name":"AnimationTrack","Superclass":"Instance","Tags":["NotCreatable"]},{"Members":[{"MemberType":"Function","Name":"LoadAnimation","Parameters":[{"Name":"animation","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None"},{"MemberType":"Function","Name":"StepAnimations","Parameters":[{"Name":"deltaTime","Type":{"Category":"Primitive","Name":"float"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"PluginSecurity"}],"MemoryCategory":"Instances","Name":"Animator","Superclass":"Instance"},{"Members":[{"MemberType":"Function","Name":"CreatePlaceAsync","Parameters":[{"Name":"placeName","Type":{"Category":"Primitive","Name":"string"}},{"Name":"templatePlaceID","Type":{"Category":"Primitive","Name":"int64"}},{"Default":"","Name":"description","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"int64"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"CreatePlaceInPlayerInventoryAsync","Parameters":[{"Name":"player","Type":{"Category":"Class","Name":"Instance"}},{"Name":"placeName","Type":{"Category":"Primitive","Name":"string"}},{"Name":"templatePlaceID","Type":{"Category":"Primitive","Name":"int64"}},{"Default":"","Name":"description","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"int64"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"GetAssetIdsForPackage","Parameters":[{"Name":"packageAssetId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Group","Name":"Array"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"GetAssetThumbnailAsync","Parameters":[{"Name":"assetId","Type":{"Category":"Primitive","Name":"int64"}},{"Name":"thumbnailSize","Type":{"Category":"DataType","Name":"Vector2"}},{"Default":"0","Name":"assetType","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Group","Name":"Tuple"},"Security":"RobloxScriptSecurity","Tags":["Yields"]},{"MemberType":"Function","Name":"GetCreatorAssetID","Parameters":[{"Name":"creationID","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Primitive","Name":"int64"},"Security":"None","Tags":["Yields","Deprecated"]},{"MemberType":"Function","Name":"GetGamePlacesAsync","Parameters":[],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"SavePlaceAsync","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Yields"]}],"MemoryCategory":"Instances","Name":"AssetService","Superclass":"Instance","Tags":["NotCreatable","Service"]},{"Members":[{"Category":"Derived Data","MemberType":"Property","Name":"Axis","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Data","MemberType":"Property","Name":"CFrame","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"CFrame"}},{"Category":"Data","MemberType":"Property","Name":"Orientation","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Data","MemberType":"Property","Name":"Position","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Data","MemberType":"Property","Name":"Rotation","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Derived Data","MemberType":"Property","Name":"SecondaryAxis","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Appearance","MemberType":"Property","Name":"Visible","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Derived Data","MemberType":"Property","Name":"WorldAxis","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Derived Data","MemberType":"Property","Name":"WorldCFrame","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"DataType","Name":"CFrame"}},{"Category":"Derived Data","MemberType":"Property","Name":"WorldOrientation","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Derived Data","MemberType":"Property","Name":"WorldPosition","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Derived Data","MemberType":"Property","Name":"WorldRotation","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated","Deprecated"],"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Derived Data","MemberType":"Property","Name":"WorldSecondaryAxis","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"DataType","Name":"Vector3"}},{"MemberType":"Function","Name":"GetAxis","Parameters":[],"ReturnType":{"Category":"DataType","Name":"Vector3"},"Security":"None"},{"MemberType":"Function","Name":"GetSecondaryAxis","Parameters":[],"ReturnType":{"Category":"DataType","Name":"Vector3"},"Security":"None"},{"MemberType":"Function","Name":"SetAxis","Parameters":[{"Name":"axis","Type":{"Category":"DataType","Name":"Vector3"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"SetSecondaryAxis","Parameters":[{"Name":"axis","Type":{"Category":"DataType","Name":"Vector3"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"}],"MemoryCategory":"Instances","Name":"Attachment","Superclass":"Instance"},{"Members":[{"MemberType":"Function","Name":"AwardBadge","Parameters":[{"Name":"userId","Type":{"Category":"Primitive","Name":"int64"}},{"Name":"badgeId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"GetBadgeInfoAsync","Parameters":[{"Name":"badgeId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Group","Name":"Dictionary"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"IsDisabled","Parameters":[{"Name":"badgeId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"IsLegal","Parameters":[{"Name":"badgeId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"UserHasBadge","Parameters":[{"Name":"userId","Type":{"Category":"Primitive","Name":"int64"}},{"Name":"badgeId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None","Tags":["Yields","Deprecated"]},{"MemberType":"Function","Name":"UserHasBadgeAsync","Parameters":[{"Name":"userId","Type":{"Category":"Primitive","Name":"int64"}},{"Name":"badgeId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None","Tags":["Yields"]},{"MemberType":"Event","Name":"BadgeAwarded","Parameters":[{"Name":"message","Type":{"Category":"Primitive","Name":"string"}},{"Name":"userId","Type":{"Category":"Primitive","Name":"int64"}},{"Name":"badgeId","Type":{"Category":"Primitive","Name":"int64"}}],"Security":"RobloxScriptSecurity"}],"MemoryCategory":"Instances","Name":"BadgeService","Superclass":"Instance","Tags":["NotCreatable","Service"]},{"Members":[],"MemoryCategory":"Instances","Name":"BasePlayerGui","Superclass":"Instance","Tags":["NotCreatable"]},{"Members":[{"Category":"Appearance","MemberType":"Property","Name":"SelectionImageObject","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Class","Name":"GuiObject"}},{"Category":"Data","MemberType":"Property","Name":"Version","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"int"}},{"MemberType":"Function","Name":"SetUserGuiRendering","Parameters":[{"Name":"enabled","Type":{"Category":"Primitive","Name":"bool"}},{"Name":"guiAdornee","Type":{"Category":"Class","Name":"Instance"}},{"Name":"faceId","Type":{"Category":"Enum","Name":"NormalId"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"}],"MemoryCategory":"Instances","Name":"CoreGui","Superclass":"BasePlayerGui","Tags":["NotCreatable","Service","NotReplicated"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"CurrentScreenOrientation","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Enum","Name":"ScreenOrientation"}},{"Category":"Data","MemberType":"Property","Name":"ScreenOrientation","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"ScreenOrientation"}},{"Category":"Appearance","MemberType":"Property","Name":"SelectionImageObject","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Class","Name":"GuiObject"}},{"MemberType":"Function","Name":"GetTopbarTransparency","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"float"},"Security":"None"},{"MemberType":"Function","Name":"SetTopbarTransparency","Parameters":[{"Name":"transparency","Type":{"Category":"Primitive","Name":"float"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Event","Name":"TopbarTransparencyChangedSignal","Parameters":[{"Name":"transparency","Type":{"Category":"Primitive","Name":"float"}}],"Security":"None"}],"MemoryCategory":"Instances","Name":"PlayerGui","Superclass":"BasePlayerGui","Tags":["NotCreatable","PlayerReplicated"]},{"Members":[{"Category":"Behavior","MemberType":"Property","Name":"ProcessUserInput","Security":{"Read":"PluginSecurity","Write":"PluginSecurity"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["Hidden","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"ResetPlayerGuiOnSpawn","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"Tags":["Deprecated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"ScreenOrientation","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"ScreenOrientation"}},{"Category":"Data","MemberType":"Property","Name":"ShowDevelopmentGui","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"MemberType":"Function","Name":"GetCoreGuiEnabled","Parameters":[{"Name":"coreGuiType","Type":{"Category":"Enum","Name":"CoreGuiType"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Function","Name":"RegisterGetCore","Parameters":[{"Name":"parameterName","Type":{"Category":"Primitive","Name":"string"}},{"Name":"getFunction","Type":{"Category":"DataType","Name":"Function"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"RegisterSetCore","Parameters":[{"Name":"parameterName","Type":{"Category":"Primitive","Name":"string"}},{"Name":"setFunction","Type":{"Category":"DataType","Name":"Function"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"SetCore","Parameters":[{"Name":"parameterName","Type":{"Category":"Primitive","Name":"string"}},{"Name":"value","Type":{"Category":"Group","Name":"Variant"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"SetCoreGuiEnabled","Parameters":[{"Name":"coreGuiType","Type":{"Category":"Enum","Name":"CoreGuiType"}},{"Name":"enabled","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"GetCore","Parameters":[{"Name":"parameterName","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Group","Name":"Variant"},"Security":"None","Tags":["Yields"]},{"MemberType":"Event","Name":"CoreGuiChangedSignal","Parameters":[{"Name":"coreGuiType","Type":{"Category":"Enum","Name":"CoreGuiType"}},{"Name":"enabled","Type":{"Category":"Primitive","Name":"bool"}}],"Security":"RobloxScriptSecurity"}],"MemoryCategory":"Instances","Name":"StarterGui","Superclass":"BasePlayerGui","Tags":["NotCreatable","Service"]},{"Members":[{"Category":"Shape","MemberType":"Property","Name":"Attachment0","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Class","Name":"Attachment"}},{"Category":"Shape","MemberType":"Property","Name":"Attachment1","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Class","Name":"Attachment"}},{"Category":"Appearance","MemberType":"Property","Name":"Color","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"ColorSequence"}},{"Category":"Shape","MemberType":"Property","Name":"CurveSize0","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Shape","MemberType":"Property","Name":"CurveSize1","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Appearance","MemberType":"Property","Name":"Enabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Shape","MemberType":"Property","Name":"FaceCamera","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Appearance","MemberType":"Property","Name":"LightEmission","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Appearance","MemberType":"Property","Name":"LightInfluence","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Shape","MemberType":"Property","Name":"Segments","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Appearance","MemberType":"Property","Name":"Texture","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Content"}},{"Category":"Appearance","MemberType":"Property","Name":"TextureLength","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Appearance","MemberType":"Property","Name":"TextureMode","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"TextureMode"}},{"Category":"Appearance","MemberType":"Property","Name":"TextureSpeed","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Appearance","MemberType":"Property","Name":"Transparency","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"NumberSequence"}},{"Category":"Shape","MemberType":"Property","Name":"Width0","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Shape","MemberType":"Property","Name":"Width1","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Appearance","MemberType":"Property","Name":"ZOffset","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"MemberType":"Function","Name":"SetTextureOffset","Parameters":[{"Default":"0","Name":"offset","Type":{"Category":"Primitive","Name":"float"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"}],"MemoryCategory":"Instances","Name":"Beam","Superclass":"Instance"},{"Members":[{"MemberType":"Function","Name":"Fire","Parameters":[{"Name":"arguments","Type":{"Category":"Group","Name":"Tuple"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Event","Name":"Event","Parameters":[{"Name":"arguments","Type":{"Category":"Group","Name":"Tuple"}}],"Security":"None"}],"MemoryCategory":"Instances","Name":"BindableEvent","Superclass":"Instance"},{"Members":[{"MemberType":"Function","Name":"Invoke","Parameters":[{"Name":"arguments","Type":{"Category":"Group","Name":"Tuple"}}],"ReturnType":{"Category":"Group","Name":"Tuple"},"Security":"None","Tags":["Yields"]},{"MemberType":"Callback","Name":"OnInvoke","Parameters":[{"Name":"arguments","Type":{"Category":"Group","Name":"Tuple"}}],"ReturnType":{"Category":"Group","Name":"Tuple"},"Security":"None"}],"MemoryCategory":"Instances","Name":"BindableFunction","Superclass":"Instance"},{"Members":[],"MemoryCategory":"Instances","Name":"BodyMover","Superclass":"Instance","Tags":["NotCreatable"]},{"Members":[{"Category":"Goals","MemberType":"Property","Name":"AngularVelocity","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Goals","MemberType":"Property","Name":"MaxTorque","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Goals","MemberType":"Property","Name":"P","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Goals","MemberType":"Property","Name":"angularvelocity","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated","Deprecated"],"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Goals","MemberType":"Property","Name":"maxTorque","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated","Deprecated"],"ValueType":{"Category":"DataType","Name":"Vector3"}}],"MemoryCategory":"Instances","Name":"BodyAngularVelocity","Superclass":"BodyMover"},{"Members":[{"Category":"Goals","MemberType":"Property","Name":"Force","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Goals","MemberType":"Property","Name":"force","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated","Deprecated"],"ValueType":{"Category":"DataType","Name":"Vector3"}}],"MemoryCategory":"Instances","Name":"BodyForce","Superclass":"BodyMover"},{"Members":[{"Category":"Goals","MemberType":"Property","Name":"CFrame","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"CFrame"}},{"Category":"Goals","MemberType":"Property","Name":"D","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Goals","MemberType":"Property","Name":"MaxTorque","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Goals","MemberType":"Property","Name":"P","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Goals","MemberType":"Property","Name":"cframe","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated","Deprecated"],"ValueType":{"Category":"DataType","Name":"CFrame"}},{"Category":"Goals","MemberType":"Property","Name":"maxTorque","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated","Deprecated"],"ValueType":{"Category":"DataType","Name":"Vector3"}}],"MemoryCategory":"Instances","Name":"BodyGyro","Superclass":"BodyMover"},{"Members":[{"Category":"Goals","MemberType":"Property","Name":"D","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Goals","MemberType":"Property","Name":"MaxForce","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Goals","MemberType":"Property","Name":"P","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Goals","MemberType":"Property","Name":"Position","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Goals","MemberType":"Property","Name":"maxForce","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated","Deprecated"],"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Goals","MemberType":"Property","Name":"position","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated","Deprecated"],"ValueType":{"Category":"DataType","Name":"Vector3"}},{"MemberType":"Function","Name":"GetLastForce","Parameters":[],"ReturnType":{"Category":"DataType","Name":"Vector3"},"Security":"None"},{"MemberType":"Function","Name":"lastForce","Parameters":[],"ReturnType":{"Category":"DataType","Name":"Vector3"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Event","Name":"ReachedTarget","Parameters":[],"Security":"None"}],"MemoryCategory":"Instances","Name":"BodyPosition","Superclass":"BodyMover"},{"Members":[{"Category":"Goals","MemberType":"Property","Name":"Force","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Goals","MemberType":"Property","Name":"Location","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Goals","MemberType":"Property","Name":"force","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated","Deprecated"],"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Goals","MemberType":"Property","Name":"location","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated","Deprecated"],"ValueType":{"Category":"DataType","Name":"Vector3"}}],"MemoryCategory":"Instances","Name":"BodyThrust","Superclass":"BodyMover"},{"Members":[{"Category":"Goals","MemberType":"Property","Name":"MaxForce","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Goals","MemberType":"Property","Name":"P","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Goals","MemberType":"Property","Name":"Velocity","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Goals","MemberType":"Property","Name":"maxForce","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated","Deprecated"],"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Goals","MemberType":"Property","Name":"velocity","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated","Deprecated"],"ValueType":{"Category":"DataType","Name":"Vector3"}},{"MemberType":"Function","Name":"GetLastForce","Parameters":[],"ReturnType":{"Category":"DataType","Name":"Vector3"},"Security":"None"},{"MemberType":"Function","Name":"lastForce","Parameters":[],"ReturnType":{"Category":"DataType","Name":"Vector3"},"Security":"None"}],"MemoryCategory":"Instances","Name":"BodyVelocity","Superclass":"BodyMover"},{"Members":[{"Category":"Goals","MemberType":"Property","Name":"CartoonFactor","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Thrust","MemberType":"Property","Name":"MaxSpeed","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Thrust","MemberType":"Property","Name":"MaxThrust","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Turn","MemberType":"Property","Name":"MaxTorque","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Goals","MemberType":"Property","Name":"Target","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Class","Name":"BasePart"}},{"Category":"Goals","MemberType":"Property","Name":"TargetOffset","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Goals","MemberType":"Property","Name":"TargetRadius","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Thrust","MemberType":"Property","Name":"ThrustD","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Thrust","MemberType":"Property","Name":"ThrustP","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Turn","MemberType":"Property","Name":"TurnD","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Turn","MemberType":"Property","Name":"TurnP","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"MemberType":"Function","Name":"Abort","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"Fire","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"fire","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Event","Name":"ReachedTarget","Parameters":[],"Security":"None"}],"MemoryCategory":"Instances","Name":"RocketPropulsion","Superclass":"BodyMover"},{"Members":[{"Category":"Appearance","MemberType":"Property","Name":"ClickableWhenViewportHidden","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Appearance","MemberType":"Property","Name":"Enabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Appearance","MemberType":"Property","Name":"Icon","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"DataType","Name":"Content"}},{"MemberType":"Function","Name":"SetActive","Parameters":[{"Name":"active","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"PluginSecurity"},{"MemberType":"Event","Name":"Click","Parameters":[],"Security":"PluginSecurity"}],"MemoryCategory":"Instances","Name":"Button","Superclass":"Instance","Tags":["NotCreatable"]},{"Members":[],"MemoryCategory":"Instances","Name":"CacheableContentProvider","Superclass":"Instance","Tags":["NotCreatable","Service","NotReplicated"]},{"Members":[],"MemoryCategory":"Instances","Name":"MeshContentProvider","Superclass":"CacheableContentProvider","Tags":["NotCreatable","Service","NotReplicated"]},{"Members":[],"MemoryCategory":"Instances","Name":"SolidModelContentProvider","Superclass":"CacheableContentProvider","Tags":["NotCreatable","Service","NotReplicated"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"CFrame","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"CFrame"}},{"Category":"Camera","MemberType":"Property","Name":"CameraSubject","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Class","Name":"Instance"}},{"Category":"Camera","MemberType":"Property","Name":"CameraType","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"CameraType"}},{"Category":"Data","MemberType":"Property","Name":"CoordinateFrame","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["Hidden","NotReplicated","Deprecated"],"ValueType":{"Category":"DataType","Name":"CFrame"}},{"Category":"Data","MemberType":"Property","Name":"FieldOfView","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"Focus","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"CFrame"}},{"Category":"Data","MemberType":"Property","Name":"HeadLocked","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"HeadScale","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"NearPlaneZ","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"ViewportSize","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"DataType","Name":"Vector2"}},{"Category":"Data","MemberType":"Property","Name":"focus","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated","Deprecated"],"ValueType":{"Category":"DataType","Name":"CFrame"}},{"MemberType":"Function","Name":"GetLargestCutoffDistance","Parameters":[{"Name":"ignoreList","Type":{"Category":"DataType","Name":"Objects"}}],"ReturnType":{"Category":"Primitive","Name":"float"},"Security":"None"},{"MemberType":"Function","Name":"GetPanSpeed","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"float"},"Security":"None"},{"MemberType":"Function","Name":"GetPartsObscuringTarget","Parameters":[{"Name":"castPoints","Type":{"Category":"Group","Name":"Array"}},{"Name":"ignoreList","Type":{"Category":"DataType","Name":"Objects"}}],"ReturnType":{"Category":"DataType","Name":"Objects"},"Security":"None"},{"MemberType":"Function","Name":"GetRenderCFrame","Parameters":[],"ReturnType":{"Category":"DataType","Name":"CFrame"},"Security":"None"},{"MemberType":"Function","Name":"GetRoll","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"float"},"Security":"None"},{"MemberType":"Function","Name":"GetTiltSpeed","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"float"},"Security":"None"},{"MemberType":"Function","Name":"Interpolate","Parameters":[{"Name":"endPos","Type":{"Category":"DataType","Name":"CFrame"}},{"Name":"endFocus","Type":{"Category":"DataType","Name":"CFrame"}},{"Name":"duration","Type":{"Category":"Primitive","Name":"float"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"PanUnits","Parameters":[{"Name":"units","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"ScreenPointToRay","Parameters":[{"Name":"x","Type":{"Category":"Primitive","Name":"float"}},{"Name":"y","Type":{"Category":"Primitive","Name":"float"}},{"Default":"0","Name":"depth","Type":{"Category":"Primitive","Name":"float"}}],"ReturnType":{"Category":"DataType","Name":"Ray"},"Security":"None"},{"MemberType":"Function","Name":"SetCameraPanMode","Parameters":[{"Default":"Classic","Name":"mode","Type":{"Category":"Enum","Name":"CameraPanMode"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"SetRoll","Parameters":[{"Name":"rollAngle","Type":{"Category":"Primitive","Name":"float"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"TiltUnits","Parameters":[{"Name":"units","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Function","Name":"ViewportPointToRay","Parameters":[{"Name":"x","Type":{"Category":"Primitive","Name":"float"}},{"Name":"y","Type":{"Category":"Primitive","Name":"float"}},{"Default":"0","Name":"depth","Type":{"Category":"Primitive","Name":"float"}}],"ReturnType":{"Category":"DataType","Name":"Ray"},"Security":"None"},{"MemberType":"Function","Name":"WorldToScreenPoint","Parameters":[{"Name":"worldPoint","Type":{"Category":"DataType","Name":"Vector3"}}],"ReturnType":{"Category":"Group","Name":"Tuple"},"Security":"None"},{"MemberType":"Function","Name":"WorldToViewportPoint","Parameters":[{"Name":"worldPoint","Type":{"Category":"DataType","Name":"Vector3"}}],"ReturnType":{"Category":"Group","Name":"Tuple"},"Security":"None"},{"MemberType":"Function","Name":"Zoom","Parameters":[{"Name":"distance","Type":{"Category":"Primitive","Name":"float"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"RobloxScriptSecurity"},{"MemberType":"Event","Name":"FirstPersonTransition","Parameters":[{"Name":"entering","Type":{"Category":"Primitive","Name":"bool"}}],"Security":"LocalUserSecurity"},{"MemberType":"Event","Name":"InterpolationFinished","Parameters":[],"Security":"None"}],"MemoryCategory":"Instances","Name":"Camera","Superclass":"Instance","Tags":["NotReplicated"]},{"Members":[{"MemberType":"Function","Name":"GetCanRedo","Parameters":[],"ReturnType":{"Category":"Group","Name":"Tuple"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"GetCanUndo","Parameters":[],"ReturnType":{"Category":"Group","Name":"Tuple"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"Redo","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"ResetWaypoints","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"SetEnabled","Parameters":[{"Name":"state","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"SetWaypoint","Parameters":[{"Name":"name","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"Undo","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"PluginSecurity"},{"MemberType":"Event","Name":"OnRedo","Parameters":[{"Name":"waypoint","Type":{"Category":"Primitive","Name":"string"}}],"Security":"PluginSecurity"},{"MemberType":"Event","Name":"OnUndo","Parameters":[{"Name":"waypoint","Type":{"Category":"Primitive","Name":"string"}}],"Security":"PluginSecurity"}],"MemoryCategory":"Instances","Name":"ChangeHistoryService","Superclass":"Instance","Tags":["NotCreatable","Service"]},{"Members":[],"MemoryCategory":"Instances","Name":"CharacterAppearance","Superclass":"Instance","Tags":["NotCreatable"]},{"Members":[{"Category":"Appearance","MemberType":"Property","Name":"HeadColor","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"ValueType":{"Category":"DataType","Name":"BrickColor"}},{"Category":"Appearance","MemberType":"Property","Name":"HeadColor3","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Appearance","MemberType":"Property","Name":"LeftArmColor","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"ValueType":{"Category":"DataType","Name":"BrickColor"}},{"Category":"Appearance","MemberType":"Property","Name":"LeftArmColor3","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Appearance","MemberType":"Property","Name":"LeftLegColor","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"ValueType":{"Category":"DataType","Name":"BrickColor"}},{"Category":"Appearance","MemberType":"Property","Name":"LeftLegColor3","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Appearance","MemberType":"Property","Name":"RightArmColor","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"ValueType":{"Category":"DataType","Name":"BrickColor"}},{"Category":"Appearance","MemberType":"Property","Name":"RightArmColor3","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Appearance","MemberType":"Property","Name":"RightLegColor","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"ValueType":{"Category":"DataType","Name":"BrickColor"}},{"Category":"Appearance","MemberType":"Property","Name":"RightLegColor3","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Appearance","MemberType":"Property","Name":"TorsoColor","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"ValueType":{"Category":"DataType","Name":"BrickColor"}},{"Category":"Appearance","MemberType":"Property","Name":"TorsoColor3","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}}],"MemoryCategory":"Instances","Name":"BodyColors","Superclass":"CharacterAppearance"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"BaseTextureId","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int64"}},{"Category":"Data","MemberType":"Property","Name":"BodyPart","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"BodyPart"}},{"Category":"Data","MemberType":"Property","Name":"MeshId","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int64"}},{"Category":"Data","MemberType":"Property","Name":"OverlayTextureId","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int64"}}],"MemoryCategory":"Instances","Name":"CharacterMesh","Superclass":"CharacterAppearance"},{"Members":[],"MemoryCategory":"Instances","Name":"Clothing","Superclass":"CharacterAppearance","Tags":["NotCreatable"]},{"Members":[{"Category":"Appearance","MemberType":"Property","Name":"PantsTemplate","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Content"}}],"MemoryCategory":"Instances","Name":"Pants","Superclass":"Clothing"},{"Members":[{"Category":"Appearance","MemberType":"Property","Name":"ShirtTemplate","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Content"}}],"MemoryCategory":"Instances","Name":"Shirt","Superclass":"Clothing"},{"Members":[{"Category":"Appearance","MemberType":"Property","Name":"Graphic","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Content"}}],"MemoryCategory":"Instances","Name":"ShirtGraphic","Superclass":"CharacterAppearance"},{"Members":[{"Category":"Appearance","MemberType":"Property","Name":"SkinColor","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"BrickColor"}}],"MemoryCategory":"Instances","Name":"Skin","Superclass":"CharacterAppearance","Tags":["Deprecated"]},{"Members":[{"Category":"Behavior","MemberType":"Property","Name":"LoadDefaultChat","Security":{"Read":"None","Write":"NotAccessibleSecurity"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"MemberType":"Function","Name":"Chat","Parameters":[{"Name":"partOrCharacter","Type":{"Category":"Class","Name":"Instance"}},{"Name":"message","Type":{"Category":"Primitive","Name":"string"}},{"Default":"Blue","Name":"color","Type":{"Category":"Enum","Name":"ChatColor"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"ChatLocal","Parameters":[{"Name":"partOrCharacter","Type":{"Category":"Class","Name":"Instance"}},{"Name":"message","Type":{"Category":"Primitive","Name":"string"}},{"Default":"Blue","Name":"color","Type":{"Category":"Enum","Name":"ChatColor"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"GetShouldUseLuaChat","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"CanUserChatAsync","Parameters":[{"Name":"userId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"CanUsersChatAsync","Parameters":[{"Name":"userIdFrom","Type":{"Category":"Primitive","Name":"int64"}},{"Name":"userIdTo","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"FilterStringAsync","Parameters":[{"Name":"stringToFilter","Type":{"Category":"Primitive","Name":"string"}},{"Name":"playerFrom","Type":{"Category":"Class","Name":"Instance"}},{"Name":"playerTo","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"string"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"FilterStringForBroadcast","Parameters":[{"Name":"stringToFilter","Type":{"Category":"Primitive","Name":"string"}},{"Name":"playerFrom","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"string"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"FilterStringForPlayerAsync","Parameters":[{"Name":"stringToFilter","Type":{"Category":"Primitive","Name":"string"}},{"Name":"playerToFilterFor","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"string"},"Security":"None","Tags":["Yields","Deprecated"]},{"MemberType":"Event","Name":"Chatted","Parameters":[{"Name":"part","Type":{"Category":"Class","Name":"Instance"}},{"Name":"message","Type":{"Category":"Primitive","Name":"string"}},{"Name":"color","Type":{"Category":"Enum","Name":"ChatColor"}}],"Security":"None"}],"MemoryCategory":"Instances","Name":"Chat","Superclass":"Instance","Tags":["NotCreatable","Service","NotReplicated"]},{"Members":[{"Category":"Image","MemberType":"Property","Name":"CursorIcon","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Content"}},{"Category":"Data","MemberType":"Property","Name":"MaxActivationDistance","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"MemberType":"Event","Name":"MouseClick","Parameters":[{"Name":"playerWhoClicked","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"},{"MemberType":"Event","Name":"MouseHoverEnter","Parameters":[{"Name":"playerWhoHovered","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"},{"MemberType":"Event","Name":"MouseHoverLeave","Parameters":[{"Name":"playerWhoHovered","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"},{"MemberType":"Event","Name":"RightMouseClick","Parameters":[{"Name":"playerWhoClicked","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"},{"MemberType":"Event","Name":"mouseClick","Parameters":[{"Name":"playerWhoClicked","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None","Tags":["Deprecated"]}],"MemoryCategory":"Instances","Name":"ClickDetector","Superclass":"Instance"},{"Members":[],"MemoryCategory":"Instances","Name":"ClusterPacketCache","Superclass":"Instance","Tags":["NotCreatable","Service","NotReplicated"]},{"Members":[{"MemberType":"Function","Name":"AddTag","Parameters":[{"Name":"instance","Type":{"Category":"Class","Name":"Instance"}},{"Name":"tag","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"GetCollection","Parameters":[{"Name":"class","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"DataType","Name":"Objects"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"GetInstanceAddedSignal","Parameters":[{"Name":"tag","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"DataType","Name":"RBXScriptSignal"},"Security":"None"},{"MemberType":"Function","Name":"GetInstanceRemovedSignal","Parameters":[{"Name":"tag","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"DataType","Name":"RBXScriptSignal"},"Security":"None"},{"MemberType":"Function","Name":"GetTagged","Parameters":[{"Name":"tag","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"DataType","Name":"Objects"},"Security":"None"},{"MemberType":"Function","Name":"GetTags","Parameters":[{"Name":"instance","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Group","Name":"Array"},"Security":"None"},{"MemberType":"Function","Name":"HasTag","Parameters":[{"Name":"instance","Type":{"Category":"Class","Name":"Instance"}},{"Name":"tag","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Function","Name":"RemoveTag","Parameters":[{"Name":"instance","Type":{"Category":"Class","Name":"Instance"}},{"Name":"tag","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Event","Name":"ItemAdded","Parameters":[{"Name":"instance","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None","Tags":["Deprecated"]},{"MemberType":"Event","Name":"ItemRemoved","Parameters":[{"Name":"instance","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None","Tags":["Deprecated"]}],"MemoryCategory":"Instances","Name":"CollectionService","Superclass":"Instance","Tags":["NotCreatable","Service"]},{"Members":[],"MemoryCategory":"Instances","Name":"Configuration","Superclass":"Instance"},{"Members":[{"Category":"Attachments","MemberType":"Property","Name":"Attachment0","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Class","Name":"Attachment"}},{"Category":"Attachments","MemberType":"Property","Name":"Attachment1","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Class","Name":"Attachment"}},{"Category":"Appearance","MemberType":"Property","Name":"Color","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"BrickColor"}},{"Category":"Behavior","MemberType":"Property","Name":"Enabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Appearance","MemberType":"Property","Name":"Visible","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}}],"MemoryCategory":"Instances","Name":"Constraint","Superclass":"Instance","Tags":["NotCreatable"]},{"Members":[{"Category":"Compliance","MemberType":"Property","Name":"MaxAngularVelocity","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Compliance","MemberType":"Property","Name":"MaxTorque","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"AlignOrientation","MemberType":"Property","Name":"PrimaryAxisOnly","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"AlignOrientation","MemberType":"Property","Name":"ReactionTorqueEnabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Compliance","MemberType":"Property","Name":"Responsiveness","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"AlignOrientation","MemberType":"Property","Name":"RigidityEnabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}}],"MemoryCategory":"Instances","Name":"AlignOrientation","Superclass":"Constraint"},{"Members":[{"Category":"AlignPosition","MemberType":"Property","Name":"ApplyAtCenterOfMass","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Compliance","MemberType":"Property","Name":"MaxForce","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Compliance","MemberType":"Property","Name":"MaxVelocity","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"AlignPosition","MemberType":"Property","Name":"ReactionForceEnabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Compliance","MemberType":"Property","Name":"Responsiveness","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"AlignPosition","MemberType":"Property","Name":"RigidityEnabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}}],"MemoryCategory":"Instances","Name":"AlignPosition","Superclass":"Constraint"},{"Members":[{"Category":"BallSocket","MemberType":"Property","Name":"LimitsEnabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Appearance","MemberType":"Property","Name":"Radius","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Limits","MemberType":"Property","Name":"Restitution","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Limits","MemberType":"Property","Name":"TwistLimitsEnabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"TwistLimits","MemberType":"Property","Name":"TwistLowerAngle","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"TwistLimits","MemberType":"Property","Name":"TwistUpperAngle","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Limits","MemberType":"Property","Name":"UpperAngle","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}}],"MemoryCategory":"Instances","Name":"BallSocketConstraint","Superclass":"Constraint"},{"Members":[{"Category":"Hinge","MemberType":"Property","Name":"ActuatorType","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"ActuatorType"}},{"Category":"Servo","MemberType":"Property","Name":"AngularSpeed","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Motor","MemberType":"Property","Name":"AngularVelocity","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Derived","MemberType":"Property","Name":"CurrentAngle","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Hinge","MemberType":"Property","Name":"LimitsEnabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Limits","MemberType":"Property","Name":"LowerAngle","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Motor","MemberType":"Property","Name":"MotorMaxAcceleration","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Motor","MemberType":"Property","Name":"MotorMaxTorque","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Appearance","MemberType":"Property","Name":"Radius","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Limits","MemberType":"Property","Name":"Restitution","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Servo","MemberType":"Property","Name":"ServoMaxTorque","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Servo","MemberType":"Property","Name":"TargetAngle","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Limits","MemberType":"Property","Name":"UpperAngle","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}}],"MemoryCategory":"Instances","Name":"HingeConstraint","Superclass":"Constraint"},{"Members":[{"Category":"LineForce","MemberType":"Property","Name":"ApplyAtCenterOfMass","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"LineForce","MemberType":"Property","Name":"InverseSquareLaw","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"LineForce","MemberType":"Property","Name":"Magnitude","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"LineForce","MemberType":"Property","Name":"MaxForce","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"LineForce","MemberType":"Property","Name":"ReactionForceEnabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}}],"MemoryCategory":"Instances","Name":"LineForce","Superclass":"Constraint"},{"Members":[{"Category":"Derived","MemberType":"Property","Name":"CurrentDistance","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Rod","MemberType":"Property","Name":"Length","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Appearance","MemberType":"Property","Name":"Thickness","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}}],"MemoryCategory":"Instances","Name":"RodConstraint","Superclass":"Constraint"},{"Members":[{"Category":"Derived","MemberType":"Property","Name":"CurrentDistance","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Rope","MemberType":"Property","Name":"Length","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Rope","MemberType":"Property","Name":"Restitution","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Appearance","MemberType":"Property","Name":"Thickness","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}}],"MemoryCategory":"Instances","Name":"RopeConstraint","Superclass":"Constraint"},{"Members":[{"Category":"Slider","MemberType":"Property","Name":"ActuatorType","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"ActuatorType"}},{"Category":"Derived","MemberType":"Property","Name":"CurrentPosition","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Slider","MemberType":"Property","Name":"LimitsEnabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Limits","MemberType":"Property","Name":"LowerLimit","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Motor","MemberType":"Property","Name":"MotorMaxAcceleration","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Motor","MemberType":"Property","Name":"MotorMaxForce","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Limits","MemberType":"Property","Name":"Restitution","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Servo","MemberType":"Property","Name":"ServoMaxForce","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Appearance","MemberType":"Property","Name":"Size","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Servo","MemberType":"Property","Name":"Speed","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Servo","MemberType":"Property","Name":"TargetPosition","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Limits","MemberType":"Property","Name":"UpperLimit","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Motor","MemberType":"Property","Name":"Velocity","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}}],"MemoryCategory":"Instances","Name":"SlidingBallConstraint","Superclass":"Constraint","Tags":["NotCreatable"]},{"Members":[{"Category":"Cylinder","MemberType":"Property","Name":"AngularActuatorType","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"ActuatorType"}},{"Category":"Cylinder","MemberType":"Property","Name":"AngularLimitsEnabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"AngularLimits","MemberType":"Property","Name":"AngularRestitution","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"AngularServo","MemberType":"Property","Name":"AngularSpeed","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"AngularMotor","MemberType":"Property","Name":"AngularVelocity","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Derived","MemberType":"Property","Name":"CurrentAngle","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Cylinder","MemberType":"Property","Name":"InclinationAngle","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"AngularLimits","MemberType":"Property","Name":"LowerAngle","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"AngularMotor","MemberType":"Property","Name":"MotorMaxAngularAcceleration","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"AngularMotor","MemberType":"Property","Name":"MotorMaxTorque","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Appearance","MemberType":"Property","Name":"RotationAxisVisible","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"AngularServo","MemberType":"Property","Name":"ServoMaxTorque","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"AngularServo","MemberType":"Property","Name":"TargetAngle","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"AngularLimits","MemberType":"Property","Name":"UpperAngle","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Derived","MemberType":"Property","Name":"WorldRotationAxis","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"DataType","Name":"Vector3"}}],"MemoryCategory":"Instances","Name":"CylindricalConstraint","Superclass":"SlidingBallConstraint"},{"Members":[],"MemoryCategory":"Instances","Name":"PrismaticConstraint","Superclass":"SlidingBallConstraint"},{"Members":[{"Category":"Appearance","MemberType":"Property","Name":"Coils","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Derived","MemberType":"Property","Name":"CurrentLength","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Spring","MemberType":"Property","Name":"Damping","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Spring","MemberType":"Property","Name":"FreeLength","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Spring","MemberType":"Property","Name":"LimitsEnabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Spring","MemberType":"Property","Name":"MaxForce","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Limits","MemberType":"Property","Name":"MaxLength","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Limits","MemberType":"Property","Name":"MinLength","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Appearance","MemberType":"Property","Name":"Radius","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Spring","MemberType":"Property","Name":"Stiffness","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Appearance","MemberType":"Property","Name":"Thickness","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}}],"MemoryCategory":"Instances","Name":"SpringConstraint","Superclass":"Constraint"},{"Members":[{"Category":"Torque","MemberType":"Property","Name":"RelativeTo","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"ActuatorRelativeTo"}},{"Category":"Torque","MemberType":"Property","Name":"Torque","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector3"}}],"MemoryCategory":"Instances","Name":"Torque","Superclass":"Constraint"},{"Members":[{"Category":"VectorForce","MemberType":"Property","Name":"ApplyAtCenterOfMass","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"VectorForce","MemberType":"Property","Name":"Force","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"VectorForce","MemberType":"Property","Name":"RelativeTo","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"ActuatorRelativeTo"}}],"MemoryCategory":"Instances","Name":"VectorForce","Superclass":"Constraint"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"BaseUrl","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"Data","MemberType":"Property","Name":"RequestQueueSize","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"int"}},{"MemberType":"Function","Name":"Preload","Parameters":[{"Name":"contentId","Type":{"Category":"DataType","Name":"Content"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"SetBaseUrl","Parameters":[{"Name":"url","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"LocalUserSecurity"},{"MemberType":"Function","Name":"PreloadAsync","Parameters":[{"Name":"contentIdList","Type":{"Category":"Group","Name":"Array"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Yields"]}],"MemoryCategory":"Instances","Name":"ContentProvider","Superclass":"Instance","Tags":["NotCreatable","Service","NotReplicated"]},{"Members":[{"MemberType":"Function","Name":"BindAction","Parameters":[{"Name":"actionName","Type":{"Category":"Primitive","Name":"string"}},{"Name":"functionToBind","Type":{"Category":"DataType","Name":"Function"}},{"Name":"createTouchButton","Type":{"Category":"Primitive","Name":"bool"}},{"Name":"inputTypes","Type":{"Category":"Group","Name":"Tuple"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"BindActionAtPriority","Parameters":[{"Name":"actionName","Type":{"Category":"Primitive","Name":"string"}},{"Name":"functionToBind","Type":{"Category":"DataType","Name":"Function"}},{"Name":"createTouchButton","Type":{"Category":"Primitive","Name":"bool"}},{"Name":"priorityLevel","Type":{"Category":"Primitive","Name":"int"}},{"Name":"inputTypes","Type":{"Category":"Group","Name":"Tuple"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"BindActionToInputTypes","Parameters":[{"Name":"actionName","Type":{"Category":"Primitive","Name":"string"}},{"Name":"functionToBind","Type":{"Category":"DataType","Name":"Function"}},{"Name":"createTouchButton","Type":{"Category":"Primitive","Name":"bool"}},{"Name":"inputTypes","Type":{"Category":"Group","Name":"Tuple"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"BindActivate","Parameters":[{"Name":"userInputTypeForActivation","Type":{"Category":"Enum","Name":"UserInputType"}},{"Default":"Unknown","Name":"keyCodeForActivation","Type":{"Category":"Enum","Name":"KeyCode"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"BindCoreAction","Parameters":[{"Name":"actionName","Type":{"Category":"Primitive","Name":"string"}},{"Name":"functionToBind","Type":{"Category":"DataType","Name":"Function"}},{"Name":"createTouchButton","Type":{"Category":"Primitive","Name":"bool"}},{"Name":"inputTypes","Type":{"Category":"Group","Name":"Tuple"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"BindCoreActionAtPriority","Parameters":[{"Name":"actionName","Type":{"Category":"Primitive","Name":"string"}},{"Name":"functionToBind","Type":{"Category":"DataType","Name":"Function"}},{"Name":"createTouchButton","Type":{"Category":"Primitive","Name":"bool"}},{"Name":"priorityLevel","Type":{"Category":"Primitive","Name":"int"}},{"Name":"inputTypes","Type":{"Category":"Group","Name":"Tuple"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"CallFunction","Parameters":[{"Name":"actionName","Type":{"Category":"Primitive","Name":"string"}},{"Name":"state","Type":{"Category":"Enum","Name":"UserInputState"}},{"Name":"inputObject","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Group","Name":"Tuple"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"FireActionButtonFoundSignal","Parameters":[{"Name":"actionName","Type":{"Category":"Primitive","Name":"string"}},{"Name":"actionButton","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"GetAllBoundActionInfo","Parameters":[],"ReturnType":{"Category":"Group","Name":"Dictionary"},"Security":"None"},{"MemberType":"Function","Name":"GetAllBoundCoreActionInfo","Parameters":[],"ReturnType":{"Category":"Group","Name":"Dictionary"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"GetBoundActionInfo","Parameters":[{"Name":"actionName","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Group","Name":"Dictionary"},"Security":"None"},{"MemberType":"Function","Name":"GetBoundCoreActionInfo","Parameters":[{"Name":"actionName","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Group","Name":"Dictionary"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"GetCurrentLocalToolIcon","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"string"},"Security":"None"},{"MemberType":"Function","Name":"SetDescription","Parameters":[{"Name":"actionName","Type":{"Category":"Primitive","Name":"string"}},{"Name":"description","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"SetImage","Parameters":[{"Name":"actionName","Type":{"Category":"Primitive","Name":"string"}},{"Name":"image","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"SetPosition","Parameters":[{"Name":"actionName","Type":{"Category":"Primitive","Name":"string"}},{"Name":"position","Type":{"Category":"DataType","Name":"UDim2"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"SetTitle","Parameters":[{"Name":"actionName","Type":{"Category":"Primitive","Name":"string"}},{"Name":"title","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"UnbindAction","Parameters":[{"Name":"actionName","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"UnbindActivate","Parameters":[{"Name":"userInputTypeForActivation","Type":{"Category":"Enum","Name":"UserInputType"}},{"Default":"Unknown","Name":"keyCodeForActivation","Type":{"Category":"Enum","Name":"KeyCode"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"UnbindAllActions","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"UnbindCoreAction","Parameters":[{"Name":"actionName","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"GetButton","Parameters":[{"Name":"actionName","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None","Tags":["Yields"]},{"MemberType":"Event","Name":"BoundActionAdded","Parameters":[{"Name":"actionAdded","Type":{"Category":"Primitive","Name":"string"}},{"Name":"createTouchButton","Type":{"Category":"Primitive","Name":"bool"}},{"Name":"functionInfoTable","Type":{"Category":"Group","Name":"Dictionary"}},{"Name":"isCore","Type":{"Category":"Primitive","Name":"bool"}}],"Security":"RobloxScriptSecurity"},{"MemberType":"Event","Name":"BoundActionChanged","Parameters":[{"Name":"actionChanged","Type":{"Category":"Primitive","Name":"string"}},{"Name":"changeName","Type":{"Category":"Primitive","Name":"string"}},{"Name":"changeTable","Type":{"Category":"Group","Name":"Dictionary"}}],"Security":"RobloxScriptSecurity"},{"MemberType":"Event","Name":"BoundActionRemoved","Parameters":[{"Name":"actionRemoved","Type":{"Category":"Primitive","Name":"string"}},{"Name":"functionInfoTable","Type":{"Category":"Group","Name":"Dictionary"}},{"Name":"isCore","Type":{"Category":"Primitive","Name":"bool"}}],"Security":"RobloxScriptSecurity"},{"MemberType":"Event","Name":"GetActionButtonEvent","Parameters":[{"Name":"actionName","Type":{"Category":"Primitive","Name":"string"}}],"Security":"RobloxScriptSecurity"},{"MemberType":"Event","Name":"LocalToolEquipped","Parameters":[{"Name":"toolEquipped","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"},{"MemberType":"Event","Name":"LocalToolUnequipped","Parameters":[{"Name":"toolUnequipped","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"}],"MemoryCategory":"Instances","Name":"ContextActionService","Superclass":"Instance","Tags":["NotCreatable","Service"]},{"Members":[{"MemberType":"Function","Name":"BindButton","Parameters":[{"Name":"button","Type":{"Category":"Enum","Name":"Button"}},{"Name":"caption","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"GetButton","Parameters":[{"Name":"button","Type":{"Category":"Enum","Name":"Button"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Function","Name":"UnbindButton","Parameters":[{"Name":"button","Type":{"Category":"Enum","Name":"Button"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"bindButton","Parameters":[{"Name":"button","Type":{"Category":"Enum","Name":"Button"}},{"Name":"caption","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"getButton","Parameters":[{"Name":"button","Type":{"Category":"Enum","Name":"Button"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Event","Name":"ButtonChanged","Parameters":[{"Name":"button","Type":{"Category":"Enum","Name":"Button"}}],"Security":"None"}],"MemoryCategory":"Instances","Name":"Controller","Superclass":"Instance","Tags":["NotCreatable"]},{"Members":[],"MemoryCategory":"Instances","Name":"HumanoidController","Superclass":"Controller"},{"Members":[{"Category":"Axes","MemberType":"Property","Name":"Steer","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Axes","MemberType":"Property","Name":"Throttle","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"MemberType":"Event","Name":"AxisChanged","Parameters":[{"Name":"axis","Type":{"Category":"Primitive","Name":"string"}}],"Security":"None"}],"MemoryCategory":"Instances","Name":"SkateboardController","Superclass":"Controller"},{"Members":[],"MemoryCategory":"Instances","Name":"VehicleController","Superclass":"Controller"},{"Members":[],"MemoryCategory":"Instances","Name":"ControllerService","Superclass":"Instance","Tags":["NotCreatable","Service","NotReplicated"]},{"Members":[],"MemoryCategory":"Instances","Name":"CookiesService","Superclass":"Instance","Tags":["NotCreatable","Service"]},{"Members":[],"MemoryCategory":"Instances","Name":"CorePackages","Superclass":"Instance","Tags":["NotCreatable","Service","NotReplicated"]},{"Members":[{"MemberType":"Function","Name":"GetAttachedReceivers","Parameters":[],"ReturnType":{"Category":"DataType","Name":"Objects"},"Security":"None"},{"MemberType":"Function","Name":"SetValue","Parameters":[{"Name":"newValue","Type":{"Category":"Primitive","Name":"float"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Event","Name":"ReceiverConnected","Parameters":[{"Name":"receiver","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"},{"MemberType":"Event","Name":"ReceiverDisconnected","Parameters":[{"Name":"receiver","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"}],"MemoryCategory":"Instances","Name":"CustomEvent","Superclass":"Instance","Tags":["Deprecated"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Source","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Class","Name":"Instance"}},{"MemberType":"Function","Name":"GetCurrentValue","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"float"},"Security":"None"},{"MemberType":"Event","Name":"EventConnected","Parameters":[{"Name":"event","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"},{"MemberType":"Event","Name":"EventDisconnected","Parameters":[{"Name":"event","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"},{"MemberType":"Event","Name":"SourceValueChanged","Parameters":[{"Name":"newValue","Type":{"Category":"Primitive","Name":"float"}}],"Security":"None"}],"MemoryCategory":"Instances","Name":"CustomEventReceiver","Superclass":"Instance","Tags":["Deprecated"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Offset","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Data","MemberType":"Property","Name":"Scale","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Data","MemberType":"Property","Name":"VertexColor","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector3"}}],"MemoryCategory":"Instances","Name":"DataModelMesh","Superclass":"Instance","Tags":["NotCreatable","NotBrowsable"]},{"Members":[],"MemoryCategory":"Instances","Name":"BevelMesh","Superclass":"DataModelMesh","Tags":["NotCreatable","NotBrowsable","Deprecated"]},{"Members":[],"MemoryCategory":"PhysicsParts","Name":"BlockMesh","Superclass":"BevelMesh"},{"Members":[],"MemoryCategory":"PhysicsParts","Name":"CylinderMesh","Superclass":"BevelMesh","Tags":["Deprecated"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"MeshId","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Content"}},{"Category":"Data","MemberType":"Property","Name":"TextureId","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Content"}}],"MemoryCategory":"PhysicsParts","Name":"FileMesh","Superclass":"DataModelMesh"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"MeshType","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"MeshType"}}],"MemoryCategory":"Instances","Name":"SpecialMesh","Superclass":"FileMesh"},{"Members":[{"Category":"Behavior","MemberType":"Property","Name":"AutomaticRetry","Security":{"Read":"LocalUserSecurity","Write":"LocalUserSecurity"},"Serialization":{"CanLoad":true,"CanSave":true},"Tags":["NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Behavior","MemberType":"Property","Name":"LegacyNamingScheme","Security":{"Read":"LocalUserSecurity","Write":"LocalUserSecurity"},"Serialization":{"CanLoad":true,"CanSave":true},"Tags":["Deprecated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"MemberType":"Function","Name":"GetDataStore","Parameters":[{"Name":"name","Type":{"Category":"Primitive","Name":"string"}},{"Default":"global","Name":"scope","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None"},{"MemberType":"Function","Name":"GetGlobalDataStore","Parameters":[],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None"},{"MemberType":"Function","Name":"GetOrderedDataStore","Parameters":[{"Name":"name","Type":{"Category":"Primitive","Name":"string"}},{"Default":"global","Name":"scope","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None"},{"MemberType":"Function","Name":"GetRequestBudgetForRequestType","Parameters":[{"Name":"requestType","Type":{"Category":"Enum","Name":"DataStoreRequestType"}}],"ReturnType":{"Category":"Primitive","Name":"int"},"Security":"None"}],"MemoryCategory":"Instances","Name":"DataStoreService","Superclass":"Instance","Tags":["NotCreatable","Service","NotReplicated"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"MaxItems","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"Tags":["Deprecated"],"ValueType":{"Category":"Primitive","Name":"int"}},{"MemberType":"Function","Name":"AddItem","Parameters":[{"Name":"item","Type":{"Category":"Class","Name":"Instance"}},{"Default":"10","Name":"lifetime","Type":{"Category":"Primitive","Name":"double"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"SetLegacyMaxItems","Parameters":[{"Name":"enabled","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"LocalUserSecurity"},{"MemberType":"Function","Name":"addItem","Parameters":[{"Name":"item","Type":{"Category":"Class","Name":"Instance"}},{"Default":"10","Name":"lifetime","Type":{"Category":"Primitive","Name":"double"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]}],"MemoryCategory":"Instances","Name":"Debris","Superclass":"Instance","Tags":["NotCreatable","Service"]},{"Members":[{"Category":"Performance","MemberType":"Property","Name":"DataModel","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Errors","MemberType":"Property","Name":"ErrorReporting","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"ErrorReporting"}},{"Category":"Profile","MemberType":"Property","Name":"GfxCard","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"Performance","MemberType":"Property","Name":"InstanceCount","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Benchmarking","MemberType":"Property","Name":"IsFmodProfilingEnabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Errors","MemberType":"Property","Name":"IsScriptStackTracingEnabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Performance","MemberType":"Property","Name":"JobCount","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Limits","MemberType":"Property","Name":"LuaRamLimit","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Profile","MemberType":"Property","Name":"OsIs64Bit","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Profile","MemberType":"Property","Name":"OsPlatform","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"Profile","MemberType":"Property","Name":"OsPlatformId","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Profile","MemberType":"Property","Name":"OsVer","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"Performance","MemberType":"Property","Name":"PlayerCount","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Errors","MemberType":"Property","Name":"ReportSoundWarnings","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Profile","MemberType":"Property","Name":"RobloxProductName","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"Profile","MemberType":"Property","Name":"RobloxVersion","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"Profile","MemberType":"Property","Name":"SIMD","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"Profile","MemberType":"Property","Name":"SystemProductName","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"Benchmarking","MemberType":"Property","Name":"TickCountPreciseOverride","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"TickCountSampleMethod"}},{"Category":"Profile","MemberType":"Property","Name":"VideoMemory","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"int"}}],"MemoryCategory":"Instances","Name":"DebugSettings","Superclass":"Instance","Tags":["Service","NotBrowsable"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Condition","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"Data","MemberType":"Property","Name":"IsEnabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"Line","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"int"}}],"MemoryCategory":"Instances","Name":"DebuggerBreakpoint","Superclass":"Instance","Tags":["NotCreatable"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"DebuggingEnabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"MemberType":"Function","Name":"AddDebugger","Parameters":[{"Name":"script","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None"},{"MemberType":"Function","Name":"EnableDebugging","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"LocalUserSecurity"},{"MemberType":"Function","Name":"GetDebuggers","Parameters":[],"ReturnType":{"Category":"DataType","Name":"Objects"},"Security":"None"},{"MemberType":"Function","Name":"Resume","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"StepIn","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"StepOut","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"StepOver","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Event","Name":"DebuggerAdded","Parameters":[{"Name":"debugger","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"},{"MemberType":"Event","Name":"DebuggerRemoved","Parameters":[{"Name":"debugger","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"}],"MemoryCategory":"Instances","Name":"DebuggerManager","Superclass":"Instance","Tags":["NotCreatable","NotReplicated"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Expression","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"string"}},{"MemberType":"Function","Name":"CheckSyntax","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"}],"MemoryCategory":"Instances","Name":"DebuggerWatch","Superclass":"Instance"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"BehaviorType","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"DialogBehaviorType"}},{"Category":"Data","MemberType":"Property","Name":"ConversationDistance","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"GoodbyeChoiceActive","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"GoodbyeDialog","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"Data","MemberType":"Property","Name":"InUse","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"InitialPrompt","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"Data","MemberType":"Property","Name":"Purpose","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"DialogPurpose"}},{"Category":"Data","MemberType":"Property","Name":"Tone","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"DialogTone"}},{"Category":"Data","MemberType":"Property","Name":"TriggerDistance","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"TriggerOffset","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector3"}},{"MemberType":"Function","Name":"GetCurrentPlayers","Parameters":[],"ReturnType":{"Category":"DataType","Name":"Objects"},"Security":"None"},{"MemberType":"Function","Name":"SetPlayerIsUsing","Parameters":[{"Name":"player","Type":{"Category":"Class","Name":"Instance"}},{"Name":"isUsing","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"SignalDialogChoiceSelected","Parameters":[{"Name":"player","Type":{"Category":"Class","Name":"Instance"}},{"Name":"dialogChoice","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Event","Name":"DialogChoiceSelected","Parameters":[{"Name":"player","Type":{"Category":"Class","Name":"Instance"}},{"Name":"dialogChoice","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"}],"MemoryCategory":"Instances","Name":"Dialog","Superclass":"Instance"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"GoodbyeChoiceActive","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"GoodbyeDialog","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"Data","MemberType":"Property","Name":"ResponseDialog","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"Data","MemberType":"Property","Name":"UserDialog","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"string"}}],"MemoryCategory":"Instances","Name":"DialogChoice","Superclass":"Instance"},{"Members":[{"MemberType":"Function","Name":"AxisRotate","Parameters":[{"Default":"X","Name":"axis","Type":{"Category":"Enum","Name":"Axis"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"MouseDown","Parameters":[{"Name":"mousePart","Type":{"Category":"Class","Name":"Instance"}},{"Name":"pointOnMousePart","Type":{"Category":"DataType","Name":"Vector3"}},{"Name":"parts","Type":{"Category":"DataType","Name":"Objects"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"MouseMove","Parameters":[{"Name":"mouseRay","Type":{"Category":"DataType","Name":"Ray"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"MouseUp","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"}],"MemoryCategory":"Instances","Name":"Dragger","Superclass":"Instance"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"BlastPressure","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"BlastRadius","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"DestroyJointRadiusPercent","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"ExplosionType","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"ExplosionType"}},{"Category":"Data","MemberType":"Property","Name":"Position","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Data","MemberType":"Property","Name":"Visible","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"MemberType":"Event","Name":"Hit","Parameters":[{"Name":"part","Type":{"Category":"Class","Name":"Instance"}},{"Name":"distance","Type":{"Category":"Primitive","Name":"float"}}],"Security":"None"}],"MemoryCategory":"Instances","Name":"Explosion","Superclass":"Instance"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Face","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"NormalId"}}],"MemoryCategory":"Instances","Name":"FaceInstance","Superclass":"Instance","Tags":["NotCreatable","NotBrowsable"]},{"Members":[{"Category":"Appearance","MemberType":"Property","Name":"Color3","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Appearance","MemberType":"Property","Name":"LocalTransparencyModifier","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["Hidden","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Appearance","MemberType":"Property","Name":"Shiny","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated","Deprecated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Appearance","MemberType":"Property","Name":"Specular","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated","Deprecated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Appearance","MemberType":"Property","Name":"Texture","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Content"}},{"Category":"Appearance","MemberType":"Property","Name":"Transparency","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}}],"MemoryCategory":"GraphicsTexture","Name":"Decal","Superclass":"FaceInstance"},{"Members":[{"Category":"Appearance","MemberType":"Property","Name":"StudsPerTileU","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Appearance","MemberType":"Property","Name":"StudsPerTileV","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}}],"MemoryCategory":"GraphicsTexture","Name":"Texture","Superclass":"Decal"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"FaceId","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"NormalId"}},{"Category":"Data","MemberType":"Property","Name":"InOut","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"InOut"}},{"Category":"Data","MemberType":"Property","Name":"LeftRight","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"LeftRight"}},{"Category":"Data","MemberType":"Property","Name":"TopBottom","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"TopBottom"}}],"MemoryCategory":"Instances","Name":"Feature","Superclass":"Instance","Tags":["NotCreatable"]},{"Members":[],"MemoryCategory":"Instances","Name":"Hole","Superclass":"Feature","Tags":["Deprecated"]},{"Members":[],"MemoryCategory":"Instances","Name":"MotorFeature","Superclass":"Feature","Tags":["Deprecated"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Color","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Data","MemberType":"Property","Name":"Enabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"Heat","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"SecondaryColor","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Data","MemberType":"Property","Name":"Size","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"size","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated","Deprecated"],"ValueType":{"Category":"Primitive","Name":"float"}}],"MemoryCategory":"Instances","Name":"Fire","Superclass":"Instance"},{"Members":[],"MemoryCategory":"Instances","Name":"FlagStandService","Superclass":"Instance","Tags":["NotCreatable","Service"]},{"Members":[],"MemoryCategory":"Instances","Name":"FlyweightService","Superclass":"Instance","Tags":["Service"]},{"Members":[],"MemoryCategory":"Instances","Name":"CSGDictionaryService","Superclass":"FlyweightService","Tags":["Service"]},{"Members":[],"MemoryCategory":"Instances","Name":"NonReplicatedCSGDictionaryService","Superclass":"FlyweightService","Tags":["Service"]},{"Members":[],"MemoryCategory":"Instances","Name":"Folder","Superclass":"Instance"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Visible","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}}],"MemoryCategory":"Instances","Name":"ForceField","Superclass":"Instance"},{"Members":[{"MemberType":"Function","Name":"GetPlatformFriends","Parameters":[],"ReturnType":{"Category":"Group","Name":"Array"},"Security":"RobloxScriptSecurity","Tags":["Yields"]},{"MemberType":"Event","Name":"FriendsUpdated","Parameters":[{"Name":"friendData","Type":{"Category":"Group","Name":"Array"}}],"Security":"RobloxScriptSecurity"}],"MemoryCategory":"Instances","Name":"FriendService","Superclass":"Instance","Tags":["NotCreatable","Service"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Description","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"string"}},{"MemberType":"Function","Name":"Error","Parameters":[{"Default":"","Name":"message","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"Failed","Parameters":[{"Default":"","Name":"message","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"Pass","Parameters":[{"Default":"","Name":"message","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"Passed","Parameters":[{"Default":"","Name":"message","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"Warn","Parameters":[{"Default":"","Name":"message","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"}],"MemoryCategory":"Instances","Name":"FunctionalTest","Superclass":"Instance","Tags":["Deprecated"]},{"Members":[{"MemberType":"Function","Name":"PlayerHasPass","Parameters":[{"Name":"player","Type":{"Category":"Class","Name":"Instance"}},{"Name":"gamePassId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None","Tags":["Yields"]}],"MemoryCategory":"Instances","Name":"GamePassService","Superclass":"Instance","Tags":["NotCreatable","Service"]},{"Members":[{"Category":"Directories","MemberType":"Property","Name":"AdditionalCoreIncludeDirs","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"Online","MemberType":"Property","Name":"BubbleChatLifetime","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Online","MemberType":"Property","Name":"BubbleChatMaxBubbles","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Online","MemberType":"Property","Name":"ChatHistory","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Online","MemberType":"Property","Name":"ChatScrollLength","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Sound","MemberType":"Property","Name":"CollisionSoundEnabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated","Deprecated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Sound","MemberType":"Property","Name":"CollisionSoundVolume","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated","Deprecated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Input","MemberType":"Property","Name":"HardwareMouse","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Sound","MemberType":"Property","Name":"MaxCollisionSounds","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated","Deprecated"],"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Script","MemberType":"Property","Name":"OverrideStarterScript","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"Online","MemberType":"Property","Name":"ReportAbuseChatHistory","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Sound","MemberType":"Property","Name":"SoftwareSound","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Video","MemberType":"Property","Name":"VideoCaptureEnabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Video","MemberType":"Property","Name":"VideoQuality","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"VideoQualitySettings"}},{"MemberType":"Event","Name":"VideoRecordingChangeRequest","Parameters":[{"Name":"recording","Type":{"Category":"Primitive","Name":"bool"}}],"Security":"RobloxScriptSecurity"}],"MemoryCategory":"Instances","Name":"GameSettings","Superclass":"Instance","Tags":["Service","NotBrowsable"]},{"Members":[],"MemoryCategory":"Instances","Name":"GamepadService","Superclass":"Instance","Tags":["NotCreatable","Service"]},{"Members":[],"MemoryCategory":"Instances","Name":"Geometry","Superclass":"Instance","Tags":["NotCreatable","Service"]},{"Members":[{"MemberType":"Function","Name":"OnUpdate","Parameters":[{"Name":"key","Type":{"Category":"Primitive","Name":"string"}},{"Name":"callback","Type":{"Category":"DataType","Name":"Function"}}],"ReturnType":{"Category":"DataType","Name":"RBXScriptConnection"},"Security":"None"},{"MemberType":"Function","Name":"GetAsync","Parameters":[{"Name":"key","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Group","Name":"Variant"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"IncrementAsync","Parameters":[{"Name":"key","Type":{"Category":"Primitive","Name":"string"}},{"Default":"1","Name":"delta","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Group","Name":"Variant"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"RemoveAsync","Parameters":[{"Name":"key","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Group","Name":"Variant"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"SetAsync","Parameters":[{"Name":"key","Type":{"Category":"Primitive","Name":"string"}},{"Name":"value","Type":{"Category":"Group","Name":"Variant"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"UpdateAsync","Parameters":[{"Name":"key","Type":{"Category":"Primitive","Name":"string"}},{"Name":"transformFunction","Type":{"Category":"DataType","Name":"Function"}}],"ReturnType":{"Category":"Group","Name":"Tuple"},"Security":"None","Tags":["Yields"]}],"MemoryCategory":"Instances","Name":"GlobalDataStore","Superclass":"Instance","Tags":["NotCreatable","NotReplicated"]},{"Members":[{"MemberType":"Function","Name":"GetSortedAsync","Parameters":[{"Name":"ascending","Type":{"Category":"Primitive","Name":"bool"}},{"Name":"pagesize","Type":{"Category":"Primitive","Name":"int"}},{"Name":"minValue","Type":{"Category":"Group","Name":"Variant"}},{"Name":"maxValue","Type":{"Category":"Group","Name":"Variant"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None","Tags":["Yields"]}],"MemoryCategory":"Instances","Name":"OrderedDataStore","Superclass":"GlobalDataStore","Tags":["NotCreatable","NotReplicated"]},{"Members":[],"MemoryCategory":"Instances","Name":"GoogleAnalyticsConfiguration","Superclass":"Instance","Tags":["Service"]},{"Members":[{"MemberType":"Function","Name":"GetAlliesAsync","Parameters":[{"Name":"groupId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"GetEnemiesAsync","Parameters":[{"Name":"groupId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"GetGroupInfoAsync","Parameters":[{"Name":"groupId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Group","Name":"Variant"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"GetGroupsAsync","Parameters":[{"Name":"userId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Group","Name":"Array"},"Security":"None","Tags":["Yields"]}],"MemoryCategory":"Instances","Name":"GroupService","Superclass":"Instance","Tags":["NotCreatable","Service","NotReplicated"]},{"Members":[],"MemoryCategory":"Instances","Name":"GuiBase","Superclass":"Instance","Tags":["NotCreatable"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"AbsolutePosition","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"DataType","Name":"Vector2"}},{"Category":"Data","MemberType":"Property","Name":"AbsoluteRotation","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"AbsoluteSize","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"DataType","Name":"Vector2"}},{"Category":"Localization","MemberType":"Property","Name":"AutoLocalize","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Localization","MemberType":"Property","Name":"Localize","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["Hidden","NotReplicated","Deprecated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Localization","MemberType":"Property","Name":"RootLocalizationTable","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Class","Name":"LocalizationTable"}}],"MemoryCategory":"Instances","Name":"GuiBase2d","Superclass":"GuiBase","Tags":["NotCreatable","NotBrowsable"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Active","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"AnchorPoint","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector2"}},{"Category":"Data","MemberType":"Property","Name":"BackgroundColor","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["Hidden","NotReplicated","Deprecated"],"ValueType":{"Category":"DataType","Name":"BrickColor"}},{"Category":"Data","MemberType":"Property","Name":"BackgroundColor3","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Data","MemberType":"Property","Name":"BackgroundTransparency","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"BorderColor","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["Hidden","NotReplicated","Deprecated"],"ValueType":{"Category":"DataType","Name":"BrickColor"}},{"Category":"Data","MemberType":"Property","Name":"BorderColor3","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Data","MemberType":"Property","Name":"BorderSizePixel","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Behavior","MemberType":"Property","Name":"ClipsDescendants","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Behavior","MemberType":"Property","Name":"Draggable","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"Tags":["Deprecated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"LayoutOrder","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Behavior","MemberType":"Property","Name":"NextSelectionDown","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Class","Name":"GuiObject"}},{"Category":"Behavior","MemberType":"Property","Name":"NextSelectionLeft","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Class","Name":"GuiObject"}},{"Category":"Behavior","MemberType":"Property","Name":"NextSelectionRight","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Class","Name":"GuiObject"}},{"Category":"Behavior","MemberType":"Property","Name":"NextSelectionUp","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Class","Name":"GuiObject"}},{"Category":"Data","MemberType":"Property","Name":"Position","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"UDim2"}},{"Category":"Data","MemberType":"Property","Name":"Rotation","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"Selectable","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Appearance","MemberType":"Property","Name":"SelectionImageObject","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Class","Name":"GuiObject"}},{"Category":"Data","MemberType":"Property","Name":"Size","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"UDim2"}},{"Category":"Data","MemberType":"Property","Name":"SizeConstraint","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"SizeConstraint"}},{"Category":"Data","MemberType":"Property","Name":"Transparency","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["Hidden","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"Visible","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"ZIndex","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}},{"MemberType":"Function","Name":"TweenPosition","Parameters":[{"Name":"endPosition","Type":{"Category":"DataType","Name":"UDim2"}},{"Default":"Out","Name":"easingDirection","Type":{"Category":"Enum","Name":"EasingDirection"}},{"Default":"Quad","Name":"easingStyle","Type":{"Category":"Enum","Name":"EasingStyle"}},{"Default":"1","Name":"time","Type":{"Category":"Primitive","Name":"float"}},{"Default":"false","Name":"override","Type":{"Category":"Primitive","Name":"bool"}},{"Default":"nil","Name":"callback","Type":{"Category":"DataType","Name":"Function"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Function","Name":"TweenSize","Parameters":[{"Name":"endSize","Type":{"Category":"DataType","Name":"UDim2"}},{"Default":"Out","Name":"easingDirection","Type":{"Category":"Enum","Name":"EasingDirection"}},{"Default":"Quad","Name":"easingStyle","Type":{"Category":"Enum","Name":"EasingStyle"}},{"Default":"1","Name":"time","Type":{"Category":"Primitive","Name":"float"}},{"Default":"false","Name":"override","Type":{"Category":"Primitive","Name":"bool"}},{"Default":"nil","Name":"callback","Type":{"Category":"DataType","Name":"Function"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Function","Name":"TweenSizeAndPosition","Parameters":[{"Name":"endSize","Type":{"Category":"DataType","Name":"UDim2"}},{"Name":"endPosition","Type":{"Category":"DataType","Name":"UDim2"}},{"Default":"Out","Name":"easingDirection","Type":{"Category":"Enum","Name":"EasingDirection"}},{"Default":"Quad","Name":"easingStyle","Type":{"Category":"Enum","Name":"EasingStyle"}},{"Default":"1","Name":"time","Type":{"Category":"Primitive","Name":"float"}},{"Default":"false","Name":"override","Type":{"Category":"Primitive","Name":"bool"}},{"Default":"nil","Name":"callback","Type":{"Category":"DataType","Name":"Function"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Event","Name":"DragBegin","Parameters":[{"Name":"initialPosition","Type":{"Category":"DataType","Name":"UDim2"}}],"Security":"None","Tags":["Deprecated"]},{"MemberType":"Event","Name":"DragStopped","Parameters":[{"Name":"x","Type":{"Category":"Primitive","Name":"int"}},{"Name":"y","Type":{"Category":"Primitive","Name":"int"}}],"Security":"None","Tags":["Deprecated"]},{"MemberType":"Event","Name":"InputBegan","Parameters":[{"Name":"input","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"},{"MemberType":"Event","Name":"InputChanged","Parameters":[{"Name":"input","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"},{"MemberType":"Event","Name":"InputEnded","Parameters":[{"Name":"input","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"},{"MemberType":"Event","Name":"MouseEnter","Parameters":[{"Name":"x","Type":{"Category":"Primitive","Name":"int"}},{"Name":"y","Type":{"Category":"Primitive","Name":"int"}}],"Security":"None"},{"MemberType":"Event","Name":"MouseLeave","Parameters":[{"Name":"x","Type":{"Category":"Primitive","Name":"int"}},{"Name":"y","Type":{"Category":"Primitive","Name":"int"}}],"Security":"None"},{"MemberType":"Event","Name":"MouseMoved","Parameters":[{"Name":"x","Type":{"Category":"Primitive","Name":"int"}},{"Name":"y","Type":{"Category":"Primitive","Name":"int"}}],"Security":"None"},{"MemberType":"Event","Name":"MouseWheelBackward","Parameters":[{"Name":"x","Type":{"Category":"Primitive","Name":"int"}},{"Name":"y","Type":{"Category":"Primitive","Name":"int"}}],"Security":"None"},{"MemberType":"Event","Name":"MouseWheelForward","Parameters":[{"Name":"x","Type":{"Category":"Primitive","Name":"int"}},{"Name":"y","Type":{"Category":"Primitive","Name":"int"}}],"Security":"None"},{"MemberType":"Event","Name":"SelectionGained","Parameters":[],"Security":"None"},{"MemberType":"Event","Name":"SelectionLost","Parameters":[],"Security":"None"},{"MemberType":"Event","Name":"TouchLongPress","Parameters":[{"Name":"touchPositions","Type":{"Category":"Group","Name":"Array"}},{"Name":"state","Type":{"Category":"Enum","Name":"UserInputState"}}],"Security":"None"},{"MemberType":"Event","Name":"TouchPan","Parameters":[{"Name":"touchPositions","Type":{"Category":"Group","Name":"Array"}},{"Name":"totalTranslation","Type":{"Category":"DataType","Name":"Vector2"}},{"Name":"velocity","Type":{"Category":"DataType","Name":"Vector2"}},{"Name":"state","Type":{"Category":"Enum","Name":"UserInputState"}}],"Security":"None"},{"MemberType":"Event","Name":"TouchPinch","Parameters":[{"Name":"touchPositions","Type":{"Category":"Group","Name":"Array"}},{"Name":"scale","Type":{"Category":"Primitive","Name":"float"}},{"Name":"velocity","Type":{"Category":"Primitive","Name":"float"}},{"Name":"state","Type":{"Category":"Enum","Name":"UserInputState"}}],"Security":"None"},{"MemberType":"Event","Name":"TouchRotate","Parameters":[{"Name":"touchPositions","Type":{"Category":"Group","Name":"Array"}},{"Name":"rotation","Type":{"Category":"Primitive","Name":"float"}},{"Name":"velocity","Type":{"Category":"Primitive","Name":"float"}},{"Name":"state","Type":{"Category":"Enum","Name":"UserInputState"}}],"Security":"None"},{"MemberType":"Event","Name":"TouchSwipe","Parameters":[{"Name":"swipeDirection","Type":{"Category":"Enum","Name":"SwipeDirection"}},{"Name":"numberOfTouches","Type":{"Category":"Primitive","Name":"int"}}],"Security":"None"},{"MemberType":"Event","Name":"TouchTap","Parameters":[{"Name":"touchPositions","Type":{"Category":"Group","Name":"Array"}}],"Security":"None"}],"MemoryCategory":"Gui","Name":"GuiObject","Superclass":"GuiBase2d","Tags":["NotCreatable","NotBrowsable"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Style","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"FrameStyle"}}],"MemoryCategory":"Gui","Name":"Frame","Superclass":"GuiObject"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"AutoButtonColor","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"Modal","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"Selected","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"Style","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"ButtonStyle"}},{"MemberType":"Function","Name":"SetVerb","Parameters":[{"Name":"verb","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Event","Name":"Activated","Parameters":[{"Name":"inputObject","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"},{"MemberType":"Event","Name":"MouseButton1Click","Parameters":[],"Security":"None"},{"MemberType":"Event","Name":"MouseButton1Down","Parameters":[{"Name":"x","Type":{"Category":"Primitive","Name":"int"}},{"Name":"y","Type":{"Category":"Primitive","Name":"int"}}],"Security":"None"},{"MemberType":"Event","Name":"MouseButton1Up","Parameters":[{"Name":"x","Type":{"Category":"Primitive","Name":"int"}},{"Name":"y","Type":{"Category":"Primitive","Name":"int"}}],"Security":"None"},{"MemberType":"Event","Name":"MouseButton2Click","Parameters":[],"Security":"None"},{"MemberType":"Event","Name":"MouseButton2Down","Parameters":[{"Name":"x","Type":{"Category":"Primitive","Name":"int"}},{"Name":"y","Type":{"Category":"Primitive","Name":"int"}}],"Security":"None"},{"MemberType":"Event","Name":"MouseButton2Up","Parameters":[{"Name":"x","Type":{"Category":"Primitive","Name":"int"}},{"Name":"y","Type":{"Category":"Primitive","Name":"int"}}],"Security":"None"}],"MemoryCategory":"Gui","Name":"GuiButton","Superclass":"GuiObject","Tags":["NotCreatable","NotBrowsable"]},{"Members":[{"Category":"Image","MemberType":"Property","Name":"Image","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Content"}},{"Category":"Image","MemberType":"Property","Name":"ImageColor3","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Image","MemberType":"Property","Name":"ImageRectOffset","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector2"}},{"Category":"Image","MemberType":"Property","Name":"ImageRectSize","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector2"}},{"Category":"Image","MemberType":"Property","Name":"ImageTransparency","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Image","MemberType":"Property","Name":"IsLoaded","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Image","MemberType":"Property","Name":"ScaleType","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"ScaleType"}},{"Category":"Image","MemberType":"Property","Name":"SliceCenter","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Rect"}},{"Category":"Image","MemberType":"Property","Name":"TileSize","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"UDim2"}}],"MemoryCategory":"Gui","Name":"ImageButton","Superclass":"GuiButton"},{"Members":[{"Category":"Text","MemberType":"Property","Name":"Font","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"Font"}},{"Category":"Text","MemberType":"Property","Name":"FontSize","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated","Deprecated"],"ValueType":{"Category":"Enum","Name":"FontSize"}},{"Category":"Text","MemberType":"Property","Name":"LineHeight","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"LocalizedText","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["Hidden","ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"Text","MemberType":"Property","Name":"Text","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"Text","MemberType":"Property","Name":"TextBounds","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"DataType","Name":"Vector2"}},{"Category":"Text","MemberType":"Property","Name":"TextColor","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["Hidden","NotReplicated","Deprecated"],"ValueType":{"Category":"DataType","Name":"BrickColor"}},{"Category":"Text","MemberType":"Property","Name":"TextColor3","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Text","MemberType":"Property","Name":"TextFits","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Text","MemberType":"Property","Name":"TextScaled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Text","MemberType":"Property","Name":"TextSize","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Text","MemberType":"Property","Name":"TextStrokeColor3","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Text","MemberType":"Property","Name":"TextStrokeTransparency","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Text","MemberType":"Property","Name":"TextTransparency","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Text","MemberType":"Property","Name":"TextTruncate","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"TextTruncate"}},{"Category":"Text","MemberType":"Property","Name":"TextWrap","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated","Deprecated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Text","MemberType":"Property","Name":"TextWrapped","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Text","MemberType":"Property","Name":"TextXAlignment","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"TextXAlignment"}},{"Category":"Text","MemberType":"Property","Name":"TextYAlignment","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"TextYAlignment"}},{"MemberType":"Function","Name":"SetTextFromInput","Parameters":[{"Name":"text","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"}],"MemoryCategory":"Gui","Name":"TextButton","Superclass":"GuiButton"},{"Members":[],"MemoryCategory":"Gui","Name":"GuiLabel","Superclass":"GuiObject","Tags":["NotCreatable"]},{"Members":[{"Category":"Image","MemberType":"Property","Name":"Image","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Content"}},{"Category":"Image","MemberType":"Property","Name":"ImageColor3","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Image","MemberType":"Property","Name":"ImageRectOffset","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector2"}},{"Category":"Image","MemberType":"Property","Name":"ImageRectSize","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector2"}},{"Category":"Image","MemberType":"Property","Name":"ImageTransparency","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Image","MemberType":"Property","Name":"IsLoaded","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Image","MemberType":"Property","Name":"ScaleType","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"ScaleType"}},{"Category":"Image","MemberType":"Property","Name":"SliceCenter","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Rect"}},{"Category":"Image","MemberType":"Property","Name":"TileSize","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"UDim2"}}],"MemoryCategory":"Gui","Name":"ImageLabel","Superclass":"GuiLabel"},{"Members":[{"Category":"Text","MemberType":"Property","Name":"Font","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"Font"}},{"Category":"Text","MemberType":"Property","Name":"FontSize","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated","Deprecated"],"ValueType":{"Category":"Enum","Name":"FontSize"}},{"Category":"Text","MemberType":"Property","Name":"LineHeight","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"LocalizedText","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["Hidden","ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"Text","MemberType":"Property","Name":"Text","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"Text","MemberType":"Property","Name":"TextBounds","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"DataType","Name":"Vector2"}},{"Category":"Text","MemberType":"Property","Name":"TextColor","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["Hidden","NotReplicated","Deprecated"],"ValueType":{"Category":"DataType","Name":"BrickColor"}},{"Category":"Text","MemberType":"Property","Name":"TextColor3","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Text","MemberType":"Property","Name":"TextFits","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Text","MemberType":"Property","Name":"TextScaled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Text","MemberType":"Property","Name":"TextSize","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Text","MemberType":"Property","Name":"TextStrokeColor3","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Text","MemberType":"Property","Name":"TextStrokeTransparency","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Text","MemberType":"Property","Name":"TextTransparency","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Text","MemberType":"Property","Name":"TextTruncate","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"TextTruncate"}},{"Category":"Text","MemberType":"Property","Name":"TextWrap","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated","Deprecated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Text","MemberType":"Property","Name":"TextWrapped","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Text","MemberType":"Property","Name":"TextXAlignment","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"TextXAlignment"}},{"Category":"Text","MemberType":"Property","Name":"TextYAlignment","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"TextYAlignment"}},{"MemberType":"Function","Name":"SetTextFromInput","Parameters":[{"Name":"text","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"}],"MemoryCategory":"Gui","Name":"TextLabel","Superclass":"GuiLabel"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"ScaleEdgeSize","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector2int16"}},{"Category":"Data","MemberType":"Property","Name":"SlicePrefix","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"string"}}],"MemoryCategory":"Instances","Name":"Scale9Frame","Superclass":"GuiObject","Tags":["NotCreatable"]},{"Members":[{"Category":"Scrolling","MemberType":"Property","Name":"AbsoluteWindowSize","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"DataType","Name":"Vector2"}},{"Category":"Scrolling","MemberType":"Property","Name":"BottomImage","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Content"}},{"Category":"Scrolling","MemberType":"Property","Name":"CanvasPosition","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector2"}},{"Category":"Scrolling","MemberType":"Property","Name":"CanvasSize","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"UDim2"}},{"Category":"Scrolling","MemberType":"Property","Name":"ElasticBehavior","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"ElasticBehavior"}},{"Category":"Scrolling","MemberType":"Property","Name":"HorizontalScrollBarInset","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"ScrollBarInset"}},{"Category":"Scrolling","MemberType":"Property","Name":"MidImage","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Content"}},{"Category":"Scrolling","MemberType":"Property","Name":"ScrollBarImageColor3","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Scrolling","MemberType":"Property","Name":"ScrollBarImageTransparency","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Scrolling","MemberType":"Property","Name":"ScrollBarThickness","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Scrolling","MemberType":"Property","Name":"ScrollingDirection","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"ScrollingDirection"}},{"Category":"Scrolling","MemberType":"Property","Name":"ScrollingEnabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Scrolling","MemberType":"Property","Name":"TopImage","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Content"}},{"Category":"Scrolling","MemberType":"Property","Name":"VerticalScrollBarInset","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"ScrollBarInset"}},{"Category":"Scrolling","MemberType":"Property","Name":"VerticalScrollBarPosition","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"VerticalScrollBarPosition"}},{"MemberType":"Function","Name":"ScrollToTop","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"}],"MemoryCategory":"Instances","Name":"ScrollingFrame","Superclass":"GuiObject"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"ClearTextOnFocus","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Text","MemberType":"Property","Name":"Font","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"Font"}},{"Category":"Text","MemberType":"Property","Name":"FontSize","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated","Deprecated"],"ValueType":{"Category":"Enum","Name":"FontSize"}},{"Category":"Text","MemberType":"Property","Name":"LineHeight","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"ManualFocusRelease","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"MultiLine","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"OverlayNativeInput","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Text","MemberType":"Property","Name":"PlaceholderColor3","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Text","MemberType":"Property","Name":"PlaceholderText","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"Data","MemberType":"Property","Name":"ShowNativeInput","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Text","MemberType":"Property","Name":"Text","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"Text","MemberType":"Property","Name":"TextBounds","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"DataType","Name":"Vector2"}},{"Category":"Text","MemberType":"Property","Name":"TextColor","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["Hidden","NotReplicated","Deprecated"],"ValueType":{"Category":"DataType","Name":"BrickColor"}},{"Category":"Text","MemberType":"Property","Name":"TextColor3","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Text","MemberType":"Property","Name":"TextFits","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Text","MemberType":"Property","Name":"TextScaled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Text","MemberType":"Property","Name":"TextSize","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Text","MemberType":"Property","Name":"TextStrokeColor3","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Text","MemberType":"Property","Name":"TextStrokeTransparency","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Text","MemberType":"Property","Name":"TextTransparency","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Text","MemberType":"Property","Name":"TextTruncate","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"TextTruncate"}},{"Category":"Text","MemberType":"Property","Name":"TextWrap","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated","Deprecated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Text","MemberType":"Property","Name":"TextWrapped","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Text","MemberType":"Property","Name":"TextXAlignment","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"TextXAlignment"}},{"Category":"Text","MemberType":"Property","Name":"TextYAlignment","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"TextYAlignment"}},{"MemberType":"Function","Name":"CaptureFocus","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"IsFocused","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Function","Name":"ReleaseFocus","Parameters":[{"Default":"false","Name":"submitted","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"ResetKeyboardMode","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"SetTextFromInput","Parameters":[{"Name":"text","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Event","Name":"FocusLost","Parameters":[{"Name":"enterPressed","Type":{"Category":"Primitive","Name":"bool"}},{"Name":"inputThatCausedFocusLoss","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"},{"MemberType":"Event","Name":"Focused","Parameters":[],"Security":"None"}],"MemoryCategory":"Instances","Name":"TextBox","Superclass":"GuiObject"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Enabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"ResetOnSpawn","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"ZIndexBehavior","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"ZIndexBehavior"}}],"MemoryCategory":"Instances","Name":"LayerCollector","Superclass":"GuiBase2d","Tags":["NotCreatable","NotBrowsable"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Active","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"Adornee","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Class","Name":"Instance"}},{"Category":"Data","MemberType":"Property","Name":"AlwaysOnTop","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Behavior","MemberType":"Property","Name":"ClipsDescendants","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"ExtentsOffset","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Data","MemberType":"Property","Name":"ExtentsOffsetWorldSpace","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Data","MemberType":"Property","Name":"LightInfluence","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"MaxDistance","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"PlayerToHideFrom","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Class","Name":"Instance"}},{"Category":"Data","MemberType":"Property","Name":"Size","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"UDim2"}},{"Category":"Data","MemberType":"Property","Name":"SizeOffset","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector2"}},{"Category":"Data","MemberType":"Property","Name":"StudsOffset","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Data","MemberType":"Property","Name":"StudsOffsetWorldSpace","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector3"}}],"MemoryCategory":"Instances","Name":"BillboardGui","Superclass":"LayerCollector"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Title","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"string"}}],"MemoryCategory":"Instances","Name":"PluginGui","Superclass":"LayerCollector","Tags":["NotCreatable","NotReplicated"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"HostWidgetWasRestored","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"MemberType":"Event","Name":"WindowFocusReleased","Parameters":[],"Security":"PluginSecurity"},{"MemberType":"Event","Name":"WindowFocused","Parameters":[],"Security":"PluginSecurity"}],"MemoryCategory":"Instances","Name":"DockWidgetPluginGui","Superclass":"PluginGui","Tags":["NotCreatable","NotReplicated"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"DisplayOrder","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Data","MemberType":"Property","Name":"IgnoreGuiInset","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Behavior","MemberType":"Property","Name":"OnTopOfCoreBlur","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["Hidden"],"ValueType":{"Category":"Primitive","Name":"bool"}}],"MemoryCategory":"Instances","Name":"ScreenGui","Superclass":"LayerCollector"},{"Members":[],"MemoryCategory":"Instances","Name":"GuiMain","Superclass":"ScreenGui","Tags":["Deprecated"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Active","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"Adornee","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Class","Name":"Instance"}},{"Category":"Data","MemberType":"Property","Name":"AlwaysOnTop","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"CanvasSize","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector2"}},{"Category":"Behavior","MemberType":"Property","Name":"ClipsDescendants","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"Face","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"NormalId"}},{"Category":"Data","MemberType":"Property","Name":"LightInfluence","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"ToolPunchThroughDistance","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Appearance","MemberType":"Property","Name":"ZOffset","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}}],"MemoryCategory":"Instances","Name":"SurfaceGui","Superclass":"LayerCollector"},{"Members":[{"Category":"Appearance","MemberType":"Property","Name":"Color","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["Hidden","NotReplicated","Deprecated"],"ValueType":{"Category":"DataType","Name":"BrickColor"}},{"Category":"Appearance","MemberType":"Property","Name":"Color3","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Appearance","MemberType":"Property","Name":"Transparency","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"Visible","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}}],"MemoryCategory":"Instances","Name":"GuiBase3d","Superclass":"GuiBase","Tags":["NotCreatable"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"CycleOffset","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"From","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Class","Name":"BasePart"}},{"Category":"Data","MemberType":"Property","Name":"StudsBetweenTextures","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Appearance","MemberType":"Property","Name":"Texture","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Content"}},{"Category":"Appearance","MemberType":"Property","Name":"TextureSize","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector2"}},{"Category":"Data","MemberType":"Property","Name":"To","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Class","Name":"BasePart"}},{"Category":"Data","MemberType":"Property","Name":"Velocity","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"WireRadius","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}}],"MemoryCategory":"Instances","Name":"FloorWire","Superclass":"GuiBase3d","Tags":["Deprecated"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Adornee","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Class","Name":"PVInstance"}}],"MemoryCategory":"Instances","Name":"PVAdornment","Superclass":"GuiBase3d","Tags":["NotCreatable"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"AlwaysOnTop","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"CFrame","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"CFrame"}},{"Category":"Data","MemberType":"Property","Name":"SizeRelativeOffset","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Data","MemberType":"Property","Name":"ZIndex","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}},{"MemberType":"Event","Name":"MouseButton1Down","Parameters":[],"Security":"None"},{"MemberType":"Event","Name":"MouseButton1Up","Parameters":[],"Security":"None"},{"MemberType":"Event","Name":"MouseEnter","Parameters":[],"Security":"None"},{"MemberType":"Event","Name":"MouseLeave","Parameters":[],"Security":"None"}],"MemoryCategory":"Instances","Name":"HandleAdornment","Superclass":"PVAdornment","Tags":["NotCreatable"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Size","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector3"}}],"MemoryCategory":"Instances","Name":"BoxHandleAdornment","Superclass":"HandleAdornment"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Height","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"Radius","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}}],"MemoryCategory":"Instances","Name":"ConeHandleAdornment","Superclass":"HandleAdornment"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Height","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"Radius","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}}],"MemoryCategory":"Instances","Name":"CylinderHandleAdornment","Superclass":"HandleAdornment"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Image","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Content"}},{"Category":"Data","MemberType":"Property","Name":"Size","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector2"}}],"MemoryCategory":"Instances","Name":"ImageHandleAdornment","Superclass":"HandleAdornment"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Length","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"Thickness","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}}],"MemoryCategory":"Instances","Name":"LineHandleAdornment","Superclass":"HandleAdornment"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Radius","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}}],"MemoryCategory":"Instances","Name":"SphereHandleAdornment","Superclass":"HandleAdornment"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"A","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":false,"CanSave":false},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"B","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":false,"CanSave":false},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"C","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":false,"CanSave":false},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"Range","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":false,"CanSave":false},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"Thickness","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":false,"CanSave":false},"ValueType":{"Category":"Primitive","Name":"float"}},{"MemberType":"Function","Name":"FindPartOnParabola","Parameters":[{"Name":"ignoreDescendentsTable","Type":{"Category":"DataType","Name":"Objects"}}],"ReturnType":{"Category":"Group","Name":"Tuple"},"Security":"RobloxScriptSecurity"}],"MemoryCategory":"Instances","Name":"ParabolaAdornment","Superclass":"PVAdornment"},{"Members":[{"Category":"Appearance","MemberType":"Property","Name":"LineThickness","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Appearance","MemberType":"Property","Name":"SurfaceColor","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["Hidden","NotReplicated","Deprecated"],"ValueType":{"Category":"DataType","Name":"BrickColor"}},{"Category":"Appearance","MemberType":"Property","Name":"SurfaceColor3","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Appearance","MemberType":"Property","Name":"SurfaceTransparency","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}}],"MemoryCategory":"Instances","Name":"SelectionBox","Superclass":"PVAdornment"},{"Members":[{"Category":"Appearance","MemberType":"Property","Name":"SurfaceColor","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["Hidden","NotReplicated","Deprecated"],"ValueType":{"Category":"DataType","Name":"BrickColor"}},{"Category":"Appearance","MemberType":"Property","Name":"SurfaceColor3","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Appearance","MemberType":"Property","Name":"SurfaceTransparency","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}}],"MemoryCategory":"Instances","Name":"SelectionSphere","Superclass":"PVAdornment"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Adornee","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Class","Name":"BasePart"}}],"MemoryCategory":"Instances","Name":"PartAdornment","Superclass":"GuiBase3d","Tags":["NotCreatable"]},{"Members":[],"MemoryCategory":"Instances","Name":"HandlesBase","Superclass":"PartAdornment","Tags":["NotCreatable"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Axes","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Axes"}},{"MemberType":"Event","Name":"MouseButton1Down","Parameters":[{"Name":"axis","Type":{"Category":"Enum","Name":"Axis"}}],"Security":"None"},{"MemberType":"Event","Name":"MouseButton1Up","Parameters":[{"Name":"axis","Type":{"Category":"Enum","Name":"Axis"}}],"Security":"None"},{"MemberType":"Event","Name":"MouseDrag","Parameters":[{"Name":"axis","Type":{"Category":"Enum","Name":"Axis"}},{"Name":"relativeAngle","Type":{"Category":"Primitive","Name":"float"}},{"Name":"deltaRadius","Type":{"Category":"Primitive","Name":"float"}}],"Security":"None"},{"MemberType":"Event","Name":"MouseEnter","Parameters":[{"Name":"axis","Type":{"Category":"Enum","Name":"Axis"}}],"Security":"None"},{"MemberType":"Event","Name":"MouseLeave","Parameters":[{"Name":"axis","Type":{"Category":"Enum","Name":"Axis"}}],"Security":"None"}],"MemoryCategory":"Instances","Name":"ArcHandles","Superclass":"HandlesBase"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Faces","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Faces"}},{"Category":"Appearance","MemberType":"Property","Name":"Style","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"HandlesStyle"}},{"MemberType":"Event","Name":"MouseButton1Down","Parameters":[{"Name":"face","Type":{"Category":"Enum","Name":"NormalId"}}],"Security":"None"},{"MemberType":"Event","Name":"MouseButton1Up","Parameters":[{"Name":"face","Type":{"Category":"Enum","Name":"NormalId"}}],"Security":"None"},{"MemberType":"Event","Name":"MouseDrag","Parameters":[{"Name":"face","Type":{"Category":"Enum","Name":"NormalId"}},{"Name":"distance","Type":{"Category":"Primitive","Name":"float"}}],"Security":"None"},{"MemberType":"Event","Name":"MouseEnter","Parameters":[{"Name":"face","Type":{"Category":"Enum","Name":"NormalId"}}],"Security":"None"},{"MemberType":"Event","Name":"MouseLeave","Parameters":[{"Name":"face","Type":{"Category":"Enum","Name":"NormalId"}}],"Security":"None"}],"MemoryCategory":"Instances","Name":"Handles","Superclass":"HandlesBase"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"TargetSurface","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"NormalId"}}],"MemoryCategory":"Instances","Name":"SurfaceSelection","Superclass":"PartAdornment"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Humanoid","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Class","Name":"Humanoid"}}],"MemoryCategory":"Instances","Name":"SelectionLasso","Superclass":"GuiBase3d","Tags":["NotCreatable"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Part","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Class","Name":"BasePart"}}],"MemoryCategory":"Instances","Name":"SelectionPartLasso","Superclass":"SelectionLasso","Tags":["Deprecated"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Point","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector3"}}],"MemoryCategory":"Instances","Name":"SelectionPointLasso","Superclass":"SelectionLasso","Tags":["Deprecated"]},{"Members":[],"MemoryCategory":"Instances","Name":"GuiItem","Superclass":"Instance","Tags":["NotCreatable"]},{"Members":[],"MemoryCategory":"Instances","Name":"Backpack","Superclass":"GuiItem"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"TextureId","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Content"}}],"MemoryCategory":"Instances","Name":"BackpackItem","Superclass":"GuiItem","Tags":["NotCreatable"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Active","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"BinType","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"BinType"}},{"MemberType":"Function","Name":"Disable","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"ToggleSelect","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Event","Name":"Deselected","Parameters":[],"Security":"None"},{"MemberType":"Event","Name":"Selected","Parameters":[{"Name":"mouse","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"}],"MemoryCategory":"Instances","Name":"HopperBin","Superclass":"BackpackItem","Tags":["Deprecated"]},{"Members":[{"Category":"Behavior","MemberType":"Property","Name":"CanBeDropped","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"State","MemberType":"Property","Name":"Enabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Appearance","MemberType":"Property","Name":"Grip","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"CFrame"}},{"Category":"Appearance","MemberType":"Property","Name":"GripForward","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Appearance","MemberType":"Property","Name":"GripPos","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Appearance","MemberType":"Property","Name":"GripRight","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Appearance","MemberType":"Property","Name":"GripUp","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Behavior","MemberType":"Property","Name":"ManualActivationOnly","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Behavior","MemberType":"Property","Name":"RequiresHandle","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Appearance","MemberType":"Property","Name":"ToolTip","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"string"}},{"MemberType":"Function","Name":"Activate","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"Deactivate","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Event","Name":"Activated","Parameters":[],"Security":"None"},{"MemberType":"Event","Name":"Deactivated","Parameters":[],"Security":"None"},{"MemberType":"Event","Name":"Equipped","Parameters":[{"Name":"mouse","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"},{"MemberType":"Event","Name":"Unequipped","Parameters":[],"Security":"None"}],"MemoryCategory":"Instances","Name":"Tool","Superclass":"BackpackItem"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"TeamColor","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"BrickColor"}}],"MemoryCategory":"Instances","Name":"Flag","Superclass":"Tool","Tags":["Deprecated"]},{"Members":[],"MemoryCategory":"Instances","Name":"ButtonBindingWidget","Superclass":"GuiItem","Tags":["NotCreatable"]},{"Members":[],"MemoryCategory":"Instances","Name":"GuiRoot","Superclass":"GuiItem","Tags":["NotCreatable","NotReplicated"]},{"Members":[],"MemoryCategory":"Instances","Name":"Hopper","Superclass":"GuiItem","Tags":["NotCreatable","Service","Deprecated"]},{"Members":[],"MemoryCategory":"Instances","Name":"StarterPack","Superclass":"GuiItem","Tags":["NotCreatable","Service"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"AutoSelectGuiEnabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"CoreEffectFolder","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["Hidden","NotReplicated"],"ValueType":{"Category":"Class","Name":"Folder"}},{"Category":"Data","MemberType":"Property","Name":"CoreGuiFolder","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["Hidden","NotReplicated"],"ValueType":{"Category":"Class","Name":"Folder"}},{"Category":"Data","MemberType":"Property","Name":"CoreGuiNavigationEnabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"GuiNavigationEnabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"IsModalDialog","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated","Deprecated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"IsWindows","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated","Deprecated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"MenuIsOpen","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"SelectedCoreObject","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"Class","Name":"GuiObject"}},{"Category":"Data","MemberType":"Property","Name":"SelectedObject","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Class","Name":"GuiObject"}},{"MemberType":"Function","Name":"AddCenterDialog","Parameters":[{"Name":"dialog","Type":{"Category":"Class","Name":"Instance"}},{"Name":"centerDialogType","Type":{"Category":"Enum","Name":"CenterDialogType"}},{"Name":"showFunction","Type":{"Category":"DataType","Name":"Function"}},{"Name":"hideFunction","Type":{"Category":"DataType","Name":"Function"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"AddKey","Parameters":[{"Name":"key","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"AddSelectionParent","Parameters":[{"Name":"selectionName","Type":{"Category":"Primitive","Name":"string"}},{"Name":"selectionParent","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"AddSelectionTuple","Parameters":[{"Name":"selectionName","Type":{"Category":"Primitive","Name":"string"}},{"Name":"selections","Type":{"Category":"Group","Name":"Tuple"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"AddSpecialKey","Parameters":[{"Name":"key","Type":{"Category":"Enum","Name":"SpecialKey"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"BroadcastNotification","Parameters":[{"Name":"data","Type":{"Category":"Primitive","Name":"string"}},{"Name":"notificationType","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"CloseStatsBasedOnInputString","Parameters":[{"Name":"input","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"GetBrickCount","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"int"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"GetClosestDialogToPosition","Parameters":[{"Name":"position","Type":{"Category":"DataType","Name":"Vector3"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"GetErrorCode","Parameters":[],"ReturnType":{"Category":"Enum","Name":"ConnectionError"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"GetErrorMessage","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"string"},"Security":"RobloxScriptSecurity","Tags":["Deprecated"]},{"MemberType":"Function","Name":"GetErrorType","Parameters":[],"ReturnType":{"Category":"Enum","Name":"ConnectionError"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"GetGuiInset","Parameters":[],"ReturnType":{"Category":"Group","Name":"Tuple"},"Security":"None"},{"MemberType":"Function","Name":"GetNotificationTypeList","Parameters":[],"ReturnType":{"Category":"Group","Name":"Dictionary"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"GetResolutionScale","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"int"},"Security":"LocalUserSecurity"},{"MemberType":"Function","Name":"GetSafeZoneOffsets","Parameters":[],"ReturnType":{"Category":"Group","Name":"Dictionary"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"GetUiMessage","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"string"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"IsMemoryTrackerEnabled","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"IsTenFootInterface","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Function","Name":"OpenBrowserWindow","Parameters":[{"Name":"url","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"OpenNativeOverlay","Parameters":[{"Name":"title","Type":{"Category":"Primitive","Name":"string"}},{"Name":"url","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"RemoveCenterDialog","Parameters":[{"Name":"dialog","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"RemoveKey","Parameters":[{"Name":"key","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"RemoveSelectionGroup","Parameters":[{"Name":"selectionName","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"RemoveSpecialKey","Parameters":[{"Name":"key","Type":{"Category":"Enum","Name":"SpecialKey"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"SetGlobalGuiInset","Parameters":[{"Name":"x1","Type":{"Category":"Primitive","Name":"int"}},{"Name":"y1","Type":{"Category":"Primitive","Name":"int"}},{"Name":"x2","Type":{"Category":"Primitive","Name":"int"}},{"Name":"y2","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"SetMenuIsOpen","Parameters":[{"Name":"open","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"SetSafeZoneOffsets","Parameters":[{"Name":"top","Type":{"Category":"Primitive","Name":"float"}},{"Name":"bottom","Type":{"Category":"Primitive","Name":"float"}},{"Name":"left","Type":{"Category":"Primitive","Name":"float"}},{"Name":"right","Type":{"Category":"Primitive","Name":"float"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"SetUiMessage","Parameters":[{"Name":"msgType","Type":{"Category":"Enum","Name":"UiMessageType"}},{"Default":"errorCode","Name":"uiMessage","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"LocalUserSecurity"},{"MemberType":"Function","Name":"ShowStatsBasedOnInputString","Parameters":[{"Name":"input","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"ToggleFullscreen","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"GetScreenResolution","Parameters":[],"ReturnType":{"Category":"DataType","Name":"Vector2"},"Security":"RobloxScriptSecurity","Tags":["Yields"]},{"MemberType":"Event","Name":"BrowserWindowClosed","Parameters":[],"Security":"RobloxScriptSecurity"},{"MemberType":"Event","Name":"ErrorMessageChanged","Parameters":[{"Name":"newErrorMessage","Type":{"Category":"Primitive","Name":"string"}}],"Security":"RobloxScriptSecurity","Tags":["Deprecated"]},{"MemberType":"Event","Name":"KeyPressed","Parameters":[{"Name":"key","Type":{"Category":"Primitive","Name":"string"}},{"Name":"modifiers","Type":{"Category":"Primitive","Name":"string"}}],"Security":"RobloxScriptSecurity"},{"MemberType":"Event","Name":"MenuClosed","Parameters":[],"Security":"None"},{"MemberType":"Event","Name":"MenuOpened","Parameters":[],"Security":"None"},{"MemberType":"Event","Name":"SafeZoneOffsetsChanged","Parameters":[],"Security":"RobloxScriptSecurity"},{"MemberType":"Event","Name":"ShowLeaveConfirmation","Parameters":[],"Security":"RobloxScriptSecurity"},{"MemberType":"Event","Name":"SpecialKeyPressed","Parameters":[{"Name":"key","Type":{"Category":"Enum","Name":"SpecialKey"}},{"Name":"modifiers","Type":{"Category":"Primitive","Name":"string"}}],"Security":"RobloxScriptSecurity"},{"MemberType":"Event","Name":"UiMessageChanged","Parameters":[{"Name":"msgType","Type":{"Category":"Enum","Name":"UiMessageType"}},{"Name":"newUiMessage","Type":{"Category":"Primitive","Name":"string"}}],"Security":"RobloxScriptSecurity"},{"MemberType":"Callback","Name":"SendCoreUiNotification","Parameters":[{"Name":"title","Type":{"Category":"Primitive","Name":"string"}},{"Name":"text","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"}],"MemoryCategory":"Instances","Name":"GuiService","Superclass":"Instance","Tags":["NotCreatable","Service","NotReplicated"]},{"Members":[],"MemoryCategory":"Instances","Name":"GuidRegistryService","Superclass":"Instance","Tags":["NotCreatable","Service"]},{"Members":[{"MemberType":"Function","Name":"GetMotor","Parameters":[{"Name":"inputType","Type":{"Category":"Enum","Name":"UserInputType"}},{"Name":"vibrationMotor","Type":{"Category":"Enum","Name":"VibrationMotor"}}],"ReturnType":{"Category":"Group","Name":"Tuple"},"Security":"None"},{"MemberType":"Function","Name":"IsMotorSupported","Parameters":[{"Name":"inputType","Type":{"Category":"Enum","Name":"UserInputType"}},{"Name":"vibrationMotor","Type":{"Category":"Enum","Name":"VibrationMotor"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Function","Name":"IsVibrationSupported","Parameters":[{"Name":"inputType","Type":{"Category":"Enum","Name":"UserInputType"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Function","Name":"SetMotor","Parameters":[{"Name":"inputType","Type":{"Category":"Enum","Name":"UserInputType"}},{"Name":"vibrationMotor","Type":{"Category":"Enum","Name":"VibrationMotor"}},{"Name":"vibrationValues","Type":{"Category":"Group","Name":"Tuple"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"}],"MemoryCategory":"Instances","Name":"HapticService","Superclass":"Instance","Tags":["NotCreatable","Service","NotReplicated"]},{"Members":[{"MemberType":"Function","Name":"GetAsync","Parameters":[{"Name":"apiUrlPath","Type":{"Category":"Primitive","Name":"string"}},{"Default":"Default","Name":"priority","Type":{"Category":"Enum","Name":"ThrottlingPriority"}},{"Default":"Default","Name":"httpRequestType","Type":{"Category":"Enum","Name":"HttpRequestType"}},{"Default":"false","Name":"doNotAllowDiabolicalMode","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Primitive","Name":"string"},"Security":"RobloxScriptSecurity","Tags":["Yields"]},{"MemberType":"Function","Name":"GetAsyncFullUrl","Parameters":[{"Name":"apiUrl","Type":{"Category":"Primitive","Name":"string"}},{"Default":"Default","Name":"priority","Type":{"Category":"Enum","Name":"ThrottlingPriority"}},{"Default":"Default","Name":"httpRequestType","Type":{"Category":"Enum","Name":"HttpRequestType"}},{"Default":"false","Name":"doNotAllowDiabolicalMode","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Primitive","Name":"string"},"Security":"RobloxScriptSecurity","Tags":["Yields"]},{"MemberType":"Function","Name":"PostAsync","Parameters":[{"Name":"apiUrlPath","Type":{"Category":"Primitive","Name":"string"}},{"Name":"data","Type":{"Category":"Primitive","Name":"string"}},{"Default":"Default","Name":"priority","Type":{"Category":"Enum","Name":"ThrottlingPriority"}},{"Default":"ApplicationJson","Name":"content_type","Type":{"Category":"Enum","Name":"HttpContentType"}},{"Default":"Default","Name":"httpRequestType","Type":{"Category":"Enum","Name":"HttpRequestType"}},{"Default":"false","Name":"doNotAllowDiabolicalMode","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Primitive","Name":"string"},"Security":"RobloxScriptSecurity","Tags":["Yields"]},{"MemberType":"Function","Name":"PostAsyncFullUrl","Parameters":[{"Name":"apiUrl","Type":{"Category":"Primitive","Name":"string"}},{"Name":"data","Type":{"Category":"Primitive","Name":"string"}},{"Default":"Default","Name":"priority","Type":{"Category":"Enum","Name":"ThrottlingPriority"}},{"Default":"ApplicationJson","Name":"content_type","Type":{"Category":"Enum","Name":"HttpContentType"}},{"Default":"Default","Name":"httpRequestType","Type":{"Category":"Enum","Name":"HttpRequestType"}},{"Default":"false","Name":"doNotAllowDiabolicalMode","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Primitive","Name":"string"},"Security":"RobloxScriptSecurity","Tags":["Yields"]}],"MemoryCategory":"Instances","Name":"HttpRbxApiService","Superclass":"Instance","Tags":["NotCreatable","Service"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"HttpEnabled","Security":{"Read":"LocalUserSecurity","Write":"LocalUserSecurity"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"MemberType":"Function","Name":"GenerateGUID","Parameters":[{"Default":"true","Name":"wrapInCurlyBraces","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Primitive","Name":"string"},"Security":"None"},{"MemberType":"Function","Name":"JSONDecode","Parameters":[{"Name":"input","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Group","Name":"Variant"},"Security":"None"},{"MemberType":"Function","Name":"JSONEncode","Parameters":[{"Name":"input","Type":{"Category":"Group","Name":"Variant"}}],"ReturnType":{"Category":"Primitive","Name":"string"},"Security":"None"},{"MemberType":"Function","Name":"UrlEncode","Parameters":[{"Name":"input","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"string"},"Security":"None"},{"MemberType":"Function","Name":"GetAsync","Parameters":[{"Name":"url","Type":{"Category":"Primitive","Name":"string"}},{"Default":"false","Name":"nocache","Type":{"Category":"Primitive","Name":"bool"}},{"Name":"headers","Type":{"Category":"Group","Name":"Variant"}}],"ReturnType":{"Category":"Primitive","Name":"string"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"PostAsync","Parameters":[{"Name":"url","Type":{"Category":"Primitive","Name":"string"}},{"Name":"data","Type":{"Category":"Primitive","Name":"string"}},{"Default":"ApplicationJson","Name":"content_type","Type":{"Category":"Enum","Name":"HttpContentType"}},{"Default":"false","Name":"compress","Type":{"Category":"Primitive","Name":"bool"}},{"Name":"headers","Type":{"Category":"Group","Name":"Variant"}}],"ReturnType":{"Category":"Primitive","Name":"string"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"RequestAsync","Parameters":[{"Name":"requestOptions","Type":{"Category":"Group","Name":"Dictionary"}}],"ReturnType":{"Category":"Group","Name":"Dictionary"},"Security":"None","Tags":["Yields"]}],"MemoryCategory":"Instances","Name":"HttpService","Superclass":"Instance","Tags":["NotCreatable","Service"]},{"Members":[{"Category":"Control","MemberType":"Property","Name":"AutoJumpEnabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Control","MemberType":"Property","Name":"AutoRotate","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Game","MemberType":"Property","Name":"AutomaticScalingEnabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"CameraOffset","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Data","MemberType":"Property","Name":"DisplayDistanceType","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"HumanoidDisplayDistanceType"}},{"Category":"Control","MemberType":"Property","Name":"FloorMaterial","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Enum","Name":"Material"}},{"Category":"Game","MemberType":"Property","Name":"Health","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"HealthDisplayDistance","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"HealthDisplayType","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"HumanoidHealthDisplayType"}},{"Category":"Game","MemberType":"Property","Name":"HipHeight","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Control","MemberType":"Property","Name":"Jump","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Game","MemberType":"Property","Name":"JumpPower","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"LeftLeg","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["Hidden","NotReplicated","Deprecated"],"ValueType":{"Category":"Class","Name":"BasePart"}},{"Category":"Game","MemberType":"Property","Name":"MaxHealth","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Game","MemberType":"Property","Name":"MaxSlopeAngle","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Control","MemberType":"Property","Name":"MoveDirection","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Data","MemberType":"Property","Name":"NameDisplayDistance","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"NameOcclusion","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"NameOcclusion"}},{"Category":"Control","MemberType":"Property","Name":"PlatformStand","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"RigType","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"HumanoidRigType"}},{"Category":"Data","MemberType":"Property","Name":"RightLeg","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["Hidden","NotReplicated","Deprecated"],"ValueType":{"Category":"Class","Name":"BasePart"}},{"Category":"Data","MemberType":"Property","Name":"RootPart","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Class","Name":"BasePart"}},{"Category":"Control","MemberType":"Property","Name":"SeatPart","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Class","Name":"BasePart"}},{"Category":"Control","MemberType":"Property","Name":"Sit","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Control","MemberType":"Property","Name":"TargetPoint","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Data","MemberType":"Property","Name":"Torso","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["Hidden","NotReplicated","Deprecated"],"ValueType":{"Category":"Class","Name":"BasePart"}},{"Category":"Game","MemberType":"Property","Name":"WalkSpeed","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Control","MemberType":"Property","Name":"WalkToPart","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"ValueType":{"Category":"Class","Name":"BasePart"}},{"Category":"Control","MemberType":"Property","Name":"WalkToPoint","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Game","MemberType":"Property","Name":"maxHealth","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated","Deprecated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"MemberType":"Function","Name":"AddAccessory","Parameters":[{"Name":"accessory","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"AddCustomStatus","Parameters":[{"Name":"status","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"AddStatus","Parameters":[{"Default":"Poison","Name":"status","Type":{"Category":"Enum","Name":"Status"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"BuildRigFromAttachments","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"ChangeState","Parameters":[{"Default":"None","Name":"state","Type":{"Category":"Enum","Name":"HumanoidStateType"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"EquipTool","Parameters":[{"Name":"tool","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"GetAccessories","Parameters":[],"ReturnType":{"Category":"Group","Name":"Array"},"Security":"None"},{"MemberType":"Function","Name":"GetBodyPartR15","Parameters":[{"Name":"part","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Enum","Name":"BodyPartR15"},"Security":"None"},{"MemberType":"Function","Name":"GetLimb","Parameters":[{"Name":"part","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Enum","Name":"Limb"},"Security":"None"},{"MemberType":"Function","Name":"GetPlayingAnimationTracks","Parameters":[],"ReturnType":{"Category":"Group","Name":"Array"},"Security":"None"},{"MemberType":"Function","Name":"GetState","Parameters":[],"ReturnType":{"Category":"Enum","Name":"HumanoidStateType"},"Security":"None"},{"MemberType":"Function","Name":"GetStateEnabled","Parameters":[{"Name":"state","Type":{"Category":"Enum","Name":"HumanoidStateType"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Function","Name":"GetStatuses","Parameters":[],"ReturnType":{"Category":"Group","Name":"Array"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"HasCustomStatus","Parameters":[{"Name":"status","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"HasStatus","Parameters":[{"Default":"Poison","Name":"status","Type":{"Category":"Enum","Name":"Status"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"LoadAnimation","Parameters":[{"Name":"animation","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None"},{"MemberType":"Function","Name":"Move","Parameters":[{"Name":"moveDirection","Type":{"Category":"DataType","Name":"Vector3"}},{"Default":"false","Name":"relativeToCamera","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"MoveTo","Parameters":[{"Name":"location","Type":{"Category":"DataType","Name":"Vector3"}},{"Default":"nil","Name":"part","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"RemoveAccessories","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"RemoveCustomStatus","Parameters":[{"Name":"status","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"RemoveStatus","Parameters":[{"Default":"Poison","Name":"status","Type":{"Category":"Enum","Name":"Status"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"ReplaceBodyPartR15","Parameters":[{"Name":"bodyPart","Type":{"Category":"Enum","Name":"BodyPartR15"}},{"Name":"part","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Function","Name":"SetClickToWalkEnabled","Parameters":[{"Name":"enabled","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"SetStateEnabled","Parameters":[{"Name":"state","Type":{"Category":"Enum","Name":"HumanoidStateType"}},{"Name":"enabled","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"TakeDamage","Parameters":[{"Name":"amount","Type":{"Category":"Primitive","Name":"float"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"UnequipTools","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"loadAnimation","Parameters":[{"Name":"animation","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"takeDamage","Parameters":[{"Name":"amount","Type":{"Category":"Primitive","Name":"float"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Event","Name":"AnimationPlayed","Parameters":[{"Name":"animationTrack","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"},{"MemberType":"Event","Name":"Climbing","Parameters":[{"Name":"speed","Type":{"Category":"Primitive","Name":"float"}}],"Security":"None"},{"MemberType":"Event","Name":"CustomStatusAdded","Parameters":[{"Name":"status","Type":{"Category":"Primitive","Name":"string"}}],"Security":"None","Tags":["Deprecated"]},{"MemberType":"Event","Name":"CustomStatusRemoved","Parameters":[{"Name":"status","Type":{"Category":"Primitive","Name":"string"}}],"Security":"None","Tags":["Deprecated"]},{"MemberType":"Event","Name":"Died","Parameters":[],"Security":"None"},{"MemberType":"Event","Name":"FallingDown","Parameters":[{"Name":"active","Type":{"Category":"Primitive","Name":"bool"}}],"Security":"None"},{"MemberType":"Event","Name":"FreeFalling","Parameters":[{"Name":"active","Type":{"Category":"Primitive","Name":"bool"}}],"Security":"None"},{"MemberType":"Event","Name":"GettingUp","Parameters":[{"Name":"active","Type":{"Category":"Primitive","Name":"bool"}}],"Security":"None"},{"MemberType":"Event","Name":"HealthChanged","Parameters":[{"Name":"health","Type":{"Category":"Primitive","Name":"float"}}],"Security":"None"},{"MemberType":"Event","Name":"Jumping","Parameters":[{"Name":"active","Type":{"Category":"Primitive","Name":"bool"}}],"Security":"None"},{"MemberType":"Event","Name":"MoveToFinished","Parameters":[{"Name":"reached","Type":{"Category":"Primitive","Name":"bool"}}],"Security":"None"},{"MemberType":"Event","Name":"PlatformStanding","Parameters":[{"Name":"active","Type":{"Category":"Primitive","Name":"bool"}}],"Security":"None"},{"MemberType":"Event","Name":"Ragdoll","Parameters":[{"Name":"active","Type":{"Category":"Primitive","Name":"bool"}}],"Security":"None"},{"MemberType":"Event","Name":"Running","Parameters":[{"Name":"speed","Type":{"Category":"Primitive","Name":"float"}}],"Security":"None"},{"MemberType":"Event","Name":"Seated","Parameters":[{"Name":"active","Type":{"Category":"Primitive","Name":"bool"}},{"Name":"currentSeatPart","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"},{"MemberType":"Event","Name":"StateChanged","Parameters":[{"Name":"old","Type":{"Category":"Enum","Name":"HumanoidStateType"}},{"Name":"new","Type":{"Category":"Enum","Name":"HumanoidStateType"}}],"Security":"None"},{"MemberType":"Event","Name":"StateEnabledChanged","Parameters":[{"Name":"state","Type":{"Category":"Enum","Name":"HumanoidStateType"}},{"Name":"isEnabled","Type":{"Category":"Primitive","Name":"bool"}}],"Security":"None"},{"MemberType":"Event","Name":"StatusAdded","Parameters":[{"Name":"status","Type":{"Category":"Enum","Name":"Status"}}],"Security":"None","Tags":["Deprecated"]},{"MemberType":"Event","Name":"StatusRemoved","Parameters":[{"Name":"status","Type":{"Category":"Enum","Name":"Status"}}],"Security":"None","Tags":["Deprecated"]},{"MemberType":"Event","Name":"Strafing","Parameters":[{"Name":"active","Type":{"Category":"Primitive","Name":"bool"}}],"Security":"None"},{"MemberType":"Event","Name":"Swimming","Parameters":[{"Name":"speed","Type":{"Category":"Primitive","Name":"float"}}],"Security":"None"},{"MemberType":"Event","Name":"Touched","Parameters":[{"Name":"touchingPart","Type":{"Category":"Class","Name":"Instance"}},{"Name":"humanoidPart","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"}],"MemoryCategory":"Instances","Name":"Humanoid","Superclass":"Instance"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Delta","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Data","MemberType":"Property","Name":"KeyCode","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"ValueType":{"Category":"Enum","Name":"KeyCode"}},{"Category":"Data","MemberType":"Property","Name":"Position","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"State","MemberType":"Property","Name":"UserInputState","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"ValueType":{"Category":"Enum","Name":"UserInputState"}},{"Category":"Data","MemberType":"Property","Name":"UserInputType","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"ValueType":{"Category":"Enum","Name":"UserInputType"}}],"MemoryCategory":"Instances","Name":"InputObject","Superclass":"Instance","Tags":["NotCreatable"]},{"Members":[{"Category":"Behavior","MemberType":"Property","Name":"AllowClientInsertModels","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"Tags":["NotScriptable"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Behavior","MemberType":"Property","Name":"AllowInsertFreeModels","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"Tags":["NotReplicated","NotBrowsable","Deprecated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"MemberType":"Function","Name":"ApproveAssetId","Parameters":[{"Name":"assetId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"ApproveAssetVersionId","Parameters":[{"Name":"assetVersionId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"Insert","Parameters":[{"Name":"instance","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"LoadLocalAsset","Parameters":[{"Name":"assetPath","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"GetBaseCategories","Parameters":[],"ReturnType":{"Category":"Group","Name":"Array"},"Security":"None","Tags":["Yields","Deprecated"]},{"MemberType":"Function","Name":"GetBaseSets","Parameters":[],"ReturnType":{"Category":"Group","Name":"Array"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"GetCollection","Parameters":[{"Name":"categoryId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Group","Name":"Array"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"GetFreeDecals","Parameters":[{"Name":"searchText","Type":{"Category":"Primitive","Name":"string"}},{"Name":"pageNum","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Group","Name":"Array"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"GetFreeModels","Parameters":[{"Name":"searchText","Type":{"Category":"Primitive","Name":"string"}},{"Name":"pageNum","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Group","Name":"Array"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"GetLatestAssetVersionAsync","Parameters":[{"Name":"assetId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Primitive","Name":"int64"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"GetUserCategories","Parameters":[{"Name":"userId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Group","Name":"Array"},"Security":"None","Tags":["Yields","Deprecated"]},{"MemberType":"Function","Name":"GetUserSets","Parameters":[{"Name":"userId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Group","Name":"Array"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"LoadAsset","Parameters":[{"Name":"assetId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"LoadAssetVersion","Parameters":[{"Name":"assetVersionId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"loadAsset","Parameters":[{"Name":"assetId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None","Tags":["Yields","Deprecated"]}],"MemoryCategory":"Instances","Name":"InsertService","Superclass":"Instance","Tags":["NotCreatable","Service"]},{"Members":[],"MemoryCategory":"Instances","Name":"InstancePacketCache","Superclass":"Instance","Tags":["NotCreatable","Service","NotReplicated"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"C0","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"CFrame"}},{"Category":"Data","MemberType":"Property","Name":"C1","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"CFrame"}},{"Category":"Data","MemberType":"Property","Name":"Part0","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Class","Name":"BasePart"}},{"Category":"Data","MemberType":"Property","Name":"Part1","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Class","Name":"BasePart"}},{"Category":"Data","MemberType":"Property","Name":"part1","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["Hidden","NotReplicated","Deprecated"],"ValueType":{"Category":"Class","Name":"BasePart"}}],"MemoryCategory":"PhysicsParts","Name":"JointInstance","Superclass":"Instance","Tags":["NotCreatable"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"BaseAngle","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}}],"MemoryCategory":"PhysicsParts","Name":"DynamicRotate","Superclass":"JointInstance","Tags":["NotCreatable"]},{"Members":[],"MemoryCategory":"PhysicsParts","Name":"RotateP","Superclass":"DynamicRotate"},{"Members":[],"MemoryCategory":"PhysicsParts","Name":"RotateV","Superclass":"DynamicRotate"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"F0","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Data","MemberType":"Property","Name":"F1","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Data","MemberType":"Property","Name":"F2","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Data","MemberType":"Property","Name":"F3","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector3"}}],"MemoryCategory":"PhysicsParts","Name":"Glue","Superclass":"JointInstance"},{"Members":[],"MemoryCategory":"PhysicsParts","Name":"ManualSurfaceJointInstance","Superclass":"JointInstance","Tags":["NotCreatable"]},{"Members":[],"MemoryCategory":"PhysicsParts","Name":"ManualGlue","Superclass":"ManualSurfaceJointInstance"},{"Members":[],"MemoryCategory":"PhysicsParts","Name":"ManualWeld","Superclass":"ManualSurfaceJointInstance"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"CurrentAngle","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"DesiredAngle","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"MaxVelocity","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"MemberType":"Function","Name":"SetDesiredAngle","Parameters":[{"Name":"value","Type":{"Category":"Primitive","Name":"float"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"}],"MemoryCategory":"PhysicsParts","Name":"Motor","Superclass":"JointInstance"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Transform","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["Hidden","NotReplicated"],"ValueType":{"Category":"DataType","Name":"CFrame"}}],"MemoryCategory":"PhysicsParts","Name":"Motor6D","Superclass":"Motor"},{"Members":[],"MemoryCategory":"PhysicsParts","Name":"Rotate","Superclass":"JointInstance"},{"Members":[],"MemoryCategory":"PhysicsParts","Name":"Snap","Superclass":"JointInstance"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"CurrentAngle","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"DesiredAngle","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"Hole","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Class","Name":"Hole"}},{"Category":"Data","MemberType":"Property","Name":"MaxVelocity","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}}],"MemoryCategory":"Instances","Name":"VelocityMotor","Superclass":"JointInstance"},{"Members":[],"MemoryCategory":"PhysicsParts","Name":"Weld","Superclass":"JointInstance"},{"Members":[{"MemberType":"Function","Name":"ClearJoinAfterMoveJoints","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"CreateJoinAfterMoveJoints","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"SetJoinAfterMoveInstance","Parameters":[{"Name":"joinInstance","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"SetJoinAfterMoveTarget","Parameters":[{"Name":"joinTarget","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"ShowPermissibleJoints","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"}],"MemoryCategory":"Instances","Name":"JointsService","Superclass":"Instance","Tags":["NotCreatable","Service"]},{"Members":[],"MemoryCategory":"Instances","Name":"KeyboardService","Superclass":"Instance","Tags":["NotCreatable","Service"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Time","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"MemberType":"Function","Name":"AddPose","Parameters":[{"Name":"pose","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"GetPoses","Parameters":[],"ReturnType":{"Category":"DataType","Name":"Objects"},"Security":"None"},{"MemberType":"Function","Name":"RemovePose","Parameters":[{"Name":"pose","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"}],"MemoryCategory":"Animation","Name":"Keyframe","Superclass":"Instance"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Loop","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"Priority","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"AnimationPriority"}},{"MemberType":"Function","Name":"AddKeyframe","Parameters":[{"Name":"keyframe","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"GetKeyframes","Parameters":[],"ReturnType":{"Category":"DataType","Name":"Objects"},"Security":"None"},{"MemberType":"Function","Name":"RemoveKeyframe","Parameters":[{"Name":"keyframe","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"}],"MemoryCategory":"Animation","Name":"KeyframeSequence","Superclass":"Instance"},{"Members":[{"MemberType":"Function","Name":"GetKeyframeSequence","Parameters":[{"Name":"assetId","Type":{"Category":"DataType","Name":"Content"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"PluginSecurity","Tags":["Deprecated"]},{"MemberType":"Function","Name":"GetKeyframeSequenceById","Parameters":[{"Name":"assetId","Type":{"Category":"Primitive","Name":"int64"}},{"Name":"useCache","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"PluginSecurity","Tags":["Deprecated"]},{"MemberType":"Function","Name":"RegisterActiveKeyframeSequence","Parameters":[{"Name":"keyframeSequence","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"DataType","Name":"Content"},"Security":"None"},{"MemberType":"Function","Name":"RegisterKeyframeSequence","Parameters":[{"Name":"keyframeSequence","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"DataType","Name":"Content"},"Security":"None"},{"MemberType":"Function","Name":"GetAnimations","Parameters":[{"Name":"userId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"GetKeyframeSequenceAsync","Parameters":[{"Name":"assetId","Type":{"Category":"DataType","Name":"Content"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None","Tags":["Yields"]}],"MemoryCategory":"Animation","Name":"KeyframeSequenceProvider","Superclass":"Instance","Tags":["NotCreatable","Service","NotReplicated"]},{"Members":[{"Category":"Appearance","MemberType":"Property","Name":"Brightness","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Appearance","MemberType":"Property","Name":"Color","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Appearance","MemberType":"Property","Name":"Enabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Appearance","MemberType":"Property","Name":"Shadows","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}}],"MemoryCategory":"Instances","Name":"Light","Superclass":"Instance","Tags":["NotCreatable"]},{"Members":[{"Category":"Appearance","MemberType":"Property","Name":"Range","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}}],"MemoryCategory":"Instances","Name":"PointLight","Superclass":"Light"},{"Members":[{"Category":"Appearance","MemberType":"Property","Name":"Angle","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Appearance","MemberType":"Property","Name":"Face","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"NormalId"}},{"Category":"Appearance","MemberType":"Property","Name":"Range","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}}],"MemoryCategory":"Instances","Name":"SpotLight","Superclass":"Light"},{"Members":[{"Category":"Appearance","MemberType":"Property","Name":"Angle","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Appearance","MemberType":"Property","Name":"Face","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"NormalId"}},{"Category":"Appearance","MemberType":"Property","Name":"Range","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}}],"MemoryCategory":"Instances","Name":"SurfaceLight","Superclass":"Light"},{"Members":[{"Category":"Appearance","MemberType":"Property","Name":"Ambient","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Appearance","MemberType":"Property","Name":"Brightness","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"ClockTime","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Appearance","MemberType":"Property","Name":"ColorShift_Bottom","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Appearance","MemberType":"Property","Name":"ColorShift_Top","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Fog","MemberType":"Property","Name":"FogColor","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Fog","MemberType":"Property","Name":"FogEnd","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Fog","MemberType":"Property","Name":"FogStart","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"GeographicLatitude","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Appearance","MemberType":"Property","Name":"GlobalShadows","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Appearance","MemberType":"Property","Name":"OutdoorAmbient","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Appearance","MemberType":"Property","Name":"Outlines","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Appearance","MemberType":"Property","Name":"ShadowColor","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated","Deprecated"],"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Data","MemberType":"Property","Name":"TimeOfDay","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"string"}},{"MemberType":"Function","Name":"GetMinutesAfterMidnight","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"double"},"Security":"None"},{"MemberType":"Function","Name":"GetMoonDirection","Parameters":[],"ReturnType":{"Category":"DataType","Name":"Vector3"},"Security":"None"},{"MemberType":"Function","Name":"GetMoonPhase","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"float"},"Security":"None"},{"MemberType":"Function","Name":"GetSunDirection","Parameters":[],"ReturnType":{"Category":"DataType","Name":"Vector3"},"Security":"None"},{"MemberType":"Function","Name":"SetMinutesAfterMidnight","Parameters":[{"Name":"minutes","Type":{"Category":"Primitive","Name":"double"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"getMinutesAfterMidnight","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"double"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"setMinutesAfterMidnight","Parameters":[{"Name":"minutes","Type":{"Category":"Primitive","Name":"double"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Event","Name":"LightingChanged","Parameters":[{"Name":"skyboxChanged","Type":{"Category":"Primitive","Name":"bool"}}],"Security":"None"}],"MemoryCategory":"Instances","Name":"Lighting","Superclass":"Instance","Tags":["NotCreatable","Service"]},{"Members":[{"Category":"Behavior","MemberType":"Property","Name":"ForcePlayModeGameLocaleId","Security":{"Read":"LocalUserSecurity","Write":"LocalUserSecurity"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"Behavior","MemberType":"Property","Name":"ForcePlayModeRobloxLocaleId","Security":{"Read":"LocalUserSecurity","Write":"LocalUserSecurity"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"Localization","MemberType":"Property","Name":"IsTextScraperRunning","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["Hidden","ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Behavior","MemberType":"Property","Name":"RobloxForcePlayModeGameLocaleId","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"Behavior","MemberType":"Property","Name":"RobloxForcePlayModeRobloxLocaleId","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"Localization","MemberType":"Property","Name":"RobloxLocaleId","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"Localization","MemberType":"Property","Name":"SystemLocaleId","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"string"}},{"MemberType":"Function","Name":"GetCorescriptLocalizations","Parameters":[],"ReturnType":{"Category":"DataType","Name":"Objects"},"Security":"None"},{"MemberType":"Function","Name":"GetTranslatorForPlayer","Parameters":[{"Name":"player","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None"},{"MemberType":"Function","Name":"StartTextScraper","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"StopTextScraper","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"PromptExportToCSVs","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity","Tags":["Yields"]},{"MemberType":"Function","Name":"PromptImportFromCSVs","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity","Tags":["Yields"]},{"MemberType":"Event","Name":"AutoTranslateWillRun","Parameters":[],"Security":"RobloxScriptSecurity"}],"MemoryCategory":"Instances","Name":"LocalizationService","Superclass":"Instance","Tags":["NotCreatable","Service","NotReplicated"]},{"Members":[{"Category":"Localization","MemberType":"Property","Name":"DevelopmentLanguage","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["Hidden","NotReplicated","Deprecated"],"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"Behavior","MemberType":"Property","Name":"Root","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["Hidden","NotReplicated","Deprecated"],"ValueType":{"Category":"Class","Name":"Instance"}},{"Category":"Localization","MemberType":"Property","Name":"SourceLocaleId","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"string"}},{"MemberType":"Function","Name":"GetContents","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"string"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"GetEntries","Parameters":[],"ReturnType":{"Category":"Group","Name":"Array"},"Security":"None"},{"MemberType":"Function","Name":"GetString","Parameters":[{"Name":"targetLocaleId","Type":{"Category":"Primitive","Name":"string"}},{"Name":"key","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"string"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"GetTranslator","Parameters":[{"Name":"localeId","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None"},{"MemberType":"Function","Name":"RemoveEntry","Parameters":[{"Name":"key","Type":{"Category":"Primitive","Name":"string"}},{"Name":"source","Type":{"Category":"Primitive","Name":"string"}},{"Name":"context","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"RemoveEntryValue","Parameters":[{"Name":"key","Type":{"Category":"Primitive","Name":"string"}},{"Name":"source","Type":{"Category":"Primitive","Name":"string"}},{"Name":"context","Type":{"Category":"Primitive","Name":"string"}},{"Name":"localeId","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"RemoveKey","Parameters":[{"Name":"key","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"RemoveTargetLocale","Parameters":[{"Name":"localeId","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"SetContents","Parameters":[{"Name":"contents","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"SetEntries","Parameters":[{"Name":"entries","Type":{"Category":"Group","Name":"Variant"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"SetEntry","Parameters":[{"Name":"key","Type":{"Category":"Primitive","Name":"string"}},{"Name":"targetLocaleId","Type":{"Category":"Primitive","Name":"string"}},{"Name":"text","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"SetEntryContext","Parameters":[{"Name":"key","Type":{"Category":"Primitive","Name":"string"}},{"Name":"source","Type":{"Category":"Primitive","Name":"string"}},{"Name":"context","Type":{"Category":"Primitive","Name":"string"}},{"Name":"newContext","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"SetEntryExample","Parameters":[{"Name":"key","Type":{"Category":"Primitive","Name":"string"}},{"Name":"source","Type":{"Category":"Primitive","Name":"string"}},{"Name":"context","Type":{"Category":"Primitive","Name":"string"}},{"Name":"example","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"SetEntryKey","Parameters":[{"Name":"key","Type":{"Category":"Primitive","Name":"string"}},{"Name":"source","Type":{"Category":"Primitive","Name":"string"}},{"Name":"context","Type":{"Category":"Primitive","Name":"string"}},{"Name":"newKey","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"SetEntrySource","Parameters":[{"Name":"key","Type":{"Category":"Primitive","Name":"string"}},{"Name":"source","Type":{"Category":"Primitive","Name":"string"}},{"Name":"context","Type":{"Category":"Primitive","Name":"string"}},{"Name":"newSource","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"SetEntryValue","Parameters":[{"Name":"key","Type":{"Category":"Primitive","Name":"string"}},{"Name":"source","Type":{"Category":"Primitive","Name":"string"}},{"Name":"context","Type":{"Category":"Primitive","Name":"string"}},{"Name":"localeId","Type":{"Category":"Primitive","Name":"string"}},{"Name":"text","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"SetIsExemptFromUGCAnalytics","Parameters":[{"Name":"value","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"}],"MemoryCategory":"Instances","Name":"LocalizationTable","Superclass":"Instance"},{"Members":[{"MemberType":"Function","Name":"ExecuteScript","Parameters":[{"Name":"source","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"GetHttpResultHistory","Parameters":[],"ReturnType":{"Category":"Group","Name":"Array"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"GetLogHistory","Parameters":[],"ReturnType":{"Category":"Group","Name":"Array"},"Security":"None"},{"MemberType":"Function","Name":"RequestHttpResultApproved","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"RequestServerHttpResult","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"RequestServerOutput","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Event","Name":"HttpResultOut","Parameters":[{"Name":"httpResult","Type":{"Category":"Group","Name":"Dictionary"}}],"Security":"RobloxScriptSecurity"},{"MemberType":"Event","Name":"MessageOut","Parameters":[{"Name":"message","Type":{"Category":"Primitive","Name":"string"}},{"Name":"messageType","Type":{"Category":"Enum","Name":"MessageType"}}],"Security":"None"},{"MemberType":"Event","Name":"OnHttpResultApproved","Parameters":[{"Name":"isApproved","Type":{"Category":"Primitive","Name":"bool"}}],"Security":"RobloxScriptSecurity"},{"MemberType":"Event","Name":"ServerHttpResultOut","Parameters":[{"Name":"httpResult","Type":{"Category":"Group","Name":"Dictionary"}}],"Security":"RobloxScriptSecurity"},{"MemberType":"Event","Name":"ServerMessageOut","Parameters":[{"Name":"message","Type":{"Category":"Primitive","Name":"string"}},{"Name":"messageType","Type":{"Category":"Enum","Name":"MessageType"}},{"Name":"timestamp","Type":{"Category":"Primitive","Name":"int"}}],"Security":"RobloxScriptSecurity"}],"MemoryCategory":"Instances","Name":"LogService","Superclass":"Instance","Tags":["NotCreatable","Service"]},{"Members":[{"MemberType":"Function","Name":"Logout","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxSecurity"},{"MemberType":"Function","Name":"PromptLogin","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxSecurity"},{"MemberType":"Event","Name":"LoginFailed","Parameters":[{"Name":"loginError","Type":{"Category":"Primitive","Name":"string"}}],"Security":"RobloxSecurity"},{"MemberType":"Event","Name":"LoginSucceeded","Parameters":[{"Name":"username","Type":{"Category":"Primitive","Name":"string"}}],"Security":"RobloxSecurity"}],"MemoryCategory":"Instances","Name":"LoginService","Superclass":"Instance","Tags":["NotCreatable","Service"]},{"Members":[{"Category":"Diagnostics","MemberType":"Property","Name":"AreScriptStartsReported","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Settings","MemberType":"Property","Name":"DefaultWaitTime","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"double"}},{"Category":"Garbage Collection","MemberType":"Property","Name":"GcFrequency","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Garbage Collection","MemberType":"Property","Name":"GcLimit","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Garbage Collection","MemberType":"Property","Name":"GcPause","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Garbage Collection","MemberType":"Property","Name":"GcStepMul","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Settings","MemberType":"Property","Name":"WaitingThreadsBudget","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}}],"MemoryCategory":"Instances","Name":"LuaSettings","Superclass":"Instance","Tags":["Service"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"CurrentEditor","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["NotScriptable"],"ValueType":{"Category":"Class","Name":"Instance"}}],"MemoryCategory":"Instances","Name":"LuaSourceContainer","Superclass":"Instance","Tags":["NotCreatable","NotBrowsable"]},{"Members":[{"Category":"Behavior","MemberType":"Property","Name":"Disabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"LinkedSource","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Content"}}],"MemoryCategory":"Script","Name":"BaseScript","Superclass":"LuaSourceContainer","Tags":["NotCreatable"]},{"Members":[],"MemoryCategory":"Instances","Name":"CoreScript","Superclass":"BaseScript","Tags":["NotCreatable","NotReplicated"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Source","Security":{"Read":"PluginSecurity","Write":"PluginSecurity"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"ProtectedString"}},{"MemberType":"Function","Name":"GetHash","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"string"},"Security":"LocalUserSecurity"}],"MemoryCategory":"Script","Name":"Script","Superclass":"BaseScript"},{"Members":[],"MemoryCategory":"Script","Name":"LocalScript","Superclass":"Script"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"LinkedSource","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Content"}},{"Category":"Data","MemberType":"Property","Name":"Source","Security":{"Read":"PluginSecurity","Write":"PluginSecurity"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"ProtectedString"}}],"MemoryCategory":"Script","Name":"ModuleScript","Superclass":"LuaSourceContainer"},{"Members":[],"MemoryCategory":"Instances","Name":"LuaWebService","Superclass":"Instance","Tags":["NotCreatable","Service"]},{"Members":[{"MemberType":"Function","Name":"PlayerCanMakePurchases","Parameters":[{"Name":"player","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"PromptGamePassPurchase","Parameters":[{"Name":"player","Type":{"Category":"Class","Name":"Instance"}},{"Name":"gamePassId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"PromptNativePurchase","Parameters":[{"Name":"player","Type":{"Category":"Class","Name":"Instance"}},{"Name":"productId","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"PromptProductPurchase","Parameters":[{"Name":"player","Type":{"Category":"Class","Name":"Instance"}},{"Name":"productId","Type":{"Category":"Primitive","Name":"int64"}},{"Default":"true","Name":"equipIfPurchased","Type":{"Category":"Primitive","Name":"bool"}},{"Default":"Default","Name":"currencyType","Type":{"Category":"Enum","Name":"CurrencyType"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"PromptPurchase","Parameters":[{"Name":"player","Type":{"Category":"Class","Name":"Instance"}},{"Name":"assetId","Type":{"Category":"Primitive","Name":"int64"}},{"Default":"true","Name":"equipIfPurchased","Type":{"Category":"Primitive","Name":"bool"}},{"Default":"Default","Name":"currencyType","Type":{"Category":"Enum","Name":"CurrencyType"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"PromptThirdPartyPurchase","Parameters":[{"Name":"player","Type":{"Category":"Class","Name":"Instance"}},{"Name":"productId","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"LocalUserSecurity"},{"MemberType":"Function","Name":"ReportAssetSale","Parameters":[{"Name":"assetId","Type":{"Category":"Primitive","Name":"string"}},{"Name":"robuxAmount","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"ReportRobuxUpsellStarted","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"SignalClientPurchaseSuccess","Parameters":[{"Name":"ticket","Type":{"Category":"Primitive","Name":"string"}},{"Name":"playerId","Type":{"Category":"Primitive","Name":"int64"}},{"Name":"productId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"SignalPromptGamePassPurchaseFinished","Parameters":[{"Name":"player","Type":{"Category":"Class","Name":"Instance"}},{"Name":"gamePassId","Type":{"Category":"Primitive","Name":"int64"}},{"Name":"success","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"SignalPromptProductPurchaseFinished","Parameters":[{"Name":"userId","Type":{"Category":"Primitive","Name":"int64"}},{"Name":"productId","Type":{"Category":"Primitive","Name":"int64"}},{"Name":"success","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"SignalPromptPurchaseFinished","Parameters":[{"Name":"player","Type":{"Category":"Class","Name":"Instance"}},{"Name":"assetId","Type":{"Category":"Primitive","Name":"int64"}},{"Name":"success","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"SignalServerLuaDialogClosed","Parameters":[{"Name":"value","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"GetDeveloperProductsAsync","Parameters":[],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"GetProductInfo","Parameters":[{"Name":"assetId","Type":{"Category":"Primitive","Name":"int64"}},{"Default":"Asset","Name":"infoType","Type":{"Category":"Enum","Name":"InfoType"}}],"ReturnType":{"Category":"Group","Name":"Dictionary"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"GetRobuxBalance","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"int"},"Security":"RobloxScriptSecurity","Tags":["Yields"]},{"MemberType":"Function","Name":"PerformPurchase","Parameters":[{"Name":"infoType","Type":{"Category":"Enum","Name":"InfoType"}},{"Name":"productId","Type":{"Category":"Primitive","Name":"int64"}},{"Name":"expectedPrice","Type":{"Category":"Primitive","Name":"int"}},{"Name":"requestId","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Group","Name":"Dictionary"},"Security":"RobloxScriptSecurity","Tags":["Yields"]},{"MemberType":"Function","Name":"PlayerOwnsAsset","Parameters":[{"Name":"player","Type":{"Category":"Class","Name":"Instance"}},{"Name":"assetId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"UserOwnsGamePassAsync","Parameters":[{"Name":"userId","Type":{"Category":"Primitive","Name":"int64"}},{"Name":"gamePassId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None","Tags":["Yields"]},{"MemberType":"Event","Name":"ClientLuaDialogRequested","Parameters":[{"Name":"arguments","Type":{"Category":"Group","Name":"Tuple"}}],"Security":"RobloxScriptSecurity"},{"MemberType":"Event","Name":"ClientPurchaseSuccess","Parameters":[{"Name":"ticket","Type":{"Category":"Primitive","Name":"string"}},{"Name":"playerId","Type":{"Category":"Primitive","Name":"int64"}},{"Name":"productId","Type":{"Category":"Primitive","Name":"int64"}}],"Security":"RobloxScriptSecurity"},{"MemberType":"Event","Name":"NativePurchaseFinished","Parameters":[{"Name":"player","Type":{"Category":"Class","Name":"Instance"}},{"Name":"productId","Type":{"Category":"Primitive","Name":"string"}},{"Name":"wasPurchased","Type":{"Category":"Primitive","Name":"bool"}}],"Security":"RobloxScriptSecurity"},{"MemberType":"Event","Name":"PromptGamePassPurchaseFinished","Parameters":[{"Name":"player","Type":{"Category":"Class","Name":"Instance"}},{"Name":"gamePassId","Type":{"Category":"Primitive","Name":"int64"}},{"Name":"wasPurchased","Type":{"Category":"Primitive","Name":"bool"}}],"Security":"None"},{"MemberType":"Event","Name":"PromptGamePassPurchaseRequested","Parameters":[{"Name":"player","Type":{"Category":"Class","Name":"Instance"}},{"Name":"gamePassId","Type":{"Category":"Primitive","Name":"int64"}}],"Security":"RobloxScriptSecurity"},{"MemberType":"Event","Name":"PromptProductPurchaseFinished","Parameters":[{"Name":"userId","Type":{"Category":"Primitive","Name":"int64"}},{"Name":"productId","Type":{"Category":"Primitive","Name":"int64"}},{"Name":"isPurchased","Type":{"Category":"Primitive","Name":"bool"}}],"Security":"None","Tags":["Deprecated"]},{"MemberType":"Event","Name":"PromptProductPurchaseRequested","Parameters":[{"Name":"player","Type":{"Category":"Class","Name":"Instance"}},{"Name":"productId","Type":{"Category":"Primitive","Name":"int64"}},{"Name":"equipIfPurchased","Type":{"Category":"Primitive","Name":"bool"}},{"Name":"currencyType","Type":{"Category":"Enum","Name":"CurrencyType"}}],"Security":"RobloxScriptSecurity"},{"MemberType":"Event","Name":"PromptPurchaseFinished","Parameters":[{"Name":"player","Type":{"Category":"Class","Name":"Instance"}},{"Name":"assetId","Type":{"Category":"Primitive","Name":"int64"}},{"Name":"isPurchased","Type":{"Category":"Primitive","Name":"bool"}}],"Security":"None"},{"MemberType":"Event","Name":"PromptPurchaseRequested","Parameters":[{"Name":"player","Type":{"Category":"Class","Name":"Instance"}},{"Name":"assetId","Type":{"Category":"Primitive","Name":"int64"}},{"Name":"equipIfPurchased","Type":{"Category":"Primitive","Name":"bool"}},{"Name":"currencyType","Type":{"Category":"Enum","Name":"CurrencyType"}}],"Security":"RobloxScriptSecurity"},{"MemberType":"Event","Name":"ServerPurchaseVerification","Parameters":[{"Name":"serverResponseTable","Type":{"Category":"Group","Name":"Dictionary"}}],"Security":"RobloxScriptSecurity"},{"MemberType":"Event","Name":"ThirdPartyPurchaseFinished","Parameters":[{"Name":"player","Type":{"Category":"Class","Name":"Instance"}},{"Name":"productId","Type":{"Category":"Primitive","Name":"string"}},{"Name":"receipt","Type":{"Category":"Primitive","Name":"string"}},{"Name":"wasPurchased","Type":{"Category":"Primitive","Name":"bool"}}],"Security":"LocalUserSecurity"},{"MemberType":"Callback","Name":"ProcessReceipt","Parameters":[{"Name":"receiptInfo","Type":{"Category":"Group","Name":"Dictionary"}}],"ReturnType":{"Category":"Enum","Name":"ProductPurchaseDecision"},"Security":"None"}],"MemoryCategory":"Instances","Name":"MarketplaceService","Superclass":"Instance","Tags":["NotCreatable","Service"]},{"Members":[{"Category":"Appearance","MemberType":"Property","Name":"Text","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"string"}}],"MemoryCategory":"Instances","Name":"Message","Superclass":"Instance","Tags":["Deprecated"]},{"Members":[],"MemoryCategory":"Instances","Name":"Hint","Superclass":"Message","Tags":["Deprecated"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Hit","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"DataType","Name":"CFrame"}},{"Category":"Data","MemberType":"Property","Name":"Icon","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Content"}},{"Category":"Data","MemberType":"Property","Name":"Origin","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"DataType","Name":"CFrame"}},{"Category":"Data","MemberType":"Property","Name":"Target","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Class","Name":"BasePart"}},{"Category":"Data","MemberType":"Property","Name":"TargetFilter","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Class","Name":"Instance"}},{"Category":"Data","MemberType":"Property","Name":"TargetSurface","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Enum","Name":"NormalId"}},{"Category":"Data","MemberType":"Property","Name":"UnitRay","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"DataType","Name":"Ray"}},{"Category":"Data","MemberType":"Property","Name":"ViewSizeX","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Data","MemberType":"Property","Name":"ViewSizeY","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Data","MemberType":"Property","Name":"X","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Data","MemberType":"Property","Name":"Y","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Data","MemberType":"Property","Name":"hit","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["Hidden","ReadOnly","NotReplicated","Deprecated"],"ValueType":{"Category":"DataType","Name":"CFrame"}},{"Category":"Data","MemberType":"Property","Name":"target","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated","Deprecated"],"ValueType":{"Category":"Class","Name":"BasePart"}},{"MemberType":"Event","Name":"Button1Down","Parameters":[],"Security":"None"},{"MemberType":"Event","Name":"Button1Up","Parameters":[],"Security":"None"},{"MemberType":"Event","Name":"Button2Down","Parameters":[],"Security":"None"},{"MemberType":"Event","Name":"Button2Up","Parameters":[],"Security":"None"},{"MemberType":"Event","Name":"Idle","Parameters":[],"Security":"None"},{"MemberType":"Event","Name":"KeyDown","Parameters":[{"Name":"key","Type":{"Category":"Primitive","Name":"string"}}],"Security":"None","Tags":["Deprecated"]},{"MemberType":"Event","Name":"KeyUp","Parameters":[{"Name":"key","Type":{"Category":"Primitive","Name":"string"}}],"Security":"None","Tags":["Deprecated"]},{"MemberType":"Event","Name":"Move","Parameters":[],"Security":"None"},{"MemberType":"Event","Name":"WheelBackward","Parameters":[],"Security":"None"},{"MemberType":"Event","Name":"WheelForward","Parameters":[],"Security":"None"},{"MemberType":"Event","Name":"keyDown","Parameters":[{"Name":"key","Type":{"Category":"Primitive","Name":"string"}}],"Security":"None","Tags":["Deprecated"]}],"MemoryCategory":"Instances","Name":"Mouse","Superclass":"Instance","Tags":["NotCreatable"]},{"Members":[],"MemoryCategory":"Instances","Name":"PlayerMouse","Superclass":"Mouse","Tags":["NotCreatable"]},{"Members":[{"MemberType":"Event","Name":"DragEnter","Parameters":[{"Name":"instances","Type":{"Category":"DataType","Name":"Objects"}}],"Security":"PluginSecurity"}],"MemoryCategory":"Instances","Name":"PluginMouse","Superclass":"Mouse","Tags":["NotCreatable"]},{"Members":[],"MemoryCategory":"Instances","Name":"MouseService","Superclass":"Instance","Tags":["NotCreatable","Service","NotReplicated"]},{"Members":[{"MemberType":"Event","Name":"Received","Parameters":[],"Security":"None"}],"MemoryCategory":"Instances","Name":"NetworkMarker","Superclass":"Instance","Tags":["NotCreatable","NotBrowsable"]},{"Members":[{"MemberType":"Function","Name":"SetOutgoingKBPSLimit","Parameters":[{"Name":"limit","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"PluginSecurity"}],"MemoryCategory":"Instances","Name":"NetworkPeer","Superclass":"Instance","Tags":["NotCreatable","NotBrowsable"]},{"Members":[{"Category":"Authentication","MemberType":"Property","Name":"Ticket","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"string"}},{"MemberType":"Event","Name":"ConnectionAccepted","Parameters":[{"Name":"peer","Type":{"Category":"Primitive","Name":"string"}},{"Name":"replicator","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"},{"MemberType":"Event","Name":"ConnectionFailed","Parameters":[{"Name":"peer","Type":{"Category":"Primitive","Name":"string"}},{"Name":"code","Type":{"Category":"Primitive","Name":"int"}},{"Name":"reason","Type":{"Category":"Primitive","Name":"string"}}],"Security":"None"},{"MemberType":"Event","Name":"ConnectionRejected","Parameters":[{"Name":"peer","Type":{"Category":"Primitive","Name":"string"}}],"Security":"None"}],"MemoryCategory":"Instances","Name":"NetworkClient","Superclass":"NetworkPeer","Tags":["NotCreatable","Service","NotReplicated"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Port","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"int"}},{"MemberType":"Function","Name":"GetClientCount","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"int"},"Security":"LocalUserSecurity"}],"MemoryCategory":"Instances","Name":"NetworkServer","Superclass":"NetworkPeer","Tags":["NotCreatable","Service","NotReplicated"]},{"Members":[{"MemberType":"Function","Name":"CloseConnection","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"LocalUserSecurity"},{"MemberType":"Function","Name":"GetPlayer","Parameters":[],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None"},{"MemberType":"Function","Name":"GetRakStatsString","Parameters":[{"Default":"0","Name":"verbosityLevel","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Primitive","Name":"string"},"Security":"PluginSecurity"}],"MemoryCategory":"Instances","Name":"NetworkReplicator","Superclass":"Instance","Tags":["NotCreatable","NotReplicated"]},{"Members":[{"MemberType":"Function","Name":"RequestServerStats","Parameters":[{"Name":"request","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Event","Name":"StatsReceived","Parameters":[{"Name":"stats","Type":{"Category":"Group","Name":"Dictionary"}}],"Security":"RobloxScriptSecurity"}],"MemoryCategory":"Instances","Name":"ClientReplicator","Superclass":"NetworkReplicator","Tags":["NotCreatable","NotReplicated"]},{"Members":[],"MemoryCategory":"Instances","Name":"ServerReplicator","Superclass":"NetworkReplicator","Tags":["NotCreatable","NotReplicated"]},{"Members":[{"Category":"Diagnostics","MemberType":"Property","Name":"ArePhysicsRejectionsReported","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Network","MemberType":"Property","Name":"ClientPhysicsSendRate","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Network","MemberType":"Property","Name":"DataGCRate","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"DataMtuAdjust","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Data","MemberType":"Property","Name":"DataSendPriority","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["Hidden","NotReplicated"],"ValueType":{"Category":"Enum","Name":"PacketPriority"}},{"Category":"Network","MemberType":"Property","Name":"DataSendRate","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"ExtraMemoryUsed","Security":{"Read":"PluginSecurity","Write":"PluginSecurity"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["Hidden","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Data","MemberType":"Property","Name":"FreeMemoryMBytes","Security":{"Read":"PluginSecurity","Write":"PluginSecurity"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["Hidden","ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Diagnostics","MemberType":"Property","Name":"IncommingReplicationLag","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"double"}},{"Category":"Network","MemberType":"Property","Name":"IsQueueErrorComputed","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Network","MemberType":"Property","Name":"NetworkOwnerRate","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Physics","MemberType":"Property","Name":"PhysicsMtuAdjust","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Physics","MemberType":"Property","Name":"PhysicsSendPriority","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["Hidden","NotReplicated"],"ValueType":{"Category":"Enum","Name":"PacketPriority"}},{"Category":"Network","MemberType":"Property","Name":"PhysicsSendRate","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Network","MemberType":"Property","Name":"PreferredClientPort","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Diagnostics","MemberType":"Property","Name":"PrintBits","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Diagnostics","MemberType":"Property","Name":"PrintEvents","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Diagnostics","MemberType":"Property","Name":"PrintFilters","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Diagnostics","MemberType":"Property","Name":"PrintInstances","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Diagnostics","MemberType":"Property","Name":"PrintPhysicsErrors","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Diagnostics","MemberType":"Property","Name":"PrintProperties","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Diagnostics","MemberType":"Property","Name":"PrintSplitMessage","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Diagnostics","MemberType":"Property","Name":"PrintStreamInstanceQuota","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Diagnostics","MemberType":"Property","Name":"PrintTouches","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Network","MemberType":"Property","Name":"ReceiveRate","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"double"}},{"Category":"Appearance","MemberType":"Property","Name":"RenderStreamedRegions","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Appearance","MemberType":"Property","Name":"ShowActiveAnimationAsset","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Network","MemberType":"Property","Name":"TouchSendRate","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Diagnostics","MemberType":"Property","Name":"TrackDataTypes","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Diagnostics","MemberType":"Property","Name":"TrackPhysicsDetails","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Network","MemberType":"Property","Name":"UseInstancePacketCache","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Network","MemberType":"Property","Name":"UsePhysicsPacketCache","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}}],"MemoryCategory":"Instances","Name":"NetworkSettings","Superclass":"Instance","Tags":["Service","NotBrowsable"]},{"Members":[{"Category":"Behavior","MemberType":"Property","Name":"IsLuaChatEnabled","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Behavior","MemberType":"Property","Name":"IsLuaGamesPageEnabled","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Behavior","MemberType":"Property","Name":"IsLuaHomePageEnabled","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"MemberType":"Function","Name":"ActionEnabled","Parameters":[{"Name":"actionType","Type":{"Category":"Enum","Name":"AppShellActionType"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"ActionTaken","Parameters":[{"Name":"actionType","Type":{"Category":"Enum","Name":"AppShellActionType"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"CancelAllNotification","Parameters":[{"Name":"userId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"LocalUserSecurity"},{"MemberType":"Function","Name":"CancelNotification","Parameters":[{"Name":"userId","Type":{"Category":"Primitive","Name":"int64"}},{"Name":"alertId","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"LocalUserSecurity"},{"MemberType":"Function","Name":"ScheduleNotification","Parameters":[{"Name":"userId","Type":{"Category":"Primitive","Name":"int64"}},{"Name":"alertId","Type":{"Category":"Primitive","Name":"int"}},{"Name":"alertMsg","Type":{"Category":"Primitive","Name":"string"}},{"Name":"minutesToFire","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"LocalUserSecurity"},{"MemberType":"Function","Name":"GetScheduledNotifications","Parameters":[{"Name":"userId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Group","Name":"Array"},"Security":"LocalUserSecurity","Tags":["Yields"]},{"MemberType":"Event","Name":"RobloxConnectionChanged","Parameters":[{"Name":"connectionName","Type":{"Category":"Primitive","Name":"string"}},{"Name":"connectionState","Type":{"Category":"Enum","Name":"ConnectionState"}},{"Name":"sequenceNumber","Type":{"Category":"Primitive","Name":"string"}}],"Security":"RobloxScriptSecurity"},{"MemberType":"Event","Name":"RobloxEventReceived","Parameters":[{"Name":"eventData","Type":{"Category":"Group","Name":"Map"}}],"Security":"RobloxScriptSecurity"}],"MemoryCategory":"Instances","Name":"NotificationService","Superclass":"Instance","Tags":["NotCreatable","Service"]},{"Members":[],"MemoryCategory":"Instances","Name":"PVInstance","Superclass":"Instance","Tags":["NotCreatable","NotBrowsable"]},{"Members":[{"Category":"Behavior","MemberType":"Property","Name":"Anchored","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Surface Inputs","MemberType":"Property","Name":"BackParamA","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Surface Inputs","MemberType":"Property","Name":"BackParamB","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Surface","MemberType":"Property","Name":"BackSurface","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"SurfaceType"}},{"Category":"Surface Inputs","MemberType":"Property","Name":"BackSurfaceInput","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"InputType"}},{"Category":"Surface Inputs","MemberType":"Property","Name":"BottomParamA","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Surface Inputs","MemberType":"Property","Name":"BottomParamB","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Surface","MemberType":"Property","Name":"BottomSurface","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"SurfaceType"}},{"Category":"Surface Inputs","MemberType":"Property","Name":"BottomSurfaceInput","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"InputType"}},{"Category":"Appearance","MemberType":"Property","Name":"BrickColor","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"DataType","Name":"BrickColor"}},{"Category":"Data","MemberType":"Property","Name":"CFrame","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"CFrame"}},{"Category":"Behavior","MemberType":"Property","Name":"CanCollide","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"CenterOfMass","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Behavior","MemberType":"Property","Name":"CollisionGroupId","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Appearance","MemberType":"Property","Name":"Color","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Part ","MemberType":"Property","Name":"CustomPhysicalProperties","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"PhysicalProperties"}},{"Category":"Part ","MemberType":"Property","Name":"Elasticity","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"Tags":["Hidden","NotReplicated","Deprecated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Part ","MemberType":"Property","Name":"Friction","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"Tags":["Hidden","NotReplicated","Deprecated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Surface Inputs","MemberType":"Property","Name":"FrontParamA","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Surface Inputs","MemberType":"Property","Name":"FrontParamB","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Surface","MemberType":"Property","Name":"FrontSurface","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"SurfaceType"}},{"Category":"Surface Inputs","MemberType":"Property","Name":"FrontSurfaceInput","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"InputType"}},{"Category":"Surface Inputs","MemberType":"Property","Name":"LeftParamA","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Surface Inputs","MemberType":"Property","Name":"LeftParamB","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Surface","MemberType":"Property","Name":"LeftSurface","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"SurfaceType"}},{"Category":"Surface Inputs","MemberType":"Property","Name":"LeftSurfaceInput","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"InputType"}},{"Category":"Data","MemberType":"Property","Name":"LocalTransparencyModifier","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["Hidden","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Behavior","MemberType":"Property","Name":"Locked","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Appearance","MemberType":"Property","Name":"Material","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"Material"}},{"Category":"Data","MemberType":"Property","Name":"Orientation","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Data","MemberType":"Property","Name":"Position","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Part ","MemberType":"Property","Name":"ReceiveAge","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["Hidden","ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Appearance","MemberType":"Property","Name":"Reflectance","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Behavior","MemberType":"Property","Name":"ResizeIncrement","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Behavior","MemberType":"Property","Name":"ResizeableFaces","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"DataType","Name":"Faces"}},{"Category":"Surface Inputs","MemberType":"Property","Name":"RightParamA","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Surface Inputs","MemberType":"Property","Name":"RightParamB","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Surface","MemberType":"Property","Name":"RightSurface","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"SurfaceType"}},{"Category":"Surface Inputs","MemberType":"Property","Name":"RightSurfaceInput","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"InputType"}},{"Category":"Data","MemberType":"Property","Name":"RotVelocity","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Data","MemberType":"Property","Name":"Rotation","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Part ","MemberType":"Property","Name":"Size","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Data","MemberType":"Property","Name":"SpecificGravity","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated","Deprecated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Surface Inputs","MemberType":"Property","Name":"TopParamA","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Surface Inputs","MemberType":"Property","Name":"TopParamB","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Surface","MemberType":"Property","Name":"TopSurface","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"SurfaceType"}},{"Category":"Surface Inputs","MemberType":"Property","Name":"TopSurfaceInput","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"InputType"}},{"Category":"Appearance","MemberType":"Property","Name":"Transparency","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"Velocity","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Appearance","MemberType":"Property","Name":"brickColor","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated","Deprecated"],"ValueType":{"Category":"DataType","Name":"BrickColor"}},{"MemberType":"Function","Name":"BreakJoints","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"CanCollideWith","Parameters":[{"Name":"part","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Function","Name":"CanSetNetworkOwnership","Parameters":[],"ReturnType":{"Category":"Group","Name":"Tuple"},"Security":"None"},{"MemberType":"Function","Name":"GetConnectedParts","Parameters":[{"Default":"false","Name":"recursive","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"DataType","Name":"Objects"},"Security":"None"},{"MemberType":"Function","Name":"GetJoints","Parameters":[],"ReturnType":{"Category":"DataType","Name":"Objects"},"Security":"None"},{"MemberType":"Function","Name":"GetMass","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"float"},"Security":"None","Tags":["CustomLuaState"]},{"MemberType":"Function","Name":"GetNetworkOwner","Parameters":[],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None"},{"MemberType":"Function","Name":"GetNetworkOwnershipAuto","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Function","Name":"GetRenderCFrame","Parameters":[],"ReturnType":{"Category":"DataType","Name":"CFrame"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"GetRootPart","Parameters":[],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None"},{"MemberType":"Function","Name":"GetTouchingParts","Parameters":[],"ReturnType":{"Category":"DataType","Name":"Objects"},"Security":"None"},{"MemberType":"Function","Name":"IsGrounded","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Function","Name":"MakeJoints","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"Negate","Parameters":[],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"LocalUserSecurity"},{"MemberType":"Function","Name":"Resize","Parameters":[{"Name":"normalId","Type":{"Category":"Enum","Name":"NormalId"}},{"Name":"deltaAmount","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Function","Name":"Separate","Parameters":[],"ReturnType":{"Category":"DataType","Name":"Objects"},"Security":"LocalUserSecurity"},{"MemberType":"Function","Name":"SetNetworkOwner","Parameters":[{"Default":"nil","Name":"playerInstance","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"SetNetworkOwnershipAuto","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"UnionWith","Parameters":[{"Name":"part","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"LocalUserSecurity"},{"MemberType":"Function","Name":"breakJoints","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"getMass","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"float"},"Security":"None","Tags":["Deprecated","CustomLuaState"]},{"MemberType":"Function","Name":"makeJoints","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"resize","Parameters":[{"Name":"normalId","Type":{"Category":"Enum","Name":"NormalId"}},{"Name":"deltaAmount","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Event","Name":"LocalSimulationTouched","Parameters":[{"Name":"part","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None","Tags":["Deprecated"]},{"MemberType":"Event","Name":"OutfitChanged","Parameters":[],"Security":"None","Tags":["Deprecated"]},{"MemberType":"Event","Name":"StoppedTouching","Parameters":[{"Name":"otherPart","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None","Tags":["Deprecated"]},{"MemberType":"Event","Name":"TouchEnded","Parameters":[{"Name":"otherPart","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"},{"MemberType":"Event","Name":"Touched","Parameters":[{"Name":"otherPart","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"},{"MemberType":"Event","Name":"touched","Parameters":[{"Name":"otherPart","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None","Tags":["Deprecated"]}],"MemoryCategory":"Instances","Name":"BasePart","Superclass":"PVInstance","Tags":["NotCreatable","NotBrowsable"]},{"Members":[],"MemoryCategory":"Instances","Name":"CornerWedgePart","Superclass":"BasePart"},{"Members":[{"Category":"Part ","MemberType":"Property","Name":"FormFactor","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated","Deprecated"],"ValueType":{"Category":"Enum","Name":"FormFactor"}},{"Category":"Part ","MemberType":"Property","Name":"formFactor","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["Hidden","NotReplicated","Deprecated"],"ValueType":{"Category":"Enum","Name":"FormFactor"}}],"MemoryCategory":"Instances","Name":"FormFactorPart","Superclass":"BasePart","Tags":["NotCreatable"]},{"Members":[{"Category":"Part ","MemberType":"Property","Name":"Shape","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"Enum","Name":"PartType"}}],"MemoryCategory":"PhysicsParts","Name":"Part","Superclass":"FormFactorPart"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"TeamColor","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"BrickColor"}},{"MemberType":"Event","Name":"FlagCaptured","Parameters":[{"Name":"player","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"}],"MemoryCategory":"Instances","Name":"FlagStand","Superclass":"Part","Tags":["Deprecated"]},{"Members":[],"MemoryCategory":"Instances","Name":"Platform","Superclass":"Part","Tags":["NotCreatable"]},{"Members":[{"Category":"Control","MemberType":"Property","Name":"Disabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Control","MemberType":"Property","Name":"Occupant","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Class","Name":"Humanoid"}},{"MemberType":"Function","Name":"Sit","Parameters":[{"Name":"humanoid","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"}],"MemoryCategory":"Instances","Name":"Seat","Superclass":"Part"},{"Members":[{"Category":"Control","MemberType":"Property","Name":"Controller","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Class","Name":"SkateboardController"}},{"Category":"Control","MemberType":"Property","Name":"ControllingHumanoid","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Class","Name":"Humanoid"}},{"Category":"Control","MemberType":"Property","Name":"Steer","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Control","MemberType":"Property","Name":"StickyWheels","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Control","MemberType":"Property","Name":"Throttle","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}},{"MemberType":"Function","Name":"ApplySpecificImpulse","Parameters":[{"Name":"impulseWorld","Type":{"Category":"DataType","Name":"Vector3"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Event","Name":"Equipped","Parameters":[{"Name":"humanoid","Type":{"Category":"Class","Name":"Instance"}},{"Name":"skateboardController","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"},{"MemberType":"Event","Name":"MoveStateChanged","Parameters":[{"Name":"newState","Type":{"Category":"Enum","Name":"MoveState"}},{"Name":"oldState","Type":{"Category":"Enum","Name":"MoveState"}}],"Security":"None"},{"MemberType":"Event","Name":"Unequipped","Parameters":[{"Name":"humanoid","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"},{"MemberType":"Event","Name":"equipped","Parameters":[{"Name":"humanoid","Type":{"Category":"Class","Name":"Instance"}},{"Name":"skateboardController","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None","Tags":["Deprecated"]},{"MemberType":"Event","Name":"unequipped","Parameters":[{"Name":"humanoid","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None","Tags":["Deprecated"]}],"MemoryCategory":"Instances","Name":"SkateboardPlatform","Superclass":"Part","Tags":["Deprecated"]},{"Members":[{"Category":"Teams","MemberType":"Property","Name":"AllowTeamChangeOnTouch","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Forcefield","MemberType":"Property","Name":"Duration","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Behavior","MemberType":"Property","Name":"Enabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Teams","MemberType":"Property","Name":"Neutral","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Teams","MemberType":"Property","Name":"TeamColor","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"BrickColor"}}],"MemoryCategory":"Instances","Name":"SpawnLocation","Superclass":"Part"},{"Members":[],"MemoryCategory":"Instances","Name":"WedgePart","Superclass":"FormFactorPart"},{"Members":[{"Category":"Behavior","MemberType":"Property","Name":"CollisionFidelity","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"Tags":["NotReplicated","NotScriptable"],"ValueType":{"Category":"Enum","Name":"CollisionFidelity"}},{"Category":"Appearance","MemberType":"Property","Name":"MeshID","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"Tags":["NotScriptable","Deprecated"],"ValueType":{"Category":"DataType","Name":"Content"}},{"Category":"Appearance","MemberType":"Property","Name":"MeshId","Security":{"Read":"None","Write":"NotAccessibleSecurity"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Content"}},{"Category":"Appearance","MemberType":"Property","Name":"TextureID","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Content"}}],"MemoryCategory":"PhysicsParts","Name":"MeshPart","Superclass":"BasePart"},{"Members":[{"Category":"Behavior","MemberType":"Property","Name":"CollisionFidelity","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"Tags":["NotReplicated","NotScriptable"],"ValueType":{"Category":"Enum","Name":"CollisionFidelity"}},{"Category":"Data","MemberType":"Property","Name":"TriangleCount","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Data","MemberType":"Property","Name":"UsePartColor","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}}],"MemoryCategory":"Instances","Name":"PartOperation","Superclass":"BasePart"},{"Members":[],"MemoryCategory":"Instances","Name":"NegateOperation","Superclass":"PartOperation"},{"Members":[],"MemoryCategory":"Instances","Name":"UnionOperation","Superclass":"PartOperation"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"IsSmooth","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated","Deprecated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Appearance","MemberType":"Property","Name":"MaterialColors","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"Tags":["NotScriptable"],"ValueType":{"Category":"DataType","Name":"BinaryString"}},{"Category":"Data","MemberType":"Property","Name":"MaxExtents","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"DataType","Name":"Region3int16"}},{"Category":"Appearance","MemberType":"Property","Name":"WaterColor","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Appearance","MemberType":"Property","Name":"WaterReflectance","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Appearance","MemberType":"Property","Name":"WaterTransparency","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Appearance","MemberType":"Property","Name":"WaterWaveSize","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Appearance","MemberType":"Property","Name":"WaterWaveSpeed","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"MemberType":"Function","Name":"AutowedgeCell","Parameters":[{"Name":"x","Type":{"Category":"Primitive","Name":"int"}},{"Name":"y","Type":{"Category":"Primitive","Name":"int"}},{"Name":"z","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"AutowedgeCells","Parameters":[{"Name":"region","Type":{"Category":"DataType","Name":"Region3int16"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"CellCenterToWorld","Parameters":[{"Name":"x","Type":{"Category":"Primitive","Name":"int"}},{"Name":"y","Type":{"Category":"Primitive","Name":"int"}},{"Name":"z","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"DataType","Name":"Vector3"},"Security":"None"},{"MemberType":"Function","Name":"CellCornerToWorld","Parameters":[{"Name":"x","Type":{"Category":"Primitive","Name":"int"}},{"Name":"y","Type":{"Category":"Primitive","Name":"int"}},{"Name":"z","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"DataType","Name":"Vector3"},"Security":"None"},{"MemberType":"Function","Name":"Clear","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"ConvertToSmooth","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"PluginSecurity","Tags":["Deprecated"]},{"MemberType":"Function","Name":"CopyRegion","Parameters":[{"Name":"region","Type":{"Category":"DataType","Name":"Region3int16"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None"},{"MemberType":"Function","Name":"CountCells","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"int"},"Security":"None"},{"MemberType":"Function","Name":"FillBall","Parameters":[{"Name":"center","Type":{"Category":"DataType","Name":"Vector3"}},{"Name":"radius","Type":{"Category":"Primitive","Name":"float"}},{"Name":"material","Type":{"Category":"Enum","Name":"Material"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"FillBlock","Parameters":[{"Name":"cframe","Type":{"Category":"DataType","Name":"CFrame"}},{"Name":"size","Type":{"Category":"DataType","Name":"Vector3"}},{"Name":"material","Type":{"Category":"Enum","Name":"Material"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"FillRegion","Parameters":[{"Name":"region","Type":{"Category":"DataType","Name":"Region3"}},{"Name":"resolution","Type":{"Category":"Primitive","Name":"float"}},{"Name":"material","Type":{"Category":"Enum","Name":"Material"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"GetCell","Parameters":[{"Name":"x","Type":{"Category":"Primitive","Name":"int"}},{"Name":"y","Type":{"Category":"Primitive","Name":"int"}},{"Name":"z","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Group","Name":"Tuple"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"GetMaterialColor","Parameters":[{"Name":"material","Type":{"Category":"Enum","Name":"Material"}}],"ReturnType":{"Category":"DataType","Name":"Color3"},"Security":"None"},{"MemberType":"Function","Name":"GetWaterCell","Parameters":[{"Name":"x","Type":{"Category":"Primitive","Name":"int"}},{"Name":"y","Type":{"Category":"Primitive","Name":"int"}},{"Name":"z","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Group","Name":"Tuple"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"PasteRegion","Parameters":[{"Name":"region","Type":{"Category":"Class","Name":"Instance"}},{"Name":"corner","Type":{"Category":"DataType","Name":"Vector3int16"}},{"Name":"pasteEmptyCells","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"ReadVoxels","Parameters":[{"Name":"region","Type":{"Category":"DataType","Name":"Region3"}},{"Name":"resolution","Type":{"Category":"Primitive","Name":"float"}}],"ReturnType":{"Category":"Group","Name":"Tuple"},"Security":"None","Tags":["CustomLuaState"]},{"MemberType":"Function","Name":"SetCell","Parameters":[{"Name":"x","Type":{"Category":"Primitive","Name":"int"}},{"Name":"y","Type":{"Category":"Primitive","Name":"int"}},{"Name":"z","Type":{"Category":"Primitive","Name":"int"}},{"Name":"material","Type":{"Category":"Enum","Name":"CellMaterial"}},{"Name":"block","Type":{"Category":"Enum","Name":"CellBlock"}},{"Name":"orientation","Type":{"Category":"Enum","Name":"CellOrientation"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"SetCells","Parameters":[{"Name":"region","Type":{"Category":"DataType","Name":"Region3int16"}},{"Name":"material","Type":{"Category":"Enum","Name":"CellMaterial"}},{"Name":"block","Type":{"Category":"Enum","Name":"CellBlock"}},{"Name":"orientation","Type":{"Category":"Enum","Name":"CellOrientation"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"SetMaterialColor","Parameters":[{"Name":"material","Type":{"Category":"Enum","Name":"Material"}},{"Name":"value","Type":{"Category":"DataType","Name":"Color3"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"SetWaterCell","Parameters":[{"Name":"x","Type":{"Category":"Primitive","Name":"int"}},{"Name":"y","Type":{"Category":"Primitive","Name":"int"}},{"Name":"z","Type":{"Category":"Primitive","Name":"int"}},{"Name":"force","Type":{"Category":"Enum","Name":"WaterForce"}},{"Name":"direction","Type":{"Category":"Enum","Name":"WaterDirection"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"WorldToCell","Parameters":[{"Name":"position","Type":{"Category":"DataType","Name":"Vector3"}}],"ReturnType":{"Category":"DataType","Name":"Vector3"},"Security":"None"},{"MemberType":"Function","Name":"WorldToCellPreferEmpty","Parameters":[{"Name":"position","Type":{"Category":"DataType","Name":"Vector3"}}],"ReturnType":{"Category":"DataType","Name":"Vector3"},"Security":"None"},{"MemberType":"Function","Name":"WorldToCellPreferSolid","Parameters":[{"Name":"position","Type":{"Category":"DataType","Name":"Vector3"}}],"ReturnType":{"Category":"DataType","Name":"Vector3"},"Security":"None"},{"MemberType":"Function","Name":"WriteVoxels","Parameters":[{"Name":"region","Type":{"Category":"DataType","Name":"Region3"}},{"Name":"resolution","Type":{"Category":"Primitive","Name":"float"}},{"Name":"materials","Type":{"Category":"Group","Name":"Array"}},{"Name":"occupancy","Type":{"Category":"Group","Name":"Array"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["CustomLuaState"]}],"MemoryCategory":"Instances","Name":"Terrain","Superclass":"BasePart","Tags":["NotCreatable"]},{"Members":[{"Category":"Part ","MemberType":"Property","Name":"Style","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"Enum","Name":"Style"}}],"MemoryCategory":"Instances","Name":"TrussPart","Superclass":"BasePart"},{"Members":[{"Category":"Control","MemberType":"Property","Name":"AreHingesDetected","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Control","MemberType":"Property","Name":"Disabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Control","MemberType":"Property","Name":"HeadsUpDisplay","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Control","MemberType":"Property","Name":"MaxSpeed","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Control","MemberType":"Property","Name":"Occupant","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Class","Name":"Humanoid"}},{"Category":"Control","MemberType":"Property","Name":"Steer","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Control","MemberType":"Property","Name":"SteerFloat","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Control","MemberType":"Property","Name":"Throttle","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Control","MemberType":"Property","Name":"ThrottleFloat","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Control","MemberType":"Property","Name":"Torque","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Control","MemberType":"Property","Name":"TurnSpeed","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"MemberType":"Function","Name":"Sit","Parameters":[{"Name":"humanoid","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"}],"MemoryCategory":"Instances","Name":"VehicleSeat","Superclass":"BasePart"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"PrimaryPart","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Class","Name":"BasePart"}},{"MemberType":"Function","Name":"BreakJoints","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"GetExtentsSize","Parameters":[],"ReturnType":{"Category":"DataType","Name":"Vector3"},"Security":"None"},{"MemberType":"Function","Name":"GetModelCFrame","Parameters":[],"ReturnType":{"Category":"DataType","Name":"CFrame"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"GetModelSize","Parameters":[],"ReturnType":{"Category":"DataType","Name":"Vector3"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"GetPrimaryPartCFrame","Parameters":[],"ReturnType":{"Category":"DataType","Name":"CFrame"},"Security":"None"},{"MemberType":"Function","Name":"MakeJoints","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"MoveTo","Parameters":[{"Name":"position","Type":{"Category":"DataType","Name":"Vector3"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"ResetOrientationToIdentity","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"SetIdentityOrientation","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"SetPrimaryPartCFrame","Parameters":[{"Name":"cframe","Type":{"Category":"DataType","Name":"CFrame"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"TranslateBy","Parameters":[{"Name":"delta","Type":{"Category":"DataType","Name":"Vector3"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"breakJoints","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"makeJoints","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"move","Parameters":[{"Name":"location","Type":{"Category":"DataType","Name":"Vector3"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"moveTo","Parameters":[{"Name":"location","Type":{"Category":"DataType","Name":"Vector3"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]}],"MemoryCategory":"PhysicsParts","Name":"Model","Superclass":"PVInstance"},{"Members":[],"MemoryCategory":"Instances","Name":"RootInstance","Superclass":"Model","Tags":["NotCreatable","NotBrowsable"]},{"Members":[{"Category":"Behavior","MemberType":"Property","Name":"AllowThirdPartySales","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"Tags":["NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Behavior","MemberType":"Property","Name":"AutoJointsMode","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"Tags":["NotScriptable"],"ValueType":{"Category":"Enum","Name":"AutoJointsMode"}},{"Category":"Data","MemberType":"Property","Name":"CurrentCamera","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"Tags":["NotReplicated"],"ValueType":{"Category":"Class","Name":"Camera"}},{"Category":"Data","MemberType":"Property","Name":"DistributedGameTime","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"Tags":["NotReplicated"],"ValueType":{"Category":"Primitive","Name":"double"}},{"Category":"Behavior","MemberType":"Property","Name":"FallenPartsDestroyHeight","Security":{"Read":"None","Write":"PluginSecurity"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Behavior","MemberType":"Property","Name":"FilteringEnabled","Security":{"Read":"None","Write":"PluginSecurity"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Behavior","MemberType":"Property","Name":"Gravity","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Behavior","MemberType":"Property","Name":"PGSPhysicsSolverEnabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"Tags":["NotReplicated","NotScriptable"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Behavior","MemberType":"Property","Name":"StreamingEnabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"Tags":["NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Behavior","MemberType":"Property","Name":"TemporaryLegacyPhysicsSolverOverride","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Behavior","MemberType":"Property","Name":"Terrain","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Class","Name":"Instance"}},{"MemberType":"Function","Name":"BreakJoints","Parameters":[{"Name":"objects","Type":{"Category":"DataType","Name":"Objects"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"ExperimentalSolverIsEnabled","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"LocalUserSecurity"},{"MemberType":"Function","Name":"FindPartOnRay","Parameters":[{"Name":"ray","Type":{"Category":"DataType","Name":"Ray"}},{"Default":"nil","Name":"ignoreDescendantsInstance","Type":{"Category":"Class","Name":"Instance"}},{"Default":"false","Name":"terrainCellsAreCubes","Type":{"Category":"Primitive","Name":"bool"}},{"Default":"false","Name":"ignoreWater","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Group","Name":"Tuple"},"Security":"None"},{"MemberType":"Function","Name":"FindPartOnRayWithIgnoreList","Parameters":[{"Name":"ray","Type":{"Category":"DataType","Name":"Ray"}},{"Name":"ignoreDescendantsTable","Type":{"Category":"DataType","Name":"Objects"}},{"Default":"false","Name":"terrainCellsAreCubes","Type":{"Category":"Primitive","Name":"bool"}},{"Default":"false","Name":"ignoreWater","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Group","Name":"Tuple"},"Security":"None"},{"MemberType":"Function","Name":"FindPartOnRayWithWhitelist","Parameters":[{"Name":"ray","Type":{"Category":"DataType","Name":"Ray"}},{"Name":"whitelistDescendantsTable","Type":{"Category":"DataType","Name":"Objects"}},{"Default":"false","Name":"ignoreWater","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Group","Name":"Tuple"},"Security":"None"},{"MemberType":"Function","Name":"FindPartsInRegion3","Parameters":[{"Name":"region","Type":{"Category":"DataType","Name":"Region3"}},{"Default":"nil","Name":"ignoreDescendantsInstance","Type":{"Category":"Class","Name":"Instance"}},{"Default":"20","Name":"maxParts","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"DataType","Name":"Objects"},"Security":"None"},{"MemberType":"Function","Name":"FindPartsInRegion3WithIgnoreList","Parameters":[{"Name":"region","Type":{"Category":"DataType","Name":"Region3"}},{"Name":"ignoreDescendantsTable","Type":{"Category":"DataType","Name":"Objects"}},{"Default":"20","Name":"maxParts","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"DataType","Name":"Objects"},"Security":"None"},{"MemberType":"Function","Name":"FindPartsInRegion3WithWhiteList","Parameters":[{"Name":"region","Type":{"Category":"DataType","Name":"Region3"}},{"Name":"whitelistDescendantsTable","Type":{"Category":"DataType","Name":"Objects"}},{"Default":"20","Name":"maxParts","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"DataType","Name":"Objects"},"Security":"None"},{"MemberType":"Function","Name":"GetNumAwakeParts","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"int"},"Security":"None"},{"MemberType":"Function","Name":"GetPhysicsAnalyzerBreakOnIssue","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"GetPhysicsAnalyzerIssue","Parameters":[{"Name":"index","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"DataType","Name":"Objects"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"GetPhysicsThrottling","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"int"},"Security":"None"},{"MemberType":"Function","Name":"GetRealPhysicsFPS","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"double"},"Security":"None"},{"MemberType":"Function","Name":"IsRegion3Empty","Parameters":[{"Name":"region","Type":{"Category":"DataType","Name":"Region3"}},{"Default":"nil","Name":"ignoreDescendentsInstance","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Function","Name":"IsRegion3EmptyWithIgnoreList","Parameters":[{"Name":"region","Type":{"Category":"DataType","Name":"Region3"}},{"Name":"ignoreDescendentsTable","Type":{"Category":"DataType","Name":"Objects"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Function","Name":"JoinToOutsiders","Parameters":[{"Name":"objects","Type":{"Category":"DataType","Name":"Objects"}},{"Name":"jointType","Type":{"Category":"Enum","Name":"JointCreationMode"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"MakeJoints","Parameters":[{"Name":"objects","Type":{"Category":"DataType","Name":"Objects"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"PGSIsEnabled","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Function","Name":"SetPhysicsAnalyzerBreakOnIssue","Parameters":[{"Name":"enable","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"SetPhysicsThrottleEnabled","Parameters":[{"Name":"value","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"LocalUserSecurity"},{"MemberType":"Function","Name":"UnjoinFromOutsiders","Parameters":[{"Name":"objects","Type":{"Category":"DataType","Name":"Objects"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"ZoomToExtents","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"findPartOnRay","Parameters":[{"Name":"ray","Type":{"Category":"DataType","Name":"Ray"}},{"Default":"nil","Name":"ignoreDescendantsInstance","Type":{"Category":"Class","Name":"Instance"}},{"Default":"false","Name":"terrainCellsAreCubes","Type":{"Category":"Primitive","Name":"bool"}},{"Default":"false","Name":"ignoreWater","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Group","Name":"Tuple"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"findPartsInRegion3","Parameters":[{"Name":"region","Type":{"Category":"DataType","Name":"Region3"}},{"Default":"nil","Name":"ignoreDescendantsInstance","Type":{"Category":"Class","Name":"Instance"}},{"Default":"20","Name":"maxParts","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"DataType","Name":"Objects"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Event","Name":"PhysicsAnalyzerIssuesFound","Parameters":[{"Name":"count","Type":{"Category":"Primitive","Name":"int"}}],"Security":"PluginSecurity"}],"MemoryCategory":"Instances","Name":"Workspace","Superclass":"RootInstance","Tags":["NotCreatable","Service"]},{"Members":[],"MemoryCategory":"Instances","Name":"Status","Superclass":"Model","Tags":["NotCreatable","Deprecated"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"IsFinished","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"MemberType":"Function","Name":"GetCurrentPage","Parameters":[],"ReturnType":{"Category":"Group","Name":"Array"},"Security":"None"},{"MemberType":"Function","Name":"AdvanceToNextPageAsync","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Yields"]}],"MemoryCategory":"Instances","Name":"Pages","Superclass":"Instance","Tags":["NotCreatable","NotReplicated"]},{"Members":[],"MemoryCategory":"Instances","Name":"DataStorePages","Superclass":"Pages","Tags":["NotCreatable","NotReplicated"]},{"Members":[],"MemoryCategory":"Instances","Name":"FriendPages","Superclass":"Pages","Tags":["NotCreatable","NotReplicated"]},{"Members":[],"MemoryCategory":"Instances","Name":"InventoryPages","Superclass":"Pages","Tags":["NotCreatable","NotReplicated"]},{"Members":[],"MemoryCategory":"Instances","Name":"StandardPages","Superclass":"Pages","Tags":["NotCreatable","NotReplicated"]},{"Members":[],"MemoryCategory":"Instances","Name":"PartOperationAsset","Superclass":"Instance"},{"Members":[{"Category":"Motion","MemberType":"Property","Name":"Acceleration","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"Appearance","MemberType":"Property","Name":"Color","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"ColorSequence"}},{"Category":"Particles","MemberType":"Property","Name":"Drag","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Emission","MemberType":"Property","Name":"EmissionDirection","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"NormalId"}},{"Category":"Emission","MemberType":"Property","Name":"Enabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Emission","MemberType":"Property","Name":"Lifetime","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"NumberRange"}},{"Category":"Appearance","MemberType":"Property","Name":"LightEmission","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Appearance","MemberType":"Property","Name":"LightInfluence","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Particles","MemberType":"Property","Name":"LockedToPart","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Emission","MemberType":"Property","Name":"Rate","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Emission","MemberType":"Property","Name":"RotSpeed","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"NumberRange"}},{"Category":"Emission","MemberType":"Property","Name":"Rotation","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"NumberRange"}},{"Category":"Appearance","MemberType":"Property","Name":"Size","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"NumberSequence"}},{"Category":"Emission","MemberType":"Property","Name":"Speed","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"NumberRange"}},{"Category":"Emission","MemberType":"Property","Name":"SpreadAngle","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector2"}},{"Category":"Appearance","MemberType":"Property","Name":"Texture","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Content"}},{"Category":"Appearance","MemberType":"Property","Name":"Transparency","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"NumberSequence"}},{"Category":"Particles","MemberType":"Property","Name":"VelocityInheritance","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Emission","MemberType":"Property","Name":"VelocitySpread","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated","Deprecated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Appearance","MemberType":"Property","Name":"ZOffset","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"MemberType":"Function","Name":"Clear","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"Emit","Parameters":[{"Default":"16","Name":"particleCount","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"}],"MemoryCategory":"Instances","Name":"ParticleEmitter","Superclass":"Instance"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Status","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Enum","Name":"PathStatus"}},{"MemberType":"Function","Name":"GetPointCoordinates","Parameters":[],"ReturnType":{"Category":"Group","Name":"Array"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"GetWaypoints","Parameters":[],"ReturnType":{"Category":"Group","Name":"Array"},"Security":"None"},{"MemberType":"Function","Name":"CheckOcclusionAsync","Parameters":[{"Name":"start","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Primitive","Name":"int"},"Security":"None","Tags":["Yields"]}],"MemoryCategory":"Instances","Name":"Path","Superclass":"Instance","Tags":["NotCreatable","NotReplicated"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"EmptyCutoff","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated","Deprecated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"MemberType":"Function","Name":"ComputeRawPathAsync","Parameters":[{"Name":"start","Type":{"Category":"DataType","Name":"Vector3"}},{"Name":"finish","Type":{"Category":"DataType","Name":"Vector3"}},{"Name":"maxDistance","Type":{"Category":"Primitive","Name":"float"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None","Tags":["Yields","Deprecated"]},{"MemberType":"Function","Name":"ComputeSmoothPathAsync","Parameters":[{"Name":"start","Type":{"Category":"DataType","Name":"Vector3"}},{"Name":"finish","Type":{"Category":"DataType","Name":"Vector3"}},{"Name":"maxDistance","Type":{"Category":"Primitive","Name":"float"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None","Tags":["Yields","Deprecated"]},{"MemberType":"Function","Name":"FindPathAsync","Parameters":[{"Name":"start","Type":{"Category":"DataType","Name":"Vector3"}},{"Name":"finish","Type":{"Category":"DataType","Name":"Vector3"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None","Tags":["Yields"]}],"MemoryCategory":"Instances","Name":"PathfindingService","Superclass":"Instance","Tags":["NotCreatable","Service","NotReplicated"]},{"Members":[],"MemoryCategory":"Instances","Name":"PhysicsPacketCache","Superclass":"Instance","Tags":["NotCreatable","Service","NotReplicated"]},{"Members":[{"MemberType":"Function","Name":"CollisionGroupContainsPart","Parameters":[{"Name":"name","Type":{"Category":"Primitive","Name":"string"}},{"Name":"part","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Function","Name":"CollisionGroupSetCollidable","Parameters":[{"Name":"name1","Type":{"Category":"Primitive","Name":"string"}},{"Name":"name2","Type":{"Category":"Primitive","Name":"string"}},{"Name":"collidable","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"CollisionGroupsAreCollidable","Parameters":[{"Name":"name1","Type":{"Category":"Primitive","Name":"string"}},{"Name":"name2","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Function","Name":"CreateCollisionGroup","Parameters":[{"Name":"name","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"int"},"Security":"None"},{"MemberType":"Function","Name":"GetCollisionGroupId","Parameters":[{"Name":"name","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"int"},"Security":"None"},{"MemberType":"Function","Name":"GetCollisionGroupName","Parameters":[{"Name":"name","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Primitive","Name":"string"},"Security":"None"},{"MemberType":"Function","Name":"GetCollisionGroups","Parameters":[],"ReturnType":{"Category":"Group","Name":"Array"},"Security":"None"},{"MemberType":"Function","Name":"GetMaxCollisionGroups","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"int"},"Security":"None"},{"MemberType":"Function","Name":"RemoveCollisionGroup","Parameters":[{"Name":"name","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"RenameCollisionGroup","Parameters":[{"Name":"from","Type":{"Category":"Primitive","Name":"string"}},{"Name":"to","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"SetPartCollisionGroup","Parameters":[{"Name":"part","Type":{"Category":"Class","Name":"Instance"}},{"Name":"name","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"}],"MemoryCategory":"Instances","Name":"PhysicsService","Superclass":"Instance","Tags":["NotCreatable","Service"]},{"Members":[{"Category":"Performance","MemberType":"Property","Name":"AllowSleep","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Display","MemberType":"Property","Name":"AreAnchorsShown","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Display","MemberType":"Property","Name":"AreAssembliesShown","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Display","MemberType":"Property","Name":"AreAwakePartsHighlighted","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Display","MemberType":"Property","Name":"AreBodyTypesShown","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Display","MemberType":"Property","Name":"AreContactIslandsShown","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Display","MemberType":"Property","Name":"AreContactPointsShown","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Display","MemberType":"Property","Name":"AreJointCoordinatesShown","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Display","MemberType":"Property","Name":"AreMechanismsShown","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Display","MemberType":"Property","Name":"AreModelCoordsShown","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Display","MemberType":"Property","Name":"AreOwnersShown","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Display","MemberType":"Property","Name":"ArePartCoordsShown","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Display","MemberType":"Property","Name":"AreRegionsShown","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Display","MemberType":"Property","Name":"AreUnalignedPartsShown","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Display","MemberType":"Property","Name":"AreWorldCoordsShown","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Display","MemberType":"Property","Name":"DisableCSGv2","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Display","MemberType":"Property","Name":"IsReceiveAgeShown","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Display","MemberType":"Property","Name":"IsTreeShown","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"PhysicsAnalyzerEnabled","Security":{"Read":"PluginSecurity","Write":"PluginSecurity"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Performance","MemberType":"Property","Name":"PhysicsEnvironmentalThrottle","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"EnviromentalPhysicsThrottle"}},{"Category":"Display","MemberType":"Property","Name":"ShowDecompositionGeometry","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Performance","MemberType":"Property","Name":"ThrottleAdjustTime","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"double"}},{"Category":"Display","MemberType":"Property","Name":"UseCSGv2","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}}],"MemoryCategory":"Instances","Name":"PhysicsSettings","Superclass":"Instance","Tags":["Service"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"AccountAge","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Data","MemberType":"Property","Name":"AppearanceDidLoad","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated","Deprecated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"AutoJumpEnabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Camera","MemberType":"Property","Name":"CameraMaxZoomDistance","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Camera","MemberType":"Property","Name":"CameraMinZoomDistance","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Camera","MemberType":"Property","Name":"CameraMode","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"CameraMode"}},{"Category":"Behavior","MemberType":"Property","Name":"CanLoadCharacterAppearance","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"Character","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Class","Name":"Model"}},{"Category":"Data","MemberType":"Property","Name":"CharacterAppearance","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"Tags":["NotBrowsable","Deprecated"],"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"Data","MemberType":"Property","Name":"CharacterAppearanceId","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int64"}},{"Category":"Data","MemberType":"Property","Name":"ChatMode","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Enum","Name":"ChatMode"}},{"Category":"Data","MemberType":"Property","Name":"DataComplexity","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated","Deprecated"],"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Data","MemberType":"Property","Name":"DataComplexityLimit","Security":{"Read":"LocalUserSecurity","Write":"LocalUserSecurity"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated","Deprecated"],"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Data","MemberType":"Property","Name":"DataReady","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated","Deprecated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Camera","MemberType":"Property","Name":"DevCameraOcclusionMode","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"DevCameraOcclusionMode"}},{"Category":"Camera","MemberType":"Property","Name":"DevComputerCameraMode","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"DevComputerCameraMovementMode"}},{"Category":"Control","MemberType":"Property","Name":"DevComputerMovementMode","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"DevComputerMovementMode"}},{"Category":"Camera","MemberType":"Property","Name":"DevEnableMouseLock","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Camera","MemberType":"Property","Name":"DevTouchCameraMode","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"DevTouchCameraMovementMode"}},{"Category":"Control","MemberType":"Property","Name":"DevTouchMovementMode","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"DevTouchMovementMode"}},{"Category":"Data","MemberType":"Property","Name":"DisplayName","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":false,"CanSave":false},"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"Data","MemberType":"Property","Name":"FollowUserId","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"int64"}},{"Category":"Data","MemberType":"Property","Name":"Guest","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Camera","MemberType":"Property","Name":"HealthDisplayDistance","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"LocaleId","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["Hidden","ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"Data","MemberType":"Property","Name":"MaximumSimulationRadius","Security":{"Read":"LocalUserSecurity","Write":"LocalUserSecurity"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"MembershipType","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Enum","Name":"MembershipType"}},{"Category":"Camera","MemberType":"Property","Name":"NameDisplayDistance","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Team","MemberType":"Property","Name":"Neutral","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"OsPlatform","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":false,"CanSave":false},"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"Data","MemberType":"Property","Name":"ReplicationFocus","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Class","Name":"Instance"}},{"Category":"Data","MemberType":"Property","Name":"RespawnLocation","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Class","Name":"SpawnLocation"}},{"Category":"Data","MemberType":"Property","Name":"SimulationRadius","Security":{"Read":"LocalUserSecurity","Write":"LocalUserSecurity"},"Serialization":{"CanLoad":false,"CanSave":false},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Team","MemberType":"Property","Name":"Team","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"Tags":["NotReplicated"],"ValueType":{"Category":"Class","Name":"Team"}},{"Category":"Team","MemberType":"Property","Name":"TeamColor","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"BrickColor"}},{"Category":"Data","MemberType":"Property","Name":"Teleported","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["Hidden","ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"TeleportedIn","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"UserId","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"ValueType":{"Category":"Primitive","Name":"int64"}},{"Category":"Data","MemberType":"Property","Name":"VRDevice","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":false,"CanSave":false},"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"Data","MemberType":"Property","Name":"userId","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["Deprecated"],"ValueType":{"Category":"Primitive","Name":"int64"}},{"MemberType":"Function","Name":"AddToBlockList","Parameters":[{"Name":"userIds","Type":{"Category":"Group","Name":"Array"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"ClearCharacterAppearance","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"DistanceFromCharacter","Parameters":[{"Name":"point","Type":{"Category":"DataType","Name":"Vector3"}}],"ReturnType":{"Category":"Primitive","Name":"float"},"Security":"None"},{"MemberType":"Function","Name":"GetFriendStatus","Parameters":[{"Name":"player","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Enum","Name":"FriendStatus"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"GetGameSessionID","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"string"},"Security":"RobloxSecurity"},{"MemberType":"Function","Name":"GetJoinData","Parameters":[],"ReturnType":{"Category":"Group","Name":"Dictionary"},"Security":"None"},{"MemberType":"Function","Name":"GetMouse","Parameters":[],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None"},{"MemberType":"Function","Name":"GetUnder13","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"HasAppearanceLoaded","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Function","Name":"IsUserAvailableForExperiment","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"Kick","Parameters":[{"Default":"","Name":"message","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"LoadBoolean","Parameters":[{"Name":"key","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"LoadCharacterAppearance","Parameters":[{"Name":"assetInstance","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"LoadData","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"LocalUserSecurity","Tags":["Deprecated"]},{"MemberType":"Function","Name":"LoadInstance","Parameters":[{"Name":"key","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"LoadNumber","Parameters":[{"Name":"key","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"double"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"LoadString","Parameters":[{"Name":"key","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"string"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"Move","Parameters":[{"Name":"walkDirection","Type":{"Category":"DataType","Name":"Vector3"}},{"Default":"false","Name":"relativeToCamera","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"RemoveCharacter","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"LocalUserSecurity"},{"MemberType":"Function","Name":"RequestFriendship","Parameters":[{"Name":"player","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"RevokeFriendship","Parameters":[{"Name":"player","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"SaveBoolean","Parameters":[{"Name":"key","Type":{"Category":"Primitive","Name":"string"}},{"Name":"value","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"SaveData","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"LocalUserSecurity","Tags":["Deprecated"]},{"MemberType":"Function","Name":"SaveInstance","Parameters":[{"Name":"key","Type":{"Category":"Primitive","Name":"string"}},{"Name":"value","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"SaveNumber","Parameters":[{"Name":"key","Type":{"Category":"Primitive","Name":"string"}},{"Name":"value","Type":{"Category":"Primitive","Name":"double"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"SaveString","Parameters":[{"Name":"key","Type":{"Category":"Primitive","Name":"string"}},{"Name":"value","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"SetAccountAge","Parameters":[{"Name":"accountAge","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"SetMembershipType","Parameters":[{"Name":"membershipType","Type":{"Category":"Enum","Name":"MembershipType"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"SetSuperSafeChat","Parameters":[{"Name":"value","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"SetUnder13","Parameters":[{"Name":"value","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxSecurity","Tags":["Deprecated"]},{"MemberType":"Function","Name":"UpdatePlayerBlocked","Parameters":[{"Name":"userId","Type":{"Category":"Primitive","Name":"int64"}},{"Name":"blocked","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"loadBoolean","Parameters":[{"Name":"key","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"loadInstance","Parameters":[{"Name":"key","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"loadNumber","Parameters":[{"Name":"key","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"double"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"loadString","Parameters":[{"Name":"key","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"string"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"saveBoolean","Parameters":[{"Name":"key","Type":{"Category":"Primitive","Name":"string"}},{"Name":"value","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"saveInstance","Parameters":[{"Name":"key","Type":{"Category":"Primitive","Name":"string"}},{"Name":"value","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"saveNumber","Parameters":[{"Name":"key","Type":{"Category":"Primitive","Name":"string"}},{"Name":"value","Type":{"Category":"Primitive","Name":"double"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"saveString","Parameters":[{"Name":"key","Type":{"Category":"Primitive","Name":"string"}},{"Name":"value","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"GetFriendsOnline","Parameters":[{"Default":"200","Name":"maxFriends","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Group","Name":"Array"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"GetRankInGroup","Parameters":[{"Name":"groupId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Primitive","Name":"int"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"GetRoleInGroup","Parameters":[{"Name":"groupId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Primitive","Name":"string"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"IsBestFriendsWith","Parameters":[{"Name":"userId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None","Tags":["Yields","Deprecated"]},{"MemberType":"Function","Name":"IsFriendsWith","Parameters":[{"Name":"userId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"IsInGroup","Parameters":[{"Name":"groupId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"LoadCharacter","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"LoadCharacterBlocking","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"LocalUserSecurity","Tags":["Yields"]},{"MemberType":"Function","Name":"WaitForDataReady","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None","Tags":["Yields","Deprecated"]},{"MemberType":"Function","Name":"isFriendsWith","Parameters":[{"Name":"userId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None","Tags":["Yields","Deprecated"]},{"MemberType":"Function","Name":"waitForDataReady","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None","Tags":["Yields","Deprecated"]},{"MemberType":"Event","Name":"CharacterAdded","Parameters":[{"Name":"character","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"},{"MemberType":"Event","Name":"CharacterAppearanceLoaded","Parameters":[{"Name":"character","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"},{"MemberType":"Event","Name":"CharacterRemoving","Parameters":[{"Name":"character","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"},{"MemberType":"Event","Name":"Chatted","Parameters":[{"Name":"message","Type":{"Category":"Primitive","Name":"string"}},{"Name":"recipient","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"},{"MemberType":"Event","Name":"FriendStatusChanged","Parameters":[{"Name":"player","Type":{"Category":"Class","Name":"Instance"}},{"Name":"friendStatus","Type":{"Category":"Enum","Name":"FriendStatus"}}],"Security":"RobloxScriptSecurity"},{"MemberType":"Event","Name":"Idled","Parameters":[{"Name":"time","Type":{"Category":"Primitive","Name":"double"}}],"Security":"None"},{"MemberType":"Event","Name":"OnTeleport","Parameters":[{"Name":"teleportState","Type":{"Category":"Enum","Name":"TeleportState"}},{"Name":"placeId","Type":{"Category":"Primitive","Name":"int64"}},{"Name":"spawnName","Type":{"Category":"Primitive","Name":"string"}}],"Security":"None"},{"MemberType":"Event","Name":"SimulationRadiusChanged","Parameters":[{"Name":"radius","Type":{"Category":"Primitive","Name":"float"}}],"Security":"LocalUserSecurity"}],"MemoryCategory":"Instances","Name":"Player","Superclass":"Instance"},{"Members":[{"MemberType":"Function","Name":"ClearComputerCameraMovementModes","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"ClearComputerMovementModes","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"ClearTouchCameraMovementModes","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"ClearTouchMovementModes","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"GetRegisteredComputerCameraMovementModes","Parameters":[],"ReturnType":{"Category":"Group","Name":"Array"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"GetRegisteredComputerMovementModes","Parameters":[],"ReturnType":{"Category":"Group","Name":"Array"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"GetRegisteredTouchCameraMovementModes","Parameters":[],"ReturnType":{"Category":"Group","Name":"Array"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"GetRegisteredTouchMovementModes","Parameters":[],"ReturnType":{"Category":"Group","Name":"Array"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"RegisterComputerCameraMovementMode","Parameters":[{"Name":"cameraMovementMode","Type":{"Category":"Enum","Name":"ComputerCameraMovementMode"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"RegisterComputerMovementMode","Parameters":[{"Name":"movementMode","Type":{"Category":"Enum","Name":"ComputerMovementMode"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"RegisterTouchCameraMovementMode","Parameters":[{"Name":"cameraMovementMode","Type":{"Category":"Enum","Name":"TouchCameraMovementMode"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"RegisterTouchMovementMode","Parameters":[{"Name":"movementMode","Type":{"Category":"Enum","Name":"TouchMovementMode"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Event","Name":"ComputerCameraMovementModeRegistered","Parameters":[],"Security":"RobloxScriptSecurity"},{"MemberType":"Event","Name":"ComputerMovementModeRegistered","Parameters":[],"Security":"RobloxScriptSecurity"},{"MemberType":"Event","Name":"TouchCameraMovementModeRegistered","Parameters":[],"Security":"RobloxScriptSecurity"},{"MemberType":"Event","Name":"TouchMovementModeRegistered","Parameters":[],"Security":"RobloxScriptSecurity"}],"MemoryCategory":"Instances","Name":"PlayerScripts","Superclass":"Instance","Tags":["NotCreatable","NotReplicated"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"BubbleChat","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Behavior","MemberType":"Property","Name":"CharacterAutoLoads","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"Tags":["NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"ClassicChat","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"LocalPlayer","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Class","Name":"Instance"}},{"Category":"Data","MemberType":"Property","Name":"MaxPlayers","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Data","MemberType":"Property","Name":"MaxPlayersInternal","Security":{"Read":"LocalUserSecurity","Write":"LocalUserSecurity"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Data","MemberType":"Property","Name":"NumPlayers","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated","Deprecated"],"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Data","MemberType":"Property","Name":"PreferredPlayers","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Data","MemberType":"Property","Name":"PreferredPlayersInternal","Security":{"Read":"LocalUserSecurity","Write":"LocalUserSecurity"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Data","MemberType":"Property","Name":"localPlayer","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["Hidden","ReadOnly","NotReplicated","Deprecated"],"ValueType":{"Category":"Class","Name":"Instance"}},{"Category":"Data","MemberType":"Property","Name":"numPlayers","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["Hidden","ReadOnly","NotReplicated","Deprecated"],"ValueType":{"Category":"Primitive","Name":"int"}},{"MemberType":"Function","Name":"Chat","Parameters":[{"Name":"message","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"CreateLocalPlayer","Parameters":[],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"LocalUserSecurity"},{"MemberType":"Function","Name":"GetPlayerByUserId","Parameters":[{"Name":"userId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None"},{"MemberType":"Function","Name":"GetPlayerFromCharacter","Parameters":[{"Name":"character","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None"},{"MemberType":"Function","Name":"GetPlayers","Parameters":[],"ReturnType":{"Category":"DataType","Name":"Objects"},"Security":"None"},{"MemberType":"Function","Name":"ReportAbuse","Parameters":[{"Name":"player","Type":{"Category":"Class","Name":"Instance"}},{"Name":"reason","Type":{"Category":"Primitive","Name":"string"}},{"Name":"optionalMessage","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"LocalUserSecurity"},{"MemberType":"Function","Name":"SetChatStyle","Parameters":[{"Default":"Classic","Name":"style","Type":{"Category":"Enum","Name":"ChatStyle"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"TeamChat","Parameters":[{"Name":"message","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"WhisperChat","Parameters":[{"Name":"message","Type":{"Category":"Primitive","Name":"string"}},{"Name":"player","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"LocalUserSecurity"},{"MemberType":"Function","Name":"getPlayerFromCharacter","Parameters":[{"Name":"character","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"getPlayers","Parameters":[],"ReturnType":{"Category":"DataType","Name":"Objects"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"playerFromCharacter","Parameters":[{"Name":"character","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"players","Parameters":[],"ReturnType":{"Category":"DataType","Name":"Objects"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"GetCharacterAppearanceAsync","Parameters":[{"Name":"userId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"GetCharacterAppearanceInfoAsync","Parameters":[{"Name":"userId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Group","Name":"Dictionary"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"GetFriendsAsync","Parameters":[{"Name":"userId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"GetNameFromUserIdAsync","Parameters":[{"Name":"userId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Primitive","Name":"string"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"GetUserIdFromNameAsync","Parameters":[{"Name":"userName","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"int64"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"GetUserThumbnailAsync","Parameters":[{"Name":"userId","Type":{"Category":"Primitive","Name":"int64"}},{"Name":"thumbnailType","Type":{"Category":"Enum","Name":"ThumbnailType"}},{"Name":"thumbnailSize","Type":{"Category":"Enum","Name":"ThumbnailSize"}}],"ReturnType":{"Category":"Group","Name":"Tuple"},"Security":"None","Tags":["Yields"]},{"MemberType":"Event","Name":"FriendRequestEvent","Parameters":[{"Name":"player","Type":{"Category":"Class","Name":"Instance"}},{"Name":"player","Type":{"Category":"Class","Name":"Instance"}},{"Name":"friendRequestEvent","Type":{"Category":"Enum","Name":"FriendRequestEvent"}}],"Security":"RobloxScriptSecurity"},{"MemberType":"Event","Name":"GameAnnounce","Parameters":[{"Name":"message","Type":{"Category":"Primitive","Name":"string"}}],"Security":"RobloxScriptSecurity"},{"MemberType":"Event","Name":"PlayerAdded","Parameters":[{"Name":"player","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"},{"MemberType":"Event","Name":"PlayerChatted","Parameters":[{"Name":"chatType","Type":{"Category":"Enum","Name":"PlayerChatType"}},{"Name":"player","Type":{"Category":"Class","Name":"Instance"}},{"Name":"message","Type":{"Category":"Primitive","Name":"string"}},{"Name":"targetPlayer","Type":{"Category":"Class","Name":"Instance"}}],"Security":"LocalUserSecurity"},{"MemberType":"Event","Name":"PlayerConnecting","Parameters":[{"Name":"player","Type":{"Category":"Class","Name":"Instance"}}],"Security":"LocalUserSecurity"},{"MemberType":"Event","Name":"PlayerDisconnecting","Parameters":[{"Name":"player","Type":{"Category":"Class","Name":"Instance"}}],"Security":"LocalUserSecurity"},{"MemberType":"Event","Name":"PlayerRejoining","Parameters":[{"Name":"player","Type":{"Category":"Class","Name":"Instance"}}],"Security":"LocalUserSecurity"},{"MemberType":"Event","Name":"PlayerRemoving","Parameters":[{"Name":"player","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"}],"MemoryCategory":"Instances","Name":"Players","Superclass":"Instance","Tags":["NotCreatable","Service"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"CollisionEnabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"GridSize","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"MemberType":"Function","Name":"Activate","Parameters":[{"Name":"exclusiveMouse","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"CreatePluginAction","Parameters":[{"Name":"actionId","Type":{"Category":"Primitive","Name":"string"}},{"Name":"text","Type":{"Category":"Primitive","Name":"string"}},{"Name":"statusTip","Type":{"Category":"Primitive","Name":"string"}},{"Default":"","Name":"iconName","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"CreateToolbar","Parameters":[{"Name":"name","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"Deactivate","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"GetJoinMode","Parameters":[],"ReturnType":{"Category":"Enum","Name":"JointCreationMode"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"GetMouse","Parameters":[],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"GetSelectedRibbonTool","Parameters":[],"ReturnType":{"Category":"Enum","Name":"RibbonTool"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"GetSetting","Parameters":[{"Name":"key","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Group","Name":"Variant"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"GetStudioUserId","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"int64"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"ImportFbxAnimation","Parameters":[{"Name":"rigModel","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"IsActivated","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"IsActivatedWithExclusiveMouse","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"Negate","Parameters":[{"Name":"objects","Type":{"Category":"DataType","Name":"Objects"}}],"ReturnType":{"Category":"DataType","Name":"Objects"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"OpenScript","Parameters":[{"Name":"script","Type":{"Category":"Class","Name":"Instance"}},{"Default":"1","Name":"lineNumber","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"OpenWikiPage","Parameters":[{"Name":"url","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"PauseSound","Parameters":[{"Name":"soundChannel","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"PlaySound","Parameters":[{"Name":"soundChannel","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"ResumeSound","Parameters":[{"Name":"soundChannel","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"SaveSelectedToRoblox","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"SelectRibbonTool","Parameters":[{"Name":"tool","Type":{"Category":"Enum","Name":"RibbonTool"}},{"Name":"position","Type":{"Category":"DataType","Name":"UDim2"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"Separate","Parameters":[{"Name":"objects","Type":{"Category":"DataType","Name":"Objects"}}],"ReturnType":{"Category":"DataType","Name":"Objects"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"SetSetting","Parameters":[{"Name":"key","Type":{"Category":"Primitive","Name":"string"}},{"Name":"value","Type":{"Category":"Group","Name":"Variant"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"StopAllSounds","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"Union","Parameters":[{"Name":"objects","Type":{"Category":"DataType","Name":"Objects"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"CreateDockWidgetPluginGui","Parameters":[{"Name":"pluginGuiId","Type":{"Category":"Primitive","Name":"string"}},{"Name":"dockWidgetPluginGuiInfo","Type":{"Category":"DataType","Name":"DockWidgetPluginGuiInfo"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"PluginSecurity","Tags":["Yields"]},{"MemberType":"Function","Name":"ImportFbxRig","Parameters":[],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"PluginSecurity","Tags":["Yields"]},{"MemberType":"Function","Name":"PromptForExistingAssetId","Parameters":[{"Name":"assetType","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"int64"},"Security":"PluginSecurity","Tags":["Yields"]},{"MemberType":"Function","Name":"PromptSaveSelection","Parameters":[{"Default":"","Name":"suggestedFileName","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"PluginSecurity","Tags":["Yields"]},{"MemberType":"Event","Name":"Deactivation","Parameters":[],"Security":"PluginSecurity"}],"MemoryCategory":"Instances","Name":"Plugin","Superclass":"Instance","Tags":["NotCreatable"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"ActionId","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"Data","MemberType":"Property","Name":"StatusTip","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"Data","MemberType":"Property","Name":"Text","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"string"}},{"MemberType":"Event","Name":"Triggered","Parameters":[],"Security":"PluginSecurity"}],"MemoryCategory":"Instances","Name":"PluginAction","Superclass":"Instance","Tags":["NotReplicated"]},{"Members":[],"MemoryCategory":"Instances","Name":"PluginGuiService","Superclass":"Instance","Tags":["NotCreatable","Service","NotReplicated"]},{"Members":[{"MemberType":"Function","Name":"CreatePlugin","Parameters":[],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"PluginSecurity","Tags":["CustomLuaState"]},{"MemberType":"Function","Name":"ExportPlace","Parameters":[{"Default":"","Name":"filePath","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"ExportSelection","Parameters":[{"Default":"","Name":"filePath","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"PluginSecurity"}],"MemoryCategory":"Instances","Name":"PluginManager","Superclass":"Instance","Tags":["NotCreatable"]},{"Members":[{"MemberType":"Function","Name":"GetAwardablePoints","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"int"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"AwardPoints","Parameters":[{"Name":"userId","Type":{"Category":"Primitive","Name":"int64"}},{"Name":"amount","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Group","Name":"Tuple"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"GetGamePointBalance","Parameters":[{"Name":"userId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Primitive","Name":"int"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"GetPointBalance","Parameters":[{"Name":"userId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Primitive","Name":"int"},"Security":"None","Tags":["Yields","Deprecated"]},{"MemberType":"Event","Name":"PointsAwarded","Parameters":[{"Name":"userId","Type":{"Category":"Primitive","Name":"int64"}},{"Name":"pointsAwarded","Type":{"Category":"Primitive","Name":"int"}},{"Name":"userBalanceInGame","Type":{"Category":"Primitive","Name":"int"}},{"Name":"userTotalBalance","Type":{"Category":"Primitive","Name":"int"}}],"Security":"None"}],"MemoryCategory":"Instances","Name":"PointsService","Superclass":"Instance","Tags":["NotCreatable","Service"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"CFrame","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"CFrame"}},{"Category":"Data","MemberType":"Property","Name":"EasingDirection","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"PoseEasingDirection"}},{"Category":"Data","MemberType":"Property","Name":"EasingStyle","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"PoseEasingStyle"}},{"Category":"Data","MemberType":"Property","Name":"MaskWeight","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated","Deprecated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"Weight","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"MemberType":"Function","Name":"AddSubPose","Parameters":[{"Name":"pose","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"GetSubPoses","Parameters":[],"ReturnType":{"Category":"DataType","Name":"Objects"},"Security":"None"},{"MemberType":"Function","Name":"RemoveSubPose","Parameters":[{"Name":"pose","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"}],"MemoryCategory":"Animation","Name":"Pose","Superclass":"Instance"},{"Members":[{"Category":"State","MemberType":"Property","Name":"Enabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}}],"MemoryCategory":"Instances","Name":"PostEffect","Superclass":"Instance","Tags":["NotCreatable"]},{"Members":[{"Category":"State","MemberType":"Property","Name":"Intensity","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"State","MemberType":"Property","Name":"Size","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"State","MemberType":"Property","Name":"Threshold","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}}],"MemoryCategory":"Instances","Name":"BloomEffect","Superclass":"PostEffect"},{"Members":[{"Category":"State","MemberType":"Property","Name":"Size","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}}],"MemoryCategory":"Instances","Name":"BlurEffect","Superclass":"PostEffect"},{"Members":[{"Category":"State","MemberType":"Property","Name":"Brightness","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"State","MemberType":"Property","Name":"Contrast","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"State","MemberType":"Property","Name":"Saturation","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"State","MemberType":"Property","Name":"TintColor","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}}],"MemoryCategory":"Instances","Name":"ColorCorrectionEffect","Superclass":"PostEffect"},{"Members":[{"Category":"State","MemberType":"Property","Name":"Intensity","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"State","MemberType":"Property","Name":"Spread","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}}],"MemoryCategory":"Instances","Name":"SunRaysEffect","Superclass":"PostEffect"},{"Members":[],"MemoryCategory":"Instances","Name":"ReflectionMetadata","Superclass":"Instance"},{"Members":[],"MemoryCategory":"Instances","Name":"ReflectionMetadataCallbacks","Superclass":"Instance"},{"Members":[],"MemoryCategory":"Instances","Name":"ReflectionMetadataClasses","Superclass":"Instance"},{"Members":[],"MemoryCategory":"Instances","Name":"ReflectionMetadataEnums","Superclass":"Instance"},{"Members":[],"MemoryCategory":"Instances","Name":"ReflectionMetadataEvents","Superclass":"Instance"},{"Members":[],"MemoryCategory":"Instances","Name":"ReflectionMetadataFunctions","Superclass":"Instance"},{"Members":[{"Category":"Reflection","MemberType":"Property","Name":"Browsable","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Reflection","MemberType":"Property","Name":"ClassCategory","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"Reflection","MemberType":"Property","Name":"Constraint","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"Reflection","MemberType":"Property","Name":"Deprecated","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Reflection","MemberType":"Property","Name":"EditingDisabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Reflection","MemberType":"Property","Name":"IsBackend","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Reflection","MemberType":"Property","Name":"ScriptContext","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"Reflection","MemberType":"Property","Name":"UIMaximum","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"double"}},{"Category":"Reflection","MemberType":"Property","Name":"UIMinimum","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"double"}},{"Category":"Reflection","MemberType":"Property","Name":"UINumTicks","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"double"}},{"Category":"Reflection","MemberType":"Property","Name":"summary","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"string"}}],"MemoryCategory":"Instances","Name":"ReflectionMetadataItem","Superclass":"Instance","Tags":["NotCreatable"]},{"Members":[{"Category":"Reflection","MemberType":"Property","Name":"ExplorerImageIndex","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Reflection","MemberType":"Property","Name":"ExplorerOrder","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Reflection","MemberType":"Property","Name":"Insertable","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Reflection","MemberType":"Property","Name":"PreferredParent","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"Reflection","MemberType":"Property","Name":"PreferredParents","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"string"}}],"MemoryCategory":"Instances","Name":"ReflectionMetadataClass","Superclass":"ReflectionMetadataItem"},{"Members":[],"MemoryCategory":"Instances","Name":"ReflectionMetadataEnum","Superclass":"ReflectionMetadataItem"},{"Members":[],"MemoryCategory":"Instances","Name":"ReflectionMetadataEnumItem","Superclass":"ReflectionMetadataItem"},{"Members":[],"MemoryCategory":"Instances","Name":"ReflectionMetadataMember","Superclass":"ReflectionMetadataItem"},{"Members":[],"MemoryCategory":"Instances","Name":"ReflectionMetadataProperties","Superclass":"Instance"},{"Members":[],"MemoryCategory":"Instances","Name":"ReflectionMetadataYieldFunctions","Superclass":"Instance"},{"Members":[{"MemberType":"Function","Name":"FireAllClients","Parameters":[{"Name":"arguments","Type":{"Category":"Group","Name":"Tuple"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"FireClient","Parameters":[{"Name":"player","Type":{"Category":"Class","Name":"Instance"}},{"Name":"arguments","Type":{"Category":"Group","Name":"Tuple"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"FireServer","Parameters":[{"Name":"arguments","Type":{"Category":"Group","Name":"Tuple"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Event","Name":"OnClientEvent","Parameters":[{"Name":"arguments","Type":{"Category":"Group","Name":"Tuple"}}],"Security":"None"},{"MemberType":"Event","Name":"OnServerEvent","Parameters":[{"Name":"player","Type":{"Category":"Class","Name":"Instance"}},{"Name":"arguments","Type":{"Category":"Group","Name":"Tuple"}}],"Security":"None"}],"MemoryCategory":"Instances","Name":"RemoteEvent","Superclass":"Instance"},{"Members":[{"MemberType":"Function","Name":"InvokeClient","Parameters":[{"Name":"player","Type":{"Category":"Class","Name":"Instance"}},{"Name":"arguments","Type":{"Category":"Group","Name":"Tuple"}}],"ReturnType":{"Category":"Group","Name":"Tuple"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"InvokeServer","Parameters":[{"Name":"arguments","Type":{"Category":"Group","Name":"Tuple"}}],"ReturnType":{"Category":"Group","Name":"Tuple"},"Security":"None","Tags":["Yields"]},{"MemberType":"Callback","Name":"OnClientInvoke","Parameters":[{"Name":"arguments","Type":{"Category":"Group","Name":"Tuple"}}],"ReturnType":{"Category":"Group","Name":"Tuple"},"Security":"None"},{"MemberType":"Callback","Name":"OnServerInvoke","Parameters":[{"Name":"player","Type":{"Category":"Class","Name":"Instance"}},{"Name":"arguments","Type":{"Category":"Group","Name":"Tuple"}}],"ReturnType":{"Category":"Group","Name":"Tuple"},"Security":"None"}],"MemoryCategory":"Instances","Name":"RemoteFunction","Superclass":"Instance"},{"Members":[{"Category":"Debug","MemberType":"Property","Name":"AutoFRMLevel","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Performance","MemberType":"Property","Name":"EagerBulkExecution","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Performance","MemberType":"Property","Name":"EditQualityLevel","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"QualityLevel"}},{"Category":"Debug","MemberType":"Property","Name":"EnableFRM","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["Hidden","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"General","MemberType":"Property","Name":"ExportMergeByMaterial","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"General","MemberType":"Property","Name":"FrameRateManager","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"FramerateManagerMode"}},{"Category":"General","MemberType":"Property","Name":"GraphicsMode","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"GraphicsMode"}},{"Category":"Cache","MemberType":"Property","Name":"MeshCacheSize","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Performance","MemberType":"Property","Name":"QualityLevel","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"QualityLevel"}},{"Category":"Debug","MemberType":"Property","Name":"ReloadAssets","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Debug","MemberType":"Property","Name":"RenderCSGTrianglesDebug","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Debug","MemberType":"Property","Name":"ShowBoundingBoxes","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"MemberType":"Function","Name":"GetMaxQualityLevel","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"int"},"Security":"None"}],"MemoryCategory":"Instances","Name":"RenderSettings","Superclass":"Instance","Tags":["Service","NotBrowsable"]},{"Members":[{"Category":"RenderingTest","MemberType":"Property","Name":"CFrame","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"CFrame"}},{"Category":"RenderingTest","MemberType":"Property","Name":"ComparisonDiffThreshold","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"RenderingTest","MemberType":"Property","Name":"ComparisonMethod","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"RenderingTestComparisonMethod"}},{"Category":"RenderingTest","MemberType":"Property","Name":"ComparisonPsnrThreshold","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"RenderingTest","MemberType":"Property","Name":"FieldOfView","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"RenderingTest","MemberType":"Property","Name":"Orientation","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"RenderingTest","MemberType":"Property","Name":"Position","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"DataType","Name":"Vector3"}},{"Category":"RenderingTest","MemberType":"Property","Name":"QualityLevel","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}}],"MemoryCategory":"Instances","Name":"RenderingTest","Superclass":"Instance"},{"Members":[{"MemberType":"Function","Name":"IsDefaultLoadingGuiRemoved","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"IsFinishedReplicating","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"RemoveDefaultLoadingScreen","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"SetDefaultLoadingGuiRemoved","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Event","Name":"DefaultLoadingGuiRemoved","Parameters":[],"Security":"RobloxScriptSecurity"},{"MemberType":"Event","Name":"FinishedReplicating","Parameters":[],"Security":"RobloxScriptSecurity"},{"MemberType":"Event","Name":"RemoveDefaultLoadingGuiSignal","Parameters":[],"Security":"RobloxScriptSecurity"}],"MemoryCategory":"Instances","Name":"ReplicatedFirst","Superclass":"Instance","Tags":["NotCreatable","Service"]},{"Members":[],"MemoryCategory":"Instances","Name":"ReplicatedStorage","Superclass":"Instance","Tags":["NotCreatable","Service"]},{"Members":[],"MemoryCategory":"Instances","Name":"RobloxReplicatedStorage","Superclass":"Instance","Tags":["NotCreatable","Service","NotBrowsable"]},{"Members":[{"MemberType":"Function","Name":"BindToRenderStep","Parameters":[{"Name":"name","Type":{"Category":"Primitive","Name":"string"}},{"Name":"priority","Type":{"Category":"Primitive","Name":"int"}},{"Name":"function","Type":{"Category":"DataType","Name":"Function"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"GetRobloxVersion","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"string"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"IsClient","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Function","Name":"IsEdit","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"IsRunMode","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Function","Name":"IsRunning","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Function","Name":"IsServer","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Function","Name":"IsStudio","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Function","Name":"Pause","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"Reset","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"PluginSecurity","Tags":["Deprecated"]},{"MemberType":"Function","Name":"Run","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"Set3dRenderingEnabled","Parameters":[{"Name":"enable","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"SetRobloxGuiFocused","Parameters":[{"Name":"focus","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"Stop","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"UnbindFromRenderStep","Parameters":[{"Name":"name","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"setThrottleFramerateEnabled","Parameters":[{"Name":"enable","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Event","Name":"Heartbeat","Parameters":[{"Name":"step","Type":{"Category":"Primitive","Name":"double"}}],"Security":"None"},{"MemberType":"Event","Name":"RenderStepped","Parameters":[{"Name":"step","Type":{"Category":"Primitive","Name":"double"}}],"Security":"None"},{"MemberType":"Event","Name":"Stepped","Parameters":[{"Name":"time","Type":{"Category":"Primitive","Name":"double"}},{"Name":"step","Type":{"Category":"Primitive","Name":"double"}}],"Security":"None"}],"MemoryCategory":"Instances","Name":"RunService","Superclass":"Instance","Tags":["NotCreatable","Service","NotReplicated"]},{"Members":[],"MemoryCategory":"Instances","Name":"RuntimeScriptService","Superclass":"Instance","Tags":["NotCreatable","Service","NotReplicated"]},{"Members":[{"Category":"State","MemberType":"Property","Name":"ScriptsDisabled","Security":{"Read":"LocalUserSecurity","Write":"LocalUserSecurity"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"MemberType":"Function","Name":"AddCoreScriptLocal","Parameters":[{"Name":"name","Type":{"Category":"Primitive","Name":"string"}},{"Name":"parent","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"SetTimeout","Parameters":[{"Name":"seconds","Type":{"Category":"Primitive","Name":"double"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"PluginSecurity"},{"MemberType":"Event","Name":"Error","Parameters":[{"Name":"message","Type":{"Category":"Primitive","Name":"string"}},{"Name":"stackTrace","Type":{"Category":"Primitive","Name":"string"}},{"Name":"script","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"}],"MemoryCategory":"Instances","Name":"ScriptContext","Superclass":"Instance","Tags":["NotCreatable","Service","NotReplicated"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"CurrentLine","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Data","MemberType":"Property","Name":"IsDebugging","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"IsPaused","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"Script","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Class","Name":"Instance"}},{"MemberType":"Function","Name":"AddWatch","Parameters":[{"Name":"expression","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None"},{"MemberType":"Function","Name":"GetBreakpoints","Parameters":[],"ReturnType":{"Category":"DataType","Name":"Objects"},"Security":"None"},{"MemberType":"Function","Name":"GetGlobals","Parameters":[],"ReturnType":{"Category":"Group","Name":"Map"},"Security":"None"},{"MemberType":"Function","Name":"GetLocals","Parameters":[{"Default":"0","Name":"stackFrame","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Group","Name":"Map"},"Security":"None"},{"MemberType":"Function","Name":"GetStack","Parameters":[],"ReturnType":{"Category":"Group","Name":"Array"},"Security":"None"},{"MemberType":"Function","Name":"GetUpvalues","Parameters":[{"Default":"0","Name":"stackFrame","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Group","Name":"Map"},"Security":"None"},{"MemberType":"Function","Name":"GetWatchValue","Parameters":[{"Name":"watch","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Group","Name":"Variant"},"Security":"None"},{"MemberType":"Function","Name":"GetWatches","Parameters":[],"ReturnType":{"Category":"DataType","Name":"Objects"},"Security":"None"},{"MemberType":"Function","Name":"Resume","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"SetBreakpoint","Parameters":[{"Name":"line","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None"},{"MemberType":"Function","Name":"SetGlobal","Parameters":[{"Name":"name","Type":{"Category":"Primitive","Name":"string"}},{"Name":"value","Type":{"Category":"Group","Name":"Variant"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"SetLocal","Parameters":[{"Name":"name","Type":{"Category":"Primitive","Name":"string"}},{"Name":"value","Type":{"Category":"Group","Name":"Variant"}},{"Default":"0","Name":"stackFrame","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"SetUpvalue","Parameters":[{"Name":"name","Type":{"Category":"Primitive","Name":"string"}},{"Name":"value","Type":{"Category":"Group","Name":"Variant"}},{"Default":"0","Name":"stackFrame","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"StepIn","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"StepOut","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"StepOver","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Event","Name":"BreakpointAdded","Parameters":[{"Name":"breakpoint","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"},{"MemberType":"Event","Name":"BreakpointRemoved","Parameters":[{"Name":"breakpoint","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"},{"MemberType":"Event","Name":"EncounteredBreak","Parameters":[{"Name":"line","Type":{"Category":"Primitive","Name":"int"}}],"Security":"None"},{"MemberType":"Event","Name":"Resuming","Parameters":[],"Security":"None"},{"MemberType":"Event","Name":"WatchAdded","Parameters":[{"Name":"watch","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"},{"MemberType":"Event","Name":"WatchRemoved","Parameters":[{"Name":"watch","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"}],"MemoryCategory":"Instances","Name":"ScriptDebugger","Superclass":"Instance","Tags":["NotCreatable"]},{"Members":[],"MemoryCategory":"Instances","Name":"ScriptService","Superclass":"Instance","Tags":["NotCreatable","Service"]},{"Members":[{"MemberType":"Function","Name":"Get","Parameters":[],"ReturnType":{"Category":"DataType","Name":"Objects"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"Set","Parameters":[{"Name":"selection","Type":{"Category":"DataType","Name":"Objects"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"PluginSecurity"},{"MemberType":"Event","Name":"SelectionChanged","Parameters":[],"Security":"None"}],"MemoryCategory":"Instances","Name":"Selection","Superclass":"Instance","Tags":["NotCreatable","Service"]},{"Members":[{"Category":"Behavior","MemberType":"Property","Name":"LoadStringEnabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"Tags":["NotReplicated","NotScriptable"],"ValueType":{"Category":"Primitive","Name":"bool"}}],"MemoryCategory":"Instances","Name":"ServerScriptService","Superclass":"Instance","Tags":["NotCreatable","Service","NotReplicated"]},{"Members":[],"MemoryCategory":"Instances","Name":"ServerStorage","Superclass":"Instance","Tags":["NotCreatable","Service","NotReplicated"]},{"Members":[{"MemberType":"Function","Name":"FindService","Parameters":[{"Name":"className","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None"},{"MemberType":"Function","Name":"GetService","Parameters":[{"Name":"className","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None"},{"MemberType":"Function","Name":"getService","Parameters":[{"Name":"className","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"service","Parameters":[{"Name":"className","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Event","Name":"Close","Parameters":[],"Security":"None"},{"MemberType":"Event","Name":"CloseLate","Parameters":[],"Security":"LocalUserSecurity"},{"MemberType":"Event","Name":"ServiceAdded","Parameters":[{"Name":"service","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"},{"MemberType":"Event","Name":"ServiceRemoving","Parameters":[{"Name":"service","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"}],"MemoryCategory":"Instances","Name":"ServiceProvider","Superclass":"Instance","Tags":["NotCreatable","NotBrowsable"]},{"Members":[{"Category":"State","MemberType":"Property","Name":"CreatorId","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"int64"}},{"Category":"State","MemberType":"Property","Name":"CreatorType","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Enum","Name":"CreatorType"}},{"Category":"State","MemberType":"Property","Name":"GameId","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"int64"}},{"Category":"State","MemberType":"Property","Name":"GearGenreSetting","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Enum","Name":"GearGenreSetting"}},{"Category":"State","MemberType":"Property","Name":"Genre","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Enum","Name":"Genre"}},{"Category":"Data","MemberType":"Property","Name":"IsSFFlagsLoaded","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"JobInfo","MemberType":"Property","Name":"JobId","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"State","MemberType":"Property","Name":"PlaceId","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"int64"}},{"Category":"State","MemberType":"Property","Name":"PlaceVersion","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Data","MemberType":"Property","Name":"VIPServerId","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"Data","MemberType":"Property","Name":"VIPServerOwnerId","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"int64"}},{"Category":"Data","MemberType":"Property","Name":"Workspace","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Class","Name":"Workspace"}},{"Category":"Data","MemberType":"Property","Name":"lighting","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated","Deprecated"],"ValueType":{"Category":"Class","Name":"Instance"}},{"Category":"Data","MemberType":"Property","Name":"workspace","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated","Deprecated"],"ValueType":{"Category":"Class","Name":"Workspace"}},{"MemberType":"Function","Name":"BindToClose","Parameters":[{"Name":"function","Type":{"Category":"DataType","Name":"Function"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"GetJobIntervalPeakFraction","Parameters":[{"Name":"jobname","Type":{"Category":"Primitive","Name":"string"}},{"Name":"greaterThan","Type":{"Category":"Primitive","Name":"double"}}],"ReturnType":{"Category":"Primitive","Name":"double"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"GetJobTimePeakFraction","Parameters":[{"Name":"jobname","Type":{"Category":"Primitive","Name":"string"}},{"Name":"greaterThan","Type":{"Category":"Primitive","Name":"double"}}],"ReturnType":{"Category":"Primitive","Name":"double"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"GetJobsExtendedStats","Parameters":[],"ReturnType":{"Category":"Group","Name":"Array"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"GetJobsInfo","Parameters":[],"ReturnType":{"Category":"Group","Name":"Array"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"GetMessage","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"string"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"GetObjects","Parameters":[{"Name":"url","Type":{"Category":"DataType","Name":"Content"}}],"ReturnType":{"Category":"DataType","Name":"Objects"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"GetRemoteBuildMode","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"IsGearTypeAllowed","Parameters":[{"Name":"gearType","Type":{"Category":"Enum","Name":"GearType"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Function","Name":"IsLoaded","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Function","Name":"Load","Parameters":[{"Name":"url","Type":{"Category":"DataType","Name":"Content"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"LocalUserSecurity"},{"MemberType":"Function","Name":"OpenScreenshotsFolder","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"OpenVideosFolder","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"ReportInGoogleAnalytics","Parameters":[{"Name":"category","Type":{"Category":"Primitive","Name":"string"}},{"Default":"custom","Name":"action","Type":{"Category":"Primitive","Name":"string"}},{"Default":"none","Name":"label","Type":{"Category":"Primitive","Name":"string"}},{"Default":"0","Name":"value","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"SetPlaceId","Parameters":[{"Name":"placeId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"SetUniverseId","Parameters":[{"Name":"universeId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"Shutdown","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"LocalUserSecurity"},{"MemberType":"Function","Name":"HttpGetAsync","Parameters":[{"Name":"url","Type":{"Category":"Primitive","Name":"string"}},{"Default":"Default","Name":"httpRequestType","Type":{"Category":"Enum","Name":"HttpRequestType"}},{"Default":"false","Name":"doNotAllowDiabolicalMode","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Primitive","Name":"string"},"Security":"RobloxScriptSecurity","Tags":["Yields"]},{"MemberType":"Function","Name":"HttpPostAsync","Parameters":[{"Name":"url","Type":{"Category":"Primitive","Name":"string"}},{"Name":"data","Type":{"Category":"Primitive","Name":"string"}},{"Default":"*/*","Name":"contentType","Type":{"Category":"Primitive","Name":"string"}},{"Default":"Default","Name":"httpRequestType","Type":{"Category":"Enum","Name":"HttpRequestType"}},{"Default":"false","Name":"doNotAllowDiabolicalMode","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Primitive","Name":"string"},"Security":"RobloxScriptSecurity","Tags":["Yields"]},{"MemberType":"Function","Name":"SavePlace","Parameters":[{"Default":"SaveAll","Name":"saveFilter","Type":{"Category":"Enum","Name":"SaveFilter"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None","Tags":["Yields","Deprecated"]},{"MemberType":"Event","Name":"AllowedGearTypeChanged","Parameters":[],"Security":"None","Tags":["Deprecated"]},{"MemberType":"Event","Name":"GraphicsQualityChangeRequest","Parameters":[{"Name":"betterQuality","Type":{"Category":"Primitive","Name":"bool"}}],"Security":"None"},{"MemberType":"Event","Name":"ItemChanged","Parameters":[{"Name":"object","Type":{"Category":"Class","Name":"Instance"}},{"Name":"descriptor","Type":{"Category":"Primitive","Name":"string"}}],"Security":"None","Tags":["Deprecated"]},{"MemberType":"Event","Name":"Loaded","Parameters":[],"Security":"None"},{"MemberType":"Event","Name":"ScreenshotReady","Parameters":[{"Name":"path","Type":{"Category":"Primitive","Name":"string"}}],"Security":"RobloxScriptSecurity"},{"MemberType":"Callback","Name":"OnClose","Parameters":[],"ReturnType":{"Category":"Group","Name":"Tuple"},"Security":"None","Tags":["Deprecated"]}],"MemoryCategory":"Instances","Name":"DataModel","Superclass":"ServiceProvider","Tags":["NotCreatable"]},{"Members":[],"MemoryCategory":"Instances","Name":"GenericSettings","Superclass":"ServiceProvider","Tags":["NotCreatable"]},{"Members":[],"MemoryCategory":"Instances","Name":"AnalysticsSettings","Superclass":"GenericSettings","Tags":["NotCreatable"]},{"Members":[{"MemberType":"Function","Name":"GetFFlag","Parameters":[{"Name":"name","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Function","Name":"GetFVariable","Parameters":[{"Name":"name","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"string"},"Security":"None"}],"MemoryCategory":"Instances","Name":"GlobalSettings","Superclass":"GenericSettings","Tags":["NotCreatable","NotBrowsable"]},{"Members":[{"MemberType":"Function","Name":"IsUserFeatureEnabled","Parameters":[{"Name":"name","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Function","Name":"Reset","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"}],"MemoryCategory":"Instances","Name":"UserSettings","Superclass":"GenericSettings","Tags":["NotCreatable"]},{"Members":[{"Category":"Appearance","MemberType":"Property","Name":"CelestialBodiesShown","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Appearance","MemberType":"Property","Name":"MoonAngularSize","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Appearance","MemberType":"Property","Name":"MoonTextureId","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Content"}},{"Category":"Appearance","MemberType":"Property","Name":"SkyboxBk","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Content"}},{"Category":"Appearance","MemberType":"Property","Name":"SkyboxDn","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Content"}},{"Category":"Appearance","MemberType":"Property","Name":"SkyboxFt","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Content"}},{"Category":"Appearance","MemberType":"Property","Name":"SkyboxLf","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Content"}},{"Category":"Appearance","MemberType":"Property","Name":"SkyboxRt","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Content"}},{"Category":"Appearance","MemberType":"Property","Name":"SkyboxUp","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Content"}},{"Category":"Appearance","MemberType":"Property","Name":"StarCount","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Appearance","MemberType":"Property","Name":"SunAngularSize","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Appearance","MemberType":"Property","Name":"SunTextureId","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Content"}}],"MemoryCategory":"Instances","Name":"Sky","Superclass":"Instance"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Color","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Data","MemberType":"Property","Name":"Enabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"Opacity","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"RiseVelocity","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"Size","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"Primitive","Name":"float"}}],"MemoryCategory":"Instances","Name":"Smoke","Superclass":"Instance"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"EmitterSize","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"IsLoaded","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"IsPaused","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"IsPlaying","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"Looped","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"MaxDistance","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"MinDistance","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["Deprecated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"Pitch","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["Deprecated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Behavior","MemberType":"Property","Name":"PlayOnRemove","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"PlaybackLoudness","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"double"}},{"Category":"Data","MemberType":"Property","Name":"PlaybackSpeed","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"Playing","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"RollOffMode","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"RollOffMode"}},{"Category":"Data","MemberType":"Property","Name":"SoundGroup","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Class","Name":"SoundGroup"}},{"Category":"Data","MemberType":"Property","Name":"SoundId","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Content"}},{"Category":"Data","MemberType":"Property","Name":"TimeLength","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"double"}},{"Category":"Data","MemberType":"Property","Name":"TimePosition","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"double"}},{"Category":"Data","MemberType":"Property","Name":"Volume","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"isPlaying","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated","Deprecated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"MemberType":"Function","Name":"Pause","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"Play","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"Resume","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"Stop","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"pause","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"play","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Function","Name":"stop","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]},{"MemberType":"Event","Name":"DidLoop","Parameters":[{"Name":"soundId","Type":{"Category":"Primitive","Name":"string"}},{"Name":"numOfTimesLooped","Type":{"Category":"Primitive","Name":"int"}}],"Security":"None"},{"MemberType":"Event","Name":"Ended","Parameters":[{"Name":"soundId","Type":{"Category":"Primitive","Name":"string"}}],"Security":"None"},{"MemberType":"Event","Name":"Loaded","Parameters":[{"Name":"soundId","Type":{"Category":"Primitive","Name":"string"}}],"Security":"None"},{"MemberType":"Event","Name":"Paused","Parameters":[{"Name":"soundId","Type":{"Category":"Primitive","Name":"string"}}],"Security":"None"},{"MemberType":"Event","Name":"Played","Parameters":[{"Name":"soundId","Type":{"Category":"Primitive","Name":"string"}}],"Security":"None"},{"MemberType":"Event","Name":"Resumed","Parameters":[{"Name":"soundId","Type":{"Category":"Primitive","Name":"string"}}],"Security":"None"},{"MemberType":"Event","Name":"Stopped","Parameters":[{"Name":"soundId","Type":{"Category":"Primitive","Name":"string"}}],"Security":"None"}],"MemoryCategory":"Internal","Name":"Sound","Superclass":"Instance"},{"Members":[{"Category":"State","MemberType":"Property","Name":"Enabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"State","MemberType":"Property","Name":"Priority","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}}],"MemoryCategory":"Instances","Name":"SoundEffect","Superclass":"Instance","Tags":["NotCreatable"]},{"Members":[{"Category":"State","MemberType":"Property","Name":"Depth","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"State","MemberType":"Property","Name":"Mix","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"State","MemberType":"Property","Name":"Rate","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}}],"MemoryCategory":"Instances","Name":"ChorusSoundEffect","Superclass":"SoundEffect"},{"Members":[{"Category":"State","MemberType":"Property","Name":"Attack","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"State","MemberType":"Property","Name":"GainMakeup","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"State","MemberType":"Property","Name":"Ratio","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"State","MemberType":"Property","Name":"Release","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"State","MemberType":"Property","Name":"SideChain","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Class","Name":"Instance"}},{"Category":"State","MemberType":"Property","Name":"Threshold","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}}],"MemoryCategory":"Instances","Name":"CompressorSoundEffect","Superclass":"SoundEffect"},{"Members":[{"Category":"State","MemberType":"Property","Name":"Level","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}}],"MemoryCategory":"Instances","Name":"DistortionSoundEffect","Superclass":"SoundEffect"},{"Members":[{"Category":"State","MemberType":"Property","Name":"Delay","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"State","MemberType":"Property","Name":"DryLevel","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"State","MemberType":"Property","Name":"Feedback","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"State","MemberType":"Property","Name":"WetLevel","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}}],"MemoryCategory":"Instances","Name":"EchoSoundEffect","Superclass":"SoundEffect"},{"Members":[{"Category":"State","MemberType":"Property","Name":"HighGain","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"State","MemberType":"Property","Name":"LowGain","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"State","MemberType":"Property","Name":"MidGain","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}}],"MemoryCategory":"Instances","Name":"EqualizerSoundEffect","Superclass":"SoundEffect"},{"Members":[{"Category":"State","MemberType":"Property","Name":"Depth","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"State","MemberType":"Property","Name":"Mix","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"State","MemberType":"Property","Name":"Rate","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}}],"MemoryCategory":"Instances","Name":"FlangeSoundEffect","Superclass":"SoundEffect"},{"Members":[{"Category":"State","MemberType":"Property","Name":"Octave","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}}],"MemoryCategory":"Instances","Name":"PitchShiftSoundEffect","Superclass":"SoundEffect"},{"Members":[{"Category":"State","MemberType":"Property","Name":"DecayTime","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"State","MemberType":"Property","Name":"Density","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"State","MemberType":"Property","Name":"Diffusion","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"State","MemberType":"Property","Name":"DryLevel","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"State","MemberType":"Property","Name":"WetLevel","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}}],"MemoryCategory":"Instances","Name":"ReverbSoundEffect","Superclass":"SoundEffect"},{"Members":[{"Category":"State","MemberType":"Property","Name":"Depth","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"State","MemberType":"Property","Name":"Duty","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"State","MemberType":"Property","Name":"Frequency","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}}],"MemoryCategory":"Instances","Name":"TremoloSoundEffect","Superclass":"SoundEffect"},{"Members":[{"Category":"State","MemberType":"Property","Name":"Volume","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}}],"MemoryCategory":"Internal","Name":"SoundGroup","Superclass":"Instance"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"AmbientReverb","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"ReverbType"}},{"Category":"Data","MemberType":"Property","Name":"DistanceFactor","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"DopplerScale","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"RespectFilteringEnabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"RolloffScale","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"MemberType":"Function","Name":"BeginRecording","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"GetListener","Parameters":[],"ReturnType":{"Category":"Group","Name":"Tuple"},"Security":"None"},{"MemberType":"Function","Name":"PlayLocalSound","Parameters":[{"Name":"sound","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"PlayStockSound","Parameters":[{"Name":"sound","Type":{"Category":"Enum","Name":"SoundType"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"SetListener","Parameters":[{"Name":"listenerType","Type":{"Category":"Enum","Name":"ListenerType"}},{"Name":"listener","Type":{"Category":"Group","Name":"Tuple"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"SetRecordingDevice","Parameters":[{"Name":"deviceIndex","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"EndRecording","Parameters":[],"ReturnType":{"Category":"Group","Name":"Dictionary"},"Security":"RobloxScriptSecurity","Tags":["Yields"]},{"MemberType":"Function","Name":"GetRecordingDevices","Parameters":[],"ReturnType":{"Category":"Group","Name":"Dictionary"},"Security":"RobloxScriptSecurity","Tags":["Yields"]}],"MemoryCategory":"Instances","Name":"SoundService","Superclass":"Instance","Tags":["NotCreatable","Service"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Color","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["Hidden","NotReplicated"],"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Data","MemberType":"Property","Name":"Enabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"SparkleColor","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}}],"MemoryCategory":"Instances","Name":"Sparkles","Superclass":"Instance"},{"Members":[],"MemoryCategory":"Instances","Name":"SpawnerService","Superclass":"Instance","Tags":["NotCreatable","Service"]},{"Members":[],"MemoryCategory":"Instances","Name":"StarterGear","Superclass":"Instance"},{"Members":[{"Category":"Character","MemberType":"Property","Name":"AllowCustomAnimations","Security":{"Read":"None","Write":"NotAccessibleSecurity"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["Hidden"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Mobile","MemberType":"Property","Name":"AutoJumpEnabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Camera","MemberType":"Property","Name":"CameraMaxZoomDistance","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Camera","MemberType":"Property","Name":"CameraMinZoomDistance","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Camera","MemberType":"Property","Name":"CameraMode","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"CameraMode"}},{"Category":"Camera","MemberType":"Property","Name":"DevCameraOcclusionMode","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"DevCameraOcclusionMode"}},{"Category":"Camera","MemberType":"Property","Name":"DevComputerCameraMovementMode","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"DevComputerCameraMovementMode"}},{"Category":"Controls","MemberType":"Property","Name":"DevComputerMovementMode","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"DevComputerMovementMode"}},{"Category":"Camera","MemberType":"Property","Name":"DevTouchCameraMovementMode","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"DevTouchCameraMovementMode"}},{"Category":"Controls","MemberType":"Property","Name":"DevTouchMovementMode","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"DevTouchMovementMode"}},{"Category":"Controls","MemberType":"Property","Name":"EnableMouseLockOption","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"HealthDisplayDistance","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Character","MemberType":"Property","Name":"LoadCharacterAppearance","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"NameDisplayDistance","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}}],"MemoryCategory":"Instances","Name":"StarterPlayer","Superclass":"Instance","Tags":["NotCreatable","Service"]},{"Members":[],"MemoryCategory":"Instances","Name":"StarterPlayerScripts","Superclass":"Instance"},{"Members":[],"MemoryCategory":"Instances","Name":"StarterCharacterScripts","Superclass":"StarterPlayerScripts"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"ContactsCount","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Data","MemberType":"Property","Name":"DataReceiveKbps","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"DataSendKbps","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"HeartbeatTimeMs","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"InstanceCount","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Data","MemberType":"Property","Name":"MovingPrimitivesCount","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Data","MemberType":"Property","Name":"PhysicsReceiveKbps","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"PhysicsSendKbps","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"PhysicsStepTimeMs","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"PrimitivesCount","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"int"}},{"MemberType":"Function","Name":"GetMemoryUsageMbForTag","Parameters":[{"Name":"tag","Type":{"Category":"Enum","Name":"DeveloperMemoryTag"}}],"ReturnType":{"Category":"Primitive","Name":"float"},"Security":"None"},{"MemberType":"Function","Name":"GetTotalMemoryUsageMb","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"float"},"Security":"None"},{"MemberType":"Function","Name":"GetPaginatedMemoryByTexture","Parameters":[{"Name":"queryType","Type":{"Category":"Enum","Name":"TextureQueryType"}},{"Name":"pageIndex","Type":{"Category":"Primitive","Name":"int"}},{"Name":"pageSize","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Group","Name":"Dictionary"},"Security":"RobloxScriptSecurity","Tags":["Yields"]}],"MemoryCategory":"Instances","Name":"Stats","Superclass":"Instance","Tags":["NotCreatable","Service"]},{"Members":[{"MemberType":"Function","Name":"GetValue","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"double"},"Security":"PluginSecurity"},{"MemberType":"Function","Name":"GetValueString","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"string"},"Security":"PluginSecurity"}],"MemoryCategory":"Instances","Name":"StatsItem","Superclass":"Instance","Tags":["NotCreatable"]},{"Members":[],"MemoryCategory":"Instances","Name":"RunningAverageItemDouble","Superclass":"StatsItem","Tags":["NotCreatable"]},{"Members":[],"MemoryCategory":"Instances","Name":"RunningAverageItemInt","Superclass":"StatsItem","Tags":["NotCreatable"]},{"Members":[],"MemoryCategory":"Instances","Name":"RunningAverageTimeIntervalItem","Superclass":"StatsItem","Tags":["NotCreatable"]},{"Members":[],"MemoryCategory":"Instances","Name":"TotalCountTimeIntervalItem","Superclass":"StatsItem","Tags":["NotCreatable"]},{"Members":[{"Category":"General","MemberType":"Property","Name":"Always Save Script Changes","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Tools","MemberType":"Property","Name":"Animate Hover Over","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Script Editor","MemberType":"Property","Name":"Auto Indent","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Auto-Save","MemberType":"Property","Name":"Auto-Save Enabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Auto-Save","MemberType":"Property","Name":"Auto-Save Interval (Minutes)","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Auto-Save","MemberType":"Property","Name":"Auto-Save Path","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"QDir"}},{"Category":"Script Editor Colors","MemberType":"Property","Name":"Background Color","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"General","MemberType":"Property","Name":"Basic Objects Display Mode","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"ListDisplayMode"}},{"Category":"Script Editor Colors","MemberType":"Property","Name":"Built-in Function Color","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Camera","MemberType":"Property","Name":"Camera Mouse Wheel Speed","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Camera","MemberType":"Property","Name":"Camera Shift Speed","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Camera","MemberType":"Property","Name":"Camera Speed","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Output","MemberType":"Property","Name":"Clear Output On Start","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Script Editor Colors","MemberType":"Property","Name":"Comment Color","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Directories","MemberType":"Property","Name":"DefaultScriptFileDir","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"QDir"}},{"Category":"Browsing","MemberType":"Property","Name":"DeprecatedObjectsShown","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Device Deployment","MemberType":"Property","Name":"Device Pairing Code","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Advanced","MemberType":"Property","Name":"Drag Multiple Parts As Single Part","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Advanced","MemberType":"Property","Name":"Enable Autocomplete","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Advanced","MemberType":"Property","Name":"Enable Intellisense","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated","Deprecated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Script Editor Colors","MemberType":"Property","Name":"Error Color","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Script Editor Colors","MemberType":"Property","Name":"Find Selection Background Color","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Script Editor","MemberType":"Property","Name":"Font","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"QFont"}},{"Category":"Tools","MemberType":"Property","Name":"Hover Animate Speed","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"HoverAnimateSpeed"}},{"Category":"Tools","MemberType":"Property","Name":"Hover Over Color","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Script Editor Colors","MemberType":"Property","Name":"Keyword Color","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Primary Part","MemberType":"Property","Name":"Line Thickness","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Lua Debugger","MemberType":"Property","Name":"LuaDebuggerEnabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Script Editor Colors","MemberType":"Property","Name":"Matching Word Background Color","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Output","MemberType":"Property","Name":"Maximum Output Lines","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Script Editor Colors","MemberType":"Property","Name":"Number Color","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Audio","MemberType":"Property","Name":"Only Play Audio from Window in Focus","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Script Editor Colors","MemberType":"Property","Name":"Operator Color","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Output","MemberType":"Property","Name":"Output Font","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"QFont"}},{"Category":"Output","MemberType":"Property","Name":"Output Layout Mode","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"OutputLayoutMode"}},{"Category":"Directories","MemberType":"Property","Name":"OverrideCoreScripts","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Directories","MemberType":"Property","Name":"OverrideCoreScriptsDir","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"QDir"}},{"Category":"Browsing","MemberType":"Property","Name":"PermissionLevelShown","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"PermissionLevelShown"}},{"Category":"Directories","MemberType":"Property","Name":"PluginsDir","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"QDir"}},{"Category":"Script Editor Colors","MemberType":"Property","Name":"Preprocessor Color","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Directories","MemberType":"Property","Name":"RecentSavesDir","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"QDir"}},{"Category":"General","MemberType":"Property","Name":"Render Throttle Percentage","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Advanced","MemberType":"Property","Name":"Respect Studio shortcuts when game has focus","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Undo","MemberType":"Property","Name":"RuntimeUndoBehavior","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"RuntimeUndoBehavior"}},{"Category":"Lua Debugger","MemberType":"Property","Name":"ScriptTimeoutLength","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Tools","MemberType":"Property","Name":"Select Color","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Primary Part","MemberType":"Property","Name":"Select/Hover Color","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Script Editor Colors","MemberType":"Property","Name":"Selection Background Color","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Script Editor Colors","MemberType":"Property","Name":"Selection Color","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Audio","MemberType":"Property","Name":"Server Audio Behavior","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"ServerAudioBehavior"}},{"Category":"Advanced","MemberType":"Property","Name":"Show Core GUI in Explorer while Playing","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Advanced","MemberType":"Property","Name":"Show Diagnostics Bar","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Tools","MemberType":"Property","Name":"Show Hover Over","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Visualization","MemberType":"Property","Name":"Show Navigation Mesh","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Advanced","MemberType":"Property","Name":"Show Plugin GUI Service in Explorer","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Advanced","MemberType":"Property","Name":"Show QT warnings in output","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Advanced","MemberType":"Property","Name":"Show plus button on hover in Explorer","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Script Editor Colors","MemberType":"Property","Name":"String Color","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Script Editor","MemberType":"Property","Name":"Tab Width","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Script Editor Colors","MemberType":"Property","Name":"Text Color","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"Category":"Script Editor","MemberType":"Property","Name":"Text Wrapping","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"General","MemberType":"Property","Name":"UI Theme","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"UITheme"}},{"Category":"Advanced","MemberType":"Property","Name":"Use Accurate Play Solo","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Script Editor Colors","MemberType":"Property","Name":"Warning Color","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}}],"MemoryCategory":"Instances","Name":"Studio","Superclass":"Instance","Tags":["Service","NotReplicated"]},{"Members":[{"Category":"Diagnostics","MemberType":"Property","Name":"SchedulerDutyCycle","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"double"}},{"Category":"Diagnostics","MemberType":"Property","Name":"SchedulerRate","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"double"}},{"Category":"Configuration","MemberType":"Property","Name":"ThreadPoolConfig","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"ThreadPoolConfig"}},{"Category":"Diagnostics","MemberType":"Property","Name":"ThreadPoolSize","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"int"}}],"MemoryCategory":"Instances","Name":"TaskScheduler","Superclass":"Instance","Tags":["Service"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"AutoAssignable","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"AutoColorCharacters","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated","Deprecated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"Score","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated","Deprecated"],"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Data","MemberType":"Property","Name":"TeamColor","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"BrickColor"}},{"MemberType":"Function","Name":"GetPlayers","Parameters":[],"ReturnType":{"Category":"DataType","Name":"Objects"},"Security":"None"},{"MemberType":"Event","Name":"PlayerAdded","Parameters":[{"Name":"player","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"},{"MemberType":"Event","Name":"PlayerRemoved","Parameters":[{"Name":"player","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"}],"MemoryCategory":"Instances","Name":"Team","Superclass":"Instance"},{"Members":[{"MemberType":"Function","Name":"GetTeams","Parameters":[],"ReturnType":{"Category":"DataType","Name":"Objects"},"Security":"None"},{"MemberType":"Function","Name":"RebalanceTeams","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]}],"MemoryCategory":"Instances","Name":"Teams","Superclass":"Instance","Tags":["NotCreatable","Service"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"CustomizedTeleportUI","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated","Deprecated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"MemberType":"Function","Name":"GetLocalPlayerTeleportData","Parameters":[],"ReturnType":{"Category":"Group","Name":"Variant"},"Security":"None"},{"MemberType":"Function","Name":"GetTeleportSetting","Parameters":[{"Name":"setting","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Group","Name":"Variant"},"Security":"None"},{"MemberType":"Function","Name":"SetTeleportGui","Parameters":[{"Name":"gui","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"SetTeleportSetting","Parameters":[{"Name":"setting","Type":{"Category":"Primitive","Name":"string"}},{"Name":"value","Type":{"Category":"Group","Name":"Variant"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"Teleport","Parameters":[{"Name":"placeId","Type":{"Category":"Primitive","Name":"int64"}},{"Default":"nil","Name":"player","Type":{"Category":"Class","Name":"Instance"}},{"Name":"teleportData","Type":{"Category":"Group","Name":"Variant"}},{"Default":"nil","Name":"customLoadingScreen","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"TeleportCancel","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"TeleportToPlaceInstance","Parameters":[{"Name":"placeId","Type":{"Category":"Primitive","Name":"int64"}},{"Name":"instanceId","Type":{"Category":"Primitive","Name":"string"}},{"Default":"nil","Name":"player","Type":{"Category":"Class","Name":"Instance"}},{"Default":"","Name":"spawnName","Type":{"Category":"Primitive","Name":"string"}},{"Name":"teleportData","Type":{"Category":"Group","Name":"Variant"}},{"Default":"nil","Name":"customLoadingScreen","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"TeleportToPrivateServer","Parameters":[{"Name":"placeId","Type":{"Category":"Primitive","Name":"int64"}},{"Name":"reservedServerAccessCode","Type":{"Category":"Primitive","Name":"string"}},{"Name":"players","Type":{"Category":"DataType","Name":"Objects"}},{"Default":"","Name":"spawnName","Type":{"Category":"Primitive","Name":"string"}},{"Name":"teleportData","Type":{"Category":"Group","Name":"Variant"}},{"Default":"nil","Name":"customLoadingScreen","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"TeleportToSpawnByName","Parameters":[{"Name":"placeId","Type":{"Category":"Primitive","Name":"int64"}},{"Name":"spawnName","Type":{"Category":"Primitive","Name":"string"}},{"Default":"nil","Name":"player","Type":{"Category":"Class","Name":"Instance"}},{"Name":"teleportData","Type":{"Category":"Group","Name":"Variant"}},{"Default":"nil","Name":"customLoadingScreen","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"GetPlayerPlaceInstanceAsync","Parameters":[{"Name":"userId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Group","Name":"Tuple"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"ReserveServer","Parameters":[{"Name":"placeId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Primitive","Name":"string"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"TeleportPartyAsync","Parameters":[{"Name":"placeId","Type":{"Category":"Primitive","Name":"int64"}},{"Name":"players","Type":{"Category":"DataType","Name":"Objects"}},{"Name":"teleportData","Type":{"Category":"Group","Name":"Variant"}},{"Default":"nil","Name":"customLoadingScreen","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"string"},"Security":"None","Tags":["Yields"]},{"MemberType":"Event","Name":"LocalPlayerArrivedFromTeleport","Parameters":[{"Name":"loadingGui","Type":{"Category":"Class","Name":"Instance"}},{"Name":"dataTable","Type":{"Category":"Group","Name":"Variant"}}],"Security":"None"},{"MemberType":"Event","Name":"TeleportInitFailed","Parameters":[{"Name":"player","Type":{"Category":"Class","Name":"Instance"}},{"Name":"teleportResult","Type":{"Category":"Enum","Name":"TeleportResult"}},{"Name":"errorMessage","Type":{"Category":"Primitive","Name":"string"}}],"Security":"None"}],"MemoryCategory":"Instances","Name":"TeleportService","Superclass":"Instance","Tags":["NotCreatable","Service"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"IsSmooth","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated","Deprecated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"SizeInCells","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"DataType","Name":"Vector3"}},{"MemberType":"Function","Name":"ConvertToSmooth","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"PluginSecurity","Tags":["Deprecated"]}],"MemoryCategory":"Instances","Name":"TerrainRegion","Superclass":"Instance"},{"Members":[{"Category":"Physics","MemberType":"Property","Name":"AutoRuns","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"Description","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"Results","MemberType":"Property","Name":"ErrorCount","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Settings","MemberType":"Property","Name":"ExecuteWithStudioRun","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Physics","MemberType":"Property","Name":"Is30FpsThrottleEnabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Physics","MemberType":"Property","Name":"IsPhysicsEnvironmentalThrottled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Physics","MemberType":"Property","Name":"IsSleepAllowed","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Settings","MemberType":"Property","Name":"NumberOfPlayers","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Settings","MemberType":"Property","Name":"SimulateSecondsLag","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"double"}},{"Category":"Results","MemberType":"Property","Name":"TestCount","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Settings","MemberType":"Property","Name":"Timeout","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"double"}},{"Category":"Results","MemberType":"Property","Name":"WarnCount","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"int"}},{"MemberType":"Function","Name":"Check","Parameters":[{"Name":"condition","Type":{"Category":"Primitive","Name":"bool"}},{"Name":"description","Type":{"Category":"Primitive","Name":"string"}},{"Default":"nil","Name":"source","Type":{"Category":"Class","Name":"Instance"}},{"Default":"0","Name":"line","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"Checkpoint","Parameters":[{"Name":"text","Type":{"Category":"Primitive","Name":"string"}},{"Default":"nil","Name":"source","Type":{"Category":"Class","Name":"Instance"}},{"Default":"0","Name":"line","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"Done","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"Error","Parameters":[{"Name":"description","Type":{"Category":"Primitive","Name":"string"}},{"Default":"nil","Name":"source","Type":{"Category":"Class","Name":"Instance"}},{"Default":"0","Name":"line","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"Fail","Parameters":[{"Name":"description","Type":{"Category":"Primitive","Name":"string"}},{"Default":"nil","Name":"source","Type":{"Category":"Class","Name":"Instance"}},{"Default":"0","Name":"line","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"Message","Parameters":[{"Name":"text","Type":{"Category":"Primitive","Name":"string"}},{"Default":"nil","Name":"source","Type":{"Category":"Class","Name":"Instance"}},{"Default":"0","Name":"line","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"Require","Parameters":[{"Name":"condition","Type":{"Category":"Primitive","Name":"bool"}},{"Name":"description","Type":{"Category":"Primitive","Name":"string"}},{"Default":"nil","Name":"source","Type":{"Category":"Class","Name":"Instance"}},{"Default":"0","Name":"line","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"Warn","Parameters":[{"Name":"condition","Type":{"Category":"Primitive","Name":"bool"}},{"Name":"description","Type":{"Category":"Primitive","Name":"string"}},{"Default":"nil","Name":"source","Type":{"Category":"Class","Name":"Instance"}},{"Default":"0","Name":"line","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"isFeatureEnabled","Parameters":[{"Name":"name","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Function","Name":"Run","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"PluginSecurity","Tags":["Yields"]},{"MemberType":"Event","Name":"ServerCollectConditionalResult","Parameters":[{"Name":"condition","Type":{"Category":"Primitive","Name":"bool"}},{"Name":"text","Type":{"Category":"Primitive","Name":"string"}},{"Name":"script","Type":{"Category":"Class","Name":"Instance"}},{"Name":"line","Type":{"Category":"Primitive","Name":"int"}}],"Security":"None"},{"MemberType":"Event","Name":"ServerCollectResult","Parameters":[{"Name":"text","Type":{"Category":"Primitive","Name":"string"}},{"Name":"script","Type":{"Category":"Class","Name":"Instance"}},{"Name":"line","Type":{"Category":"Primitive","Name":"int"}}],"Security":"None"}],"MemoryCategory":"Instances","Name":"TestService","Superclass":"Instance","Tags":["Service"]},{"Members":[{"MemberType":"Function","Name":"GetChatForUserAsync","Parameters":[{"Name":"toUserId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Primitive","Name":"string"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"GetNonChatStringForBroadcastAsync","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"string"},"Security":"None","Tags":["Yields"]},{"MemberType":"Function","Name":"GetNonChatStringForUserAsync","Parameters":[{"Name":"toUserId","Type":{"Category":"Primitive","Name":"int64"}}],"ReturnType":{"Category":"Primitive","Name":"string"},"Security":"None","Tags":["Yields"]}],"MemoryCategory":"Instances","Name":"TextFilterResult","Superclass":"Instance","Tags":["NotCreatable","NotReplicated"]},{"Members":[{"MemberType":"Function","Name":"GetTextSize","Parameters":[{"Name":"string","Type":{"Category":"Primitive","Name":"string"}},{"Name":"fontSize","Type":{"Category":"Primitive","Name":"int"}},{"Name":"font","Type":{"Category":"Enum","Name":"Font"}},{"Name":"frameSize","Type":{"Category":"DataType","Name":"Vector2"}}],"ReturnType":{"Category":"DataType","Name":"Vector2"},"Security":"None"},{"MemberType":"Function","Name":"FilterStringAsync","Parameters":[{"Name":"stringToFilter","Type":{"Category":"Primitive","Name":"string"}},{"Name":"fromUserId","Type":{"Category":"Primitive","Name":"int64"}},{"Default":"PrivateChat","Name":"textContext","Type":{"Category":"Enum","Name":"TextFilterContext"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None","Tags":["Yields"]}],"MemoryCategory":"Instances","Name":"TextService","Superclass":"Instance","Tags":["NotCreatable","Service","NotReplicated"]},{"Members":[],"MemoryCategory":"Instances","Name":"Theme","Superclass":"Instance","Tags":["NotCreatable","NotReplicated"]},{"Members":[{"MemberType":"Function","Name":"GetUserDisplayName","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"string"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"GetUserPlatformId","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"string"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"HaveActiveUser","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"ReturnToEngagement","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"ShowAccountPicker","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"RegisterActiveUser","Parameters":[{"Name":"gamepadId","Type":{"Category":"Enum","Name":"UserInputType"}}],"ReturnType":{"Category":"Primitive","Name":"int"},"Security":"RobloxScriptSecurity","Tags":["Yields"]},{"MemberType":"Event","Name":"ActiveGamepadAdded","Parameters":[],"Security":"RobloxScriptSecurity"},{"MemberType":"Event","Name":"ActiveGamepadRemoved","Parameters":[],"Security":"RobloxScriptSecurity"},{"MemberType":"Event","Name":"ActiveUserSignedOut","Parameters":[{"Name":"signOutStatus","Type":{"Category":"Primitive","Name":"int"}}],"Security":"RobloxScriptSecurity"}],"MemoryCategory":"Instances","Name":"ThirdPartyUserService","Superclass":"Instance","Tags":["NotCreatable","Service","NotReplicated"]},{"Members":[],"MemoryCategory":"Instances","Name":"TimerService","Superclass":"Instance","Tags":["NotCreatable","Service"]},{"Members":[{"MemberType":"Function","Name":"CreateButton","Parameters":[{"Name":"text","Type":{"Category":"Primitive","Name":"string"}},{"Name":"tooltip","Type":{"Category":"Primitive","Name":"string"}},{"Name":"iconname","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"PluginSecurity"}],"MemoryCategory":"Instances","Name":"Toolbar","Superclass":"Instance","Tags":["NotCreatable"]},{"Members":[],"MemoryCategory":"Instances","Name":"TouchInputService","Superclass":"Instance","Tags":["NotCreatable","Service"]},{"Members":[],"MemoryCategory":"Instances","Name":"TouchTransmitter","Superclass":"Instance","Tags":["NotCreatable","NotBrowsable"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Attachment0","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Class","Name":"Attachment"}},{"Category":"Data","MemberType":"Property","Name":"Attachment1","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Class","Name":"Attachment"}},{"Category":"Appearance","MemberType":"Property","Name":"Color","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"ColorSequence"}},{"Category":"Emission","MemberType":"Property","Name":"Enabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Appearance","MemberType":"Property","Name":"FaceCamera","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Emission","MemberType":"Property","Name":"Lifetime","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Appearance","MemberType":"Property","Name":"LightEmission","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Appearance","MemberType":"Property","Name":"LightInfluence","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Emission","MemberType":"Property","Name":"MaxLength","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Emission","MemberType":"Property","Name":"MinLength","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Appearance","MemberType":"Property","Name":"Texture","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Content"}},{"Category":"Appearance","MemberType":"Property","Name":"TextureLength","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Appearance","MemberType":"Property","Name":"TextureMode","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"TextureMode"}},{"Category":"Appearance","MemberType":"Property","Name":"Transparency","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"NumberSequence"}},{"Category":"Emission","MemberType":"Property","Name":"WidthScale","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"NumberSequence"}},{"MemberType":"Function","Name":"Clear","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"}],"MemoryCategory":"Instances","Name":"Trail","Superclass":"Instance"},{"Members":[{"Category":"Behavior","MemberType":"Property","Name":"LocaleId","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"string"}},{"MemberType":"Function","Name":"FormatByKey","Parameters":[{"Name":"key","Type":{"Category":"Primitive","Name":"string"}},{"Name":"args","Type":{"Category":"Group","Name":"Variant"}}],"ReturnType":{"Category":"Primitive","Name":"string"},"Security":"None"},{"MemberType":"Function","Name":"RobloxOnlyTranslate","Parameters":[{"Name":"context","Type":{"Category":"Class","Name":"Instance"}},{"Name":"text","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"string"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"Translate","Parameters":[{"Name":"context","Type":{"Category":"Class","Name":"Instance"}},{"Name":"text","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"string"},"Security":"None"}],"MemoryCategory":"Instances","Name":"Translator","Superclass":"Instance","Tags":["NotCreatable","NotReplicated"]},{"Members":[{"Category":"Behavior","MemberType":"Property","Name":"PlaybackState","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Enum","Name":"PlaybackState"}},{"MemberType":"Function","Name":"Cancel","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"Pause","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"Play","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Event","Name":"Completed","Parameters":[{"Name":"playbackState","Type":{"Category":"Enum","Name":"PlaybackState"}}],"Security":"None"}],"MemoryCategory":"Instances","Name":"TweenBase","Superclass":"Instance","Tags":["NotCreatable","NotBrowsable"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Instance","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Class","Name":"Instance"}},{"Category":"Data","MemberType":"Property","Name":"TweenInfo","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"DataType","Name":"TweenInfo"}}],"MemoryCategory":"Instances","Name":"Tween","Superclass":"TweenBase"},{"Members":[{"MemberType":"Function","Name":"Create","Parameters":[{"Name":"instance","Type":{"Category":"Class","Name":"Instance"}},{"Name":"tweenInfo","Type":{"Category":"DataType","Name":"TweenInfo"}},{"Name":"propertyTable","Type":{"Category":"Group","Name":"Dictionary"}}],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None"}],"MemoryCategory":"Instances","Name":"TweenService","Superclass":"Instance","Tags":["NotCreatable","Service"]},{"Members":[],"MemoryCategory":"Instances","Name":"UIBase","Superclass":"Instance","Tags":["NotCreatable"]},{"Members":[],"MemoryCategory":"Instances","Name":"UIComponent","Superclass":"UIBase","Tags":["NotCreatable"]},{"Members":[],"MemoryCategory":"Instances","Name":"UIConstraint","Superclass":"UIComponent","Tags":["NotCreatable"]},{"Members":[{"Category":"Behavior","MemberType":"Property","Name":"AspectRatio","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Behavior","MemberType":"Property","Name":"AspectType","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"AspectType"}},{"Category":"Behavior","MemberType":"Property","Name":"DominantAxis","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"DominantAxis"}}],"MemoryCategory":"Instances","Name":"UIAspectRatioConstraint","Superclass":"UIConstraint"},{"Members":[{"Category":"Behavior","MemberType":"Property","Name":"MaxSize","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector2"}},{"Category":"Behavior","MemberType":"Property","Name":"MinSize","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector2"}}],"MemoryCategory":"Instances","Name":"UISizeConstraint","Superclass":"UIConstraint"},{"Members":[{"Category":"Behavior","MemberType":"Property","Name":"MaxTextSize","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Behavior","MemberType":"Property","Name":"MinTextSize","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}}],"MemoryCategory":"Instances","Name":"UITextSizeConstraint","Superclass":"UIConstraint"},{"Members":[],"MemoryCategory":"Instances","Name":"UILayout","Superclass":"UIComponent","Tags":["NotCreatable"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"AbsoluteContentSize","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"DataType","Name":"Vector2"}},{"Category":"Behavior","MemberType":"Property","Name":"FillDirection","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"FillDirection"}},{"Category":"Behavior","MemberType":"Property","Name":"HorizontalAlignment","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"HorizontalAlignment"}},{"Category":"Behavior","MemberType":"Property","Name":"SortOrder","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"SortOrder"}},{"Category":"Behavior","MemberType":"Property","Name":"VerticalAlignment","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"VerticalAlignment"}},{"MemberType":"Function","Name":"ApplyLayout","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"SetCustomSortFunction","Parameters":[{"Default":"nil","Name":"function","Type":{"Category":"DataType","Name":"Function"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None","Tags":["Deprecated"]}],"MemoryCategory":"Instances","Name":"UIGridStyleLayout","Superclass":"UILayout","Tags":["NotCreatable","NotBrowsable"]},{"Members":[{"Category":"Appearance","MemberType":"Property","Name":"CellPadding","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"UDim2"}},{"Category":"Appearance","MemberType":"Property","Name":"CellSize","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"UDim2"}},{"Category":"Behavior","MemberType":"Property","Name":"FillDirectionMaxCells","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Behavior","MemberType":"Property","Name":"StartCorner","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"StartCorner"}}],"MemoryCategory":"Instances","Name":"UIGridLayout","Superclass":"UIGridStyleLayout"},{"Members":[{"Category":"Appearance","MemberType":"Property","Name":"Padding","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"UDim"}}],"MemoryCategory":"Instances","Name":"UIListLayout","Superclass":"UIGridStyleLayout"},{"Members":[{"Category":"Appearance","MemberType":"Property","Name":"Animated","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Appearance","MemberType":"Property","Name":"Circular","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"CurrentPage","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Class","Name":"GuiObject"}},{"Category":"Appearance","MemberType":"Property","Name":"EasingDirection","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"EasingDirection"}},{"Category":"Appearance","MemberType":"Property","Name":"EasingStyle","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"EasingStyle"}},{"Category":"Input","MemberType":"Property","Name":"GamepadInputEnabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Appearance","MemberType":"Property","Name":"Padding","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"UDim"}},{"Category":"Input","MemberType":"Property","Name":"ScrollWheelInputEnabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Input","MemberType":"Property","Name":"TouchInputEnabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Appearance","MemberType":"Property","Name":"TweenTime","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"MemberType":"Function","Name":"JumpTo","Parameters":[{"Name":"page","Type":{"Category":"Class","Name":"Instance"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"JumpToIndex","Parameters":[{"Name":"index","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"Next","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"Previous","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Event","Name":"PageEnter","Parameters":[{"Name":"page","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"},{"MemberType":"Event","Name":"PageLeave","Parameters":[{"Name":"page","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"},{"MemberType":"Event","Name":"Stopped","Parameters":[{"Name":"currentPage","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"}],"MemoryCategory":"Instances","Name":"UIPageLayout","Superclass":"UIGridStyleLayout"},{"Members":[{"Category":"Appearance","MemberType":"Property","Name":"FillEmptySpaceColumns","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Appearance","MemberType":"Property","Name":"FillEmptySpaceRows","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Behavior","MemberType":"Property","Name":"MajorAxis","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"TableMajorAxis"}},{"Category":"Appearance","MemberType":"Property","Name":"Padding","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"UDim2"}}],"MemoryCategory":"Instances","Name":"UITableLayout","Superclass":"UIGridStyleLayout"},{"Members":[{"Category":"Behavior","MemberType":"Property","Name":"PaddingBottom","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"UDim"}},{"Category":"Behavior","MemberType":"Property","Name":"PaddingLeft","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"UDim"}},{"Category":"Behavior","MemberType":"Property","Name":"PaddingRight","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"UDim"}},{"Category":"Behavior","MemberType":"Property","Name":"PaddingTop","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"UDim"}}],"MemoryCategory":"Instances","Name":"UIPadding","Superclass":"UIComponent"},{"Members":[{"Category":"Behavior","MemberType":"Property","Name":"Scale","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}}],"MemoryCategory":"Instances","Name":"UIScale","Superclass":"UIComponent"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"AllTutorialsDisabled","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Control","MemberType":"Property","Name":"CameraMode","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"CustomCameraMode"}},{"Category":"Data","MemberType":"Property","Name":"CameraYInverted","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":true,"CanSave":true},"Tags":["Hidden","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"ChatVisible","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Control","MemberType":"Property","Name":"ComputerCameraMovementMode","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"ComputerCameraMovementMode"}},{"Category":"Control","MemberType":"Property","Name":"ComputerMovementMode","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"ComputerMovementMode"}},{"Category":"Control","MemberType":"Property","Name":"ControlMode","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"ControlMode"}},{"Category":"Data","MemberType":"Property","Name":"Fullscreen","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"GamepadCameraSensitivity","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"HasEverUsedVR","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"IsUsingCameraYInverted","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["Hidden","ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"IsUsingGamepadCameraSensitivity","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["Hidden","ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"MasterVolume","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"MicroProfilerWebServerEnabled","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":true,"CanSave":true},"Tags":["Hidden"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"MicroProfilerWebServerIP","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["Hidden","ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"Data","MemberType":"Property","Name":"MicroProfilerWebServerPort","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["Hidden","ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"int"}},{"Category":"Data","MemberType":"Property","Name":"MouseSensitivity","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"MouseSensitivityFirstPerson","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":true,"CanSave":true},"Tags":["Hidden","NotReplicated"],"ValueType":{"Category":"DataType","Name":"Vector2"}},{"Category":"Data","MemberType":"Property","Name":"MouseSensitivityThirdPerson","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":true,"CanSave":true},"Tags":["Hidden","NotReplicated"],"ValueType":{"Category":"DataType","Name":"Vector2"}},{"Category":"Data","MemberType":"Property","Name":"OnScreenProfilerEnabled","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":true,"CanSave":true},"Tags":["Hidden"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"OnboardingsCompleted","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":false,"CanSave":false},"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"Data","MemberType":"Property","Name":"PerformanceStatsVisible","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":true,"CanSave":true},"Tags":["Hidden"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Control","MemberType":"Property","Name":"RotationType","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"ValueType":{"Category":"Enum","Name":"RotationType"}},{"Category":"Appearance","MemberType":"Property","Name":"SavedQualityLevel","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"SavedQualitySetting"}},{"Category":"Data","MemberType":"Property","Name":"StartMaximized","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":true,"CanSave":true},"Tags":["NotReplicated","NotScriptable"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"StartScreenPosition","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":true,"CanSave":true},"Tags":["NotReplicated","NotScriptable"],"ValueType":{"Category":"DataType","Name":"Vector2"}},{"Category":"Data","MemberType":"Property","Name":"StartScreenSize","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":true,"CanSave":true},"Tags":["NotReplicated","NotScriptable"],"ValueType":{"Category":"DataType","Name":"Vector2"}},{"Category":"Control","MemberType":"Property","Name":"TouchCameraMovementMode","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"TouchCameraMovementMode"}},{"Category":"Control","MemberType":"Property","Name":"TouchMovementMode","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"TouchMovementMode"}},{"Category":"Data","MemberType":"Property","Name":"UsedCoreGuiIsVisibleToggle","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"UsedCustomGuiIsVisibleToggle","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"UsedHideHudShortcut","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"VREnabled","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"VRRotationIntensity","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int"}},{"MemberType":"Function","Name":"GetCameraYInvertValue","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"int"},"Security":"None"},{"MemberType":"Function","Name":"GetOnboardingCompleted","Parameters":[{"Name":"onboardingId","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Function","Name":"GetTutorialState","Parameters":[{"Name":"tutorialId","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"InFullScreen","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Function","Name":"InStudioMode","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Function","Name":"ResetOnboardingCompleted","Parameters":[{"Name":"onboardingId","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"SetCameraYInvertVisible","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"SetGamepadCameraSensitivityVisible","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"SetOnboardingCompleted","Parameters":[{"Name":"onboardingId","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"SetTutorialState","Parameters":[{"Name":"tutorialId","Type":{"Category":"Primitive","Name":"string"}},{"Name":"value","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Event","Name":"FullscreenChanged","Parameters":[{"Name":"isFullscreen","Type":{"Category":"Primitive","Name":"bool"}}],"Security":"None"},{"MemberType":"Event","Name":"PerformanceStatsVisibleChanged","Parameters":[{"Name":"isPerformanceStatsVisible","Type":{"Category":"Primitive","Name":"bool"}}],"Security":"RobloxScriptSecurity"},{"MemberType":"Event","Name":"StudioModeChanged","Parameters":[{"Name":"isStudioMode","Type":{"Category":"Primitive","Name":"bool"}}],"Security":"None"}],"MemoryCategory":"Instances","Name":"UserGameSettings","Superclass":"Instance","Tags":["Service"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"AccelerometerEnabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"BottomBarSize","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"DataType","Name":"Vector2"}},{"Category":"Data","MemberType":"Property","Name":"GamepadEnabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"GazeSelectionEnabled","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["Hidden","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"GyroscopeEnabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"KeyboardEnabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Behavior","MemberType":"Property","Name":"LegacyInputEventsEnabled","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Behavior","MemberType":"Property","Name":"ModalEnabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"MouseBehavior","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Enum","Name":"MouseBehavior"}},{"Category":"Data","MemberType":"Property","Name":"MouseDeltaSensitivity","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"Primitive","Name":"float"}},{"Category":"Data","MemberType":"Property","Name":"MouseEnabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"MouseIconEnabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"NavBarSize","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"DataType","Name":"Vector2"}},{"Category":"Data","MemberType":"Property","Name":"OnScreenKeyboardAnimationDuration","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"double"}},{"Category":"Data","MemberType":"Property","Name":"OnScreenKeyboardPosition","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"DataType","Name":"Vector2"}},{"Category":"Data","MemberType":"Property","Name":"OnScreenKeyboardSize","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"DataType","Name":"Vector2"}},{"Category":"Data","MemberType":"Property","Name":"OnScreenKeyboardVisible","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"OverrideMouseIconBehavior","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":false,"CanSave":false},"ValueType":{"Category":"Enum","Name":"OverrideMouseIconBehavior"}},{"Category":"Data","MemberType":"Property","Name":"StatusBarSize","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"DataType","Name":"Vector2"}},{"Category":"Data","MemberType":"Property","Name":"TouchEnabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Data","MemberType":"Property","Name":"UserHeadCFrame","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated","Deprecated"],"ValueType":{"Category":"DataType","Name":"CFrame"}},{"Category":"Data","MemberType":"Property","Name":"VREnabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"MemberType":"Function","Name":"GamepadSupports","Parameters":[{"Name":"gamepadNum","Type":{"Category":"Enum","Name":"UserInputType"}},{"Name":"gamepadKeyCode","Type":{"Category":"Enum","Name":"KeyCode"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Function","Name":"GetConnectedGamepads","Parameters":[],"ReturnType":{"Category":"Group","Name":"Array"},"Security":"None"},{"MemberType":"Function","Name":"GetDeviceAcceleration","Parameters":[],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None"},{"MemberType":"Function","Name":"GetDeviceGravity","Parameters":[],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None"},{"MemberType":"Function","Name":"GetDeviceRotation","Parameters":[],"ReturnType":{"Category":"Group","Name":"Tuple"},"Security":"None"},{"MemberType":"Function","Name":"GetFocusedTextBox","Parameters":[],"ReturnType":{"Category":"Class","Name":"Instance"},"Security":"None"},{"MemberType":"Function","Name":"GetGamepadConnected","Parameters":[{"Name":"gamepadNum","Type":{"Category":"Enum","Name":"UserInputType"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Function","Name":"GetGamepadState","Parameters":[{"Name":"gamepadNum","Type":{"Category":"Enum","Name":"UserInputType"}}],"ReturnType":{"Category":"Group","Name":"Array"},"Security":"None"},{"MemberType":"Function","Name":"GetKeysPressed","Parameters":[],"ReturnType":{"Category":"Group","Name":"Array"},"Security":"None"},{"MemberType":"Function","Name":"GetLastInputType","Parameters":[],"ReturnType":{"Category":"Enum","Name":"UserInputType"},"Security":"None"},{"MemberType":"Function","Name":"GetMouseButtonsPressed","Parameters":[],"ReturnType":{"Category":"Group","Name":"Array"},"Security":"None"},{"MemberType":"Function","Name":"GetMouseDelta","Parameters":[],"ReturnType":{"Category":"DataType","Name":"Vector2"},"Security":"None"},{"MemberType":"Function","Name":"GetMouseLocation","Parameters":[],"ReturnType":{"Category":"DataType","Name":"Vector2"},"Security":"None"},{"MemberType":"Function","Name":"GetNavigationGamepads","Parameters":[],"ReturnType":{"Category":"Group","Name":"Array"},"Security":"None"},{"MemberType":"Function","Name":"GetPlatform","Parameters":[],"ReturnType":{"Category":"Enum","Name":"Platform"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"GetSupportedGamepadKeyCodes","Parameters":[{"Name":"gamepadNum","Type":{"Category":"Enum","Name":"UserInputType"}}],"ReturnType":{"Category":"Group","Name":"Array"},"Security":"None"},{"MemberType":"Function","Name":"GetUserCFrame","Parameters":[{"Name":"type","Type":{"Category":"Enum","Name":"UserCFrame"}}],"ReturnType":{"Category":"DataType","Name":"CFrame"},"Security":"None"},{"MemberType":"Function","Name":"IsGamepadButtonDown","Parameters":[{"Name":"gamepadNum","Type":{"Category":"Enum","Name":"UserInputType"}},{"Name":"gamepadKeyCode","Type":{"Category":"Enum","Name":"KeyCode"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Function","Name":"IsKeyDown","Parameters":[{"Name":"keyCode","Type":{"Category":"Enum","Name":"KeyCode"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Function","Name":"IsMouseButtonPressed","Parameters":[{"Name":"mouseButton","Type":{"Category":"Enum","Name":"UserInputType"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Function","Name":"IsNavigationGamepad","Parameters":[{"Name":"gamepadEnum","Type":{"Category":"Enum","Name":"UserInputType"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Function","Name":"RecenterUserHeadCFrame","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"SendAppUISizes","Parameters":[{"Name":"statusBarSize","Type":{"Category":"DataType","Name":"Vector2"}},{"Name":"navBarSize","Type":{"Category":"DataType","Name":"Vector2"}},{"Name":"bottomBarSize","Type":{"Category":"DataType","Name":"Vector2"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"SetNavigationGamepad","Parameters":[{"Name":"gamepadEnum","Type":{"Category":"Enum","Name":"UserInputType"}},{"Name":"enabled","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Event","Name":"DeviceAccelerationChanged","Parameters":[{"Name":"acceleration","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"},{"MemberType":"Event","Name":"DeviceGravityChanged","Parameters":[{"Name":"gravity","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"},{"MemberType":"Event","Name":"DeviceRotationChanged","Parameters":[{"Name":"rotation","Type":{"Category":"Class","Name":"Instance"}},{"Name":"cframe","Type":{"Category":"DataType","Name":"CFrame"}}],"Security":"None"},{"MemberType":"Event","Name":"GamepadConnected","Parameters":[{"Name":"gamepadNum","Type":{"Category":"Enum","Name":"UserInputType"}}],"Security":"None"},{"MemberType":"Event","Name":"GamepadDisconnected","Parameters":[{"Name":"gamepadNum","Type":{"Category":"Enum","Name":"UserInputType"}}],"Security":"None"},{"MemberType":"Event","Name":"InputBegan","Parameters":[{"Name":"input","Type":{"Category":"Class","Name":"Instance"}},{"Name":"gameProcessedEvent","Type":{"Category":"Primitive","Name":"bool"}}],"Security":"None"},{"MemberType":"Event","Name":"InputChanged","Parameters":[{"Name":"input","Type":{"Category":"Class","Name":"Instance"}},{"Name":"gameProcessedEvent","Type":{"Category":"Primitive","Name":"bool"}}],"Security":"None"},{"MemberType":"Event","Name":"InputEnded","Parameters":[{"Name":"input","Type":{"Category":"Class","Name":"Instance"}},{"Name":"gameProcessedEvent","Type":{"Category":"Primitive","Name":"bool"}}],"Security":"None"},{"MemberType":"Event","Name":"JumpRequest","Parameters":[],"Security":"None"},{"MemberType":"Event","Name":"LastInputTypeChanged","Parameters":[{"Name":"lastInputType","Type":{"Category":"Enum","Name":"UserInputType"}}],"Security":"None"},{"MemberType":"Event","Name":"StatusBarTapped","Parameters":[{"Name":"position","Type":{"Category":"DataType","Name":"Vector2"}}],"Security":"RobloxScriptSecurity"},{"MemberType":"Event","Name":"TextBoxFocusReleased","Parameters":[{"Name":"textboxReleased","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"},{"MemberType":"Event","Name":"TextBoxFocused","Parameters":[{"Name":"textboxFocused","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"},{"MemberType":"Event","Name":"TouchEnded","Parameters":[{"Name":"touch","Type":{"Category":"Class","Name":"Instance"}},{"Name":"gameProcessedEvent","Type":{"Category":"Primitive","Name":"bool"}}],"Security":"None"},{"MemberType":"Event","Name":"TouchLongPress","Parameters":[{"Name":"touchPositions","Type":{"Category":"Group","Name":"Array"}},{"Name":"state","Type":{"Category":"Enum","Name":"UserInputState"}},{"Name":"gameProcessedEvent","Type":{"Category":"Primitive","Name":"bool"}}],"Security":"None"},{"MemberType":"Event","Name":"TouchMoved","Parameters":[{"Name":"touch","Type":{"Category":"Class","Name":"Instance"}},{"Name":"gameProcessedEvent","Type":{"Category":"Primitive","Name":"bool"}}],"Security":"None"},{"MemberType":"Event","Name":"TouchPan","Parameters":[{"Name":"touchPositions","Type":{"Category":"Group","Name":"Array"}},{"Name":"totalTranslation","Type":{"Category":"DataType","Name":"Vector2"}},{"Name":"velocity","Type":{"Category":"DataType","Name":"Vector2"}},{"Name":"state","Type":{"Category":"Enum","Name":"UserInputState"}},{"Name":"gameProcessedEvent","Type":{"Category":"Primitive","Name":"bool"}}],"Security":"None"},{"MemberType":"Event","Name":"TouchPinch","Parameters":[{"Name":"touchPositions","Type":{"Category":"Group","Name":"Array"}},{"Name":"scale","Type":{"Category":"Primitive","Name":"float"}},{"Name":"velocity","Type":{"Category":"Primitive","Name":"float"}},{"Name":"state","Type":{"Category":"Enum","Name":"UserInputState"}},{"Name":"gameProcessedEvent","Type":{"Category":"Primitive","Name":"bool"}}],"Security":"None"},{"MemberType":"Event","Name":"TouchRotate","Parameters":[{"Name":"touchPositions","Type":{"Category":"Group","Name":"Array"}},{"Name":"rotation","Type":{"Category":"Primitive","Name":"float"}},{"Name":"velocity","Type":{"Category":"Primitive","Name":"float"}},{"Name":"state","Type":{"Category":"Enum","Name":"UserInputState"}},{"Name":"gameProcessedEvent","Type":{"Category":"Primitive","Name":"bool"}}],"Security":"None"},{"MemberType":"Event","Name":"TouchStarted","Parameters":[{"Name":"touch","Type":{"Category":"Class","Name":"Instance"}},{"Name":"gameProcessedEvent","Type":{"Category":"Primitive","Name":"bool"}}],"Security":"None"},{"MemberType":"Event","Name":"TouchSwipe","Parameters":[{"Name":"swipeDirection","Type":{"Category":"Enum","Name":"SwipeDirection"}},{"Name":"numberOfTouches","Type":{"Category":"Primitive","Name":"int"}},{"Name":"gameProcessedEvent","Type":{"Category":"Primitive","Name":"bool"}}],"Security":"None"},{"MemberType":"Event","Name":"TouchTap","Parameters":[{"Name":"touchPositions","Type":{"Category":"Group","Name":"Array"}},{"Name":"gameProcessedEvent","Type":{"Category":"Primitive","Name":"bool"}}],"Security":"None"},{"MemberType":"Event","Name":"TouchTapInWorld","Parameters":[{"Name":"position","Type":{"Category":"DataType","Name":"Vector2"}},{"Name":"processedByUI","Type":{"Category":"Primitive","Name":"bool"}}],"Security":"None"},{"MemberType":"Event","Name":"UserCFrameChanged","Parameters":[{"Name":"type","Type":{"Category":"Enum","Name":"UserCFrame"}},{"Name":"value","Type":{"Category":"DataType","Name":"CFrame"}}],"Security":"None"},{"MemberType":"Event","Name":"WindowFocusReleased","Parameters":[],"Security":"None"},{"MemberType":"Event","Name":"WindowFocused","Parameters":[],"Security":"None"}],"MemoryCategory":"Instances","Name":"UserInputService","Superclass":"Instance","Tags":["NotCreatable","Service","NotReplicated"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"GuiInputUserCFrame","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":false},"ValueType":{"Category":"Enum","Name":"UserCFrame"}},{"Category":"Data","MemberType":"Property","Name":"VRDeviceName","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":false,"CanSave":false},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"string"}},{"Category":"Data","MemberType":"Property","Name":"VREnabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":false,"CanSave":true},"Tags":["ReadOnly","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"bool"}},{"MemberType":"Function","Name":"GetTouchpadMode","Parameters":[{"Name":"pad","Type":{"Category":"Enum","Name":"VRTouchpad"}}],"ReturnType":{"Category":"Enum","Name":"VRTouchpadMode"},"Security":"None"},{"MemberType":"Function","Name":"GetUserCFrame","Parameters":[{"Name":"type","Type":{"Category":"Enum","Name":"UserCFrame"}}],"ReturnType":{"Category":"DataType","Name":"CFrame"},"Security":"None"},{"MemberType":"Function","Name":"GetUserCFrameEnabled","Parameters":[{"Name":"type","Type":{"Category":"Enum","Name":"UserCFrame"}}],"ReturnType":{"Category":"Primitive","Name":"bool"},"Security":"None"},{"MemberType":"Function","Name":"RecenterUserHeadCFrame","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"RequestNavigation","Parameters":[{"Name":"cframe","Type":{"Category":"DataType","Name":"CFrame"}},{"Name":"inputUserCFrame","Type":{"Category":"Enum","Name":"UserCFrame"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Function","Name":"SetTouchpadMode","Parameters":[{"Name":"pad","Type":{"Category":"Enum","Name":"VRTouchpad"}},{"Name":"mode","Type":{"Category":"Enum","Name":"VRTouchpadMode"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"None"},{"MemberType":"Event","Name":"NavigationRequested","Parameters":[{"Name":"cframe","Type":{"Category":"DataType","Name":"CFrame"}},{"Name":"inputUserCFrame","Type":{"Category":"Enum","Name":"UserCFrame"}}],"Security":"None"},{"MemberType":"Event","Name":"TouchpadModeChanged","Parameters":[{"Name":"pad","Type":{"Category":"Enum","Name":"VRTouchpad"}},{"Name":"mode","Type":{"Category":"Enum","Name":"VRTouchpadMode"}}],"Security":"None"},{"MemberType":"Event","Name":"UserCFrameChanged","Parameters":[{"Name":"type","Type":{"Category":"Enum","Name":"UserCFrame"}},{"Name":"value","Type":{"Category":"DataType","Name":"CFrame"}}],"Security":"None"},{"MemberType":"Event","Name":"UserCFrameEnabled","Parameters":[{"Name":"type","Type":{"Category":"Enum","Name":"UserCFrame"}},{"Name":"enabled","Type":{"Category":"Primitive","Name":"bool"}}],"Security":"None"}],"MemoryCategory":"Instances","Name":"VRService","Superclass":"Instance","Tags":["NotCreatable","Service"]},{"Members":[],"MemoryCategory":"Instances","Name":"ValueBase","Superclass":"Instance","Tags":["NotCreatable"]},{"Members":[{"MemberType":"Event","Name":"Changed","Parameters":[{"Name":"value","Type":{"Category":"DataType","Name":"BinaryString"}}],"Security":"None"}],"MemoryCategory":"Instances","Name":"BinaryStringValue","Superclass":"ValueBase"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Value","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"MemberType":"Event","Name":"Changed","Parameters":[{"Name":"value","Type":{"Category":"Primitive","Name":"bool"}}],"Security":"None"},{"MemberType":"Event","Name":"changed","Parameters":[{"Name":"value","Type":{"Category":"Primitive","Name":"bool"}}],"Security":"None","Tags":["Deprecated"]}],"MemoryCategory":"Instances","Name":"BoolValue","Superclass":"ValueBase"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Value","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"BrickColor"}},{"MemberType":"Event","Name":"Changed","Parameters":[{"Name":"value","Type":{"Category":"DataType","Name":"BrickColor"}}],"Security":"None"},{"MemberType":"Event","Name":"changed","Parameters":[{"Name":"value","Type":{"Category":"DataType","Name":"BrickColor"}}],"Security":"None","Tags":["Deprecated"]}],"MemoryCategory":"Instances","Name":"BrickColorValue","Superclass":"ValueBase"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Value","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"CFrame"}},{"MemberType":"Event","Name":"Changed","Parameters":[{"Name":"value","Type":{"Category":"DataType","Name":"CFrame"}}],"Security":"None"},{"MemberType":"Event","Name":"changed","Parameters":[{"Name":"value","Type":{"Category":"DataType","Name":"CFrame"}}],"Security":"None","Tags":["Deprecated"]}],"MemoryCategory":"Instances","Name":"CFrameValue","Superclass":"ValueBase"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Value","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Color3"}},{"MemberType":"Event","Name":"Changed","Parameters":[{"Name":"value","Type":{"Category":"DataType","Name":"Color3"}}],"Security":"None"},{"MemberType":"Event","Name":"changed","Parameters":[{"Name":"value","Type":{"Category":"DataType","Name":"Color3"}}],"Security":"None","Tags":["Deprecated"]}],"MemoryCategory":"Instances","Name":"Color3Value","Superclass":"ValueBase"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"ConstrainedValue","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["Hidden","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"double"}},{"Category":"Data","MemberType":"Property","Name":"MaxValue","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"double"}},{"Category":"Data","MemberType":"Property","Name":"MinValue","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"double"}},{"Category":"Data","MemberType":"Property","Name":"Value","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"Primitive","Name":"double"}},{"MemberType":"Event","Name":"Changed","Parameters":[{"Name":"value","Type":{"Category":"Primitive","Name":"double"}}],"Security":"None"},{"MemberType":"Event","Name":"changed","Parameters":[{"Name":"value","Type":{"Category":"Primitive","Name":"double"}}],"Security":"None","Tags":["Deprecated"]}],"MemoryCategory":"Instances","Name":"DoubleConstrainedValue","Superclass":"ValueBase","Tags":["Deprecated"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"ConstrainedValue","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["Hidden","NotReplicated"],"ValueType":{"Category":"Primitive","Name":"int64"}},{"Category":"Data","MemberType":"Property","Name":"MaxValue","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int64"}},{"Category":"Data","MemberType":"Property","Name":"MinValue","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int64"}},{"Category":"Data","MemberType":"Property","Name":"Value","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"Primitive","Name":"int64"}},{"MemberType":"Event","Name":"Changed","Parameters":[{"Name":"value","Type":{"Category":"Primitive","Name":"int64"}}],"Security":"None"},{"MemberType":"Event","Name":"changed","Parameters":[{"Name":"value","Type":{"Category":"Primitive","Name":"int64"}}],"Security":"None","Tags":["Deprecated"]}],"MemoryCategory":"Instances","Name":"IntConstrainedValue","Superclass":"ValueBase","Tags":["Deprecated"]},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Value","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"int64"}},{"MemberType":"Event","Name":"Changed","Parameters":[{"Name":"value","Type":{"Category":"Primitive","Name":"int64"}}],"Security":"None"},{"MemberType":"Event","Name":"changed","Parameters":[{"Name":"value","Type":{"Category":"Primitive","Name":"int64"}}],"Security":"None","Tags":["Deprecated"]}],"MemoryCategory":"Instances","Name":"IntValue","Superclass":"ValueBase"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Value","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"double"}},{"MemberType":"Event","Name":"Changed","Parameters":[{"Name":"value","Type":{"Category":"Primitive","Name":"double"}}],"Security":"None"},{"MemberType":"Event","Name":"changed","Parameters":[{"Name":"value","Type":{"Category":"Primitive","Name":"double"}}],"Security":"None","Tags":["Deprecated"]}],"MemoryCategory":"Instances","Name":"NumberValue","Superclass":"ValueBase"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Value","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Class","Name":"Instance"}},{"MemberType":"Event","Name":"Changed","Parameters":[{"Name":"value","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None"},{"MemberType":"Event","Name":"changed","Parameters":[{"Name":"value","Type":{"Category":"Class","Name":"Instance"}}],"Security":"None","Tags":["Deprecated"]}],"MemoryCategory":"Instances","Name":"ObjectValue","Superclass":"ValueBase"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Value","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Ray"}},{"MemberType":"Event","Name":"Changed","Parameters":[{"Name":"value","Type":{"Category":"DataType","Name":"Ray"}}],"Security":"None"},{"MemberType":"Event","Name":"changed","Parameters":[{"Name":"value","Type":{"Category":"DataType","Name":"Ray"}}],"Security":"None","Tags":["Deprecated"]}],"MemoryCategory":"Instances","Name":"RayValue","Superclass":"ValueBase"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Value","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"string"}},{"MemberType":"Event","Name":"Changed","Parameters":[{"Name":"value","Type":{"Category":"Primitive","Name":"string"}}],"Security":"None"},{"MemberType":"Event","Name":"changed","Parameters":[{"Name":"value","Type":{"Category":"Primitive","Name":"string"}}],"Security":"None","Tags":["Deprecated"]}],"MemoryCategory":"Instances","Name":"StringValue","Superclass":"ValueBase"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"Value","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"DataType","Name":"Vector3"}},{"MemberType":"Event","Name":"Changed","Parameters":[{"Name":"value","Type":{"Category":"DataType","Name":"Vector3"}}],"Security":"None"},{"MemberType":"Event","Name":"changed","Parameters":[{"Name":"value","Type":{"Category":"DataType","Name":"Vector3"}}],"Security":"None","Tags":["Deprecated"]}],"MemoryCategory":"Instances","Name":"Vector3Value","Superclass":"ValueBase"},{"Members":[{"Category":"Data","MemberType":"Property","Name":"AdditionalLuaState","Security":{"Read":"RobloxScriptSecurity","Write":"RobloxScriptSecurity"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"Primitive","Name":"string"}},{"MemberType":"Function","Name":"Dump","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"HandleGamepadAxisInput","Parameters":[{"Name":"objectId","Type":{"Category":"Primitive","Name":"int"}},{"Name":"keyCode","Type":{"Category":"Enum","Name":"KeyCode"}},{"Name":"x","Type":{"Category":"Primitive","Name":"float"}},{"Name":"y","Type":{"Category":"Primitive","Name":"float"}},{"Name":"z","Type":{"Category":"Primitive","Name":"float"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"HandleGamepadButtonInput","Parameters":[{"Name":"deviceId","Type":{"Category":"Primitive","Name":"int"}},{"Name":"keyCode","Type":{"Category":"Enum","Name":"KeyCode"}},{"Name":"buttonState","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"HandleGamepadConnect","Parameters":[{"Name":"deviceId","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"HandleGamepadDisconnect","Parameters":[{"Name":"deviceId","Type":{"Category":"Primitive","Name":"int"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"SendAccelerometerEvent","Parameters":[{"Name":"x","Type":{"Category":"Primitive","Name":"float"}},{"Name":"y","Type":{"Category":"Primitive","Name":"float"}},{"Name":"z","Type":{"Category":"Primitive","Name":"float"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"SendGravityEvent","Parameters":[{"Name":"x","Type":{"Category":"Primitive","Name":"float"}},{"Name":"y","Type":{"Category":"Primitive","Name":"float"}},{"Name":"z","Type":{"Category":"Primitive","Name":"float"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"SendGyroscopeEvent","Parameters":[{"Name":"quatX","Type":{"Category":"Primitive","Name":"float"}},{"Name":"quatY","Type":{"Category":"Primitive","Name":"float"}},{"Name":"quatZ","Type":{"Category":"Primitive","Name":"float"}},{"Name":"quatW","Type":{"Category":"Primitive","Name":"float"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"SendKeyEvent","Parameters":[{"Name":"isPressed","Type":{"Category":"Primitive","Name":"bool"}},{"Name":"keyCode","Type":{"Category":"Enum","Name":"KeyCode"}},{"Name":"isRepeatedKey","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"SendMouseButtonEvent","Parameters":[{"Name":"x","Type":{"Category":"Primitive","Name":"int"}},{"Name":"y","Type":{"Category":"Primitive","Name":"int"}},{"Name":"mouseButton","Type":{"Category":"Primitive","Name":"int"}},{"Name":"isDown","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"SendMouseMoveEvent","Parameters":[{"Name":"x","Type":{"Category":"Primitive","Name":"float"}},{"Name":"y","Type":{"Category":"Primitive","Name":"float"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"SendMouseWheelEvent","Parameters":[{"Name":"x","Type":{"Category":"Primitive","Name":"float"}},{"Name":"y","Type":{"Category":"Primitive","Name":"float"}},{"Name":"isForwardScroll","Type":{"Category":"Primitive","Name":"bool"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"SendTextInputCharacterEvent","Parameters":[{"Name":"str","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"SendTouchEvent","Parameters":[{"Name":"touchId","Type":{"Category":"Primitive","Name":"int64"}},{"Name":"state","Type":{"Category":"Primitive","Name":"int"}},{"Name":"x","Type":{"Category":"Primitive","Name":"float"}},{"Name":"y","Type":{"Category":"Primitive","Name":"float"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"StartPlaying","Parameters":[{"Name":"fileName","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"StartRecording","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Function","Name":"StopRecording","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"RobloxScriptSecurity"},{"MemberType":"Event","Name":"PlaybackCompleted","Parameters":[{"Name":"additionalLuaState","Type":{"Category":"Primitive","Name":"string"}}],"Security":"RobloxScriptSecurity"},{"MemberType":"Event","Name":"RecordingCompleted","Parameters":[{"Name":"result","Type":{"Category":"Primitive","Name":"string"}}],"Security":"RobloxScriptSecurity"}],"MemoryCategory":"Instances","Name":"VirtualInputManager","Superclass":"Instance","Tags":["Service"]},{"Members":[{"MemberType":"Function","Name":"Button1Down","Parameters":[{"Name":"position","Type":{"Category":"DataType","Name":"Vector2"}},{"Default":"Identity","Name":"camera","Type":{"Category":"DataType","Name":"CFrame"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"LocalUserSecurity"},{"MemberType":"Function","Name":"Button1Up","Parameters":[{"Name":"position","Type":{"Category":"DataType","Name":"Vector2"}},{"Default":"Identity","Name":"camera","Type":{"Category":"DataType","Name":"CFrame"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"LocalUserSecurity"},{"MemberType":"Function","Name":"Button2Down","Parameters":[{"Name":"position","Type":{"Category":"DataType","Name":"Vector2"}},{"Default":"Identity","Name":"camera","Type":{"Category":"DataType","Name":"CFrame"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"LocalUserSecurity"},{"MemberType":"Function","Name":"Button2Up","Parameters":[{"Name":"position","Type":{"Category":"DataType","Name":"Vector2"}},{"Default":"Identity","Name":"camera","Type":{"Category":"DataType","Name":"CFrame"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"LocalUserSecurity"},{"MemberType":"Function","Name":"CaptureController","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"LocalUserSecurity"},{"MemberType":"Function","Name":"ClickButton1","Parameters":[{"Name":"position","Type":{"Category":"DataType","Name":"Vector2"}},{"Default":"Identity","Name":"camera","Type":{"Category":"DataType","Name":"CFrame"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"LocalUserSecurity"},{"MemberType":"Function","Name":"ClickButton2","Parameters":[{"Name":"position","Type":{"Category":"DataType","Name":"Vector2"}},{"Default":"Identity","Name":"camera","Type":{"Category":"DataType","Name":"CFrame"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"LocalUserSecurity"},{"MemberType":"Function","Name":"MoveMouse","Parameters":[{"Name":"position","Type":{"Category":"DataType","Name":"Vector2"}},{"Default":"Identity","Name":"camera","Type":{"Category":"DataType","Name":"CFrame"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"LocalUserSecurity"},{"MemberType":"Function","Name":"SetKeyDown","Parameters":[{"Name":"key","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"LocalUserSecurity"},{"MemberType":"Function","Name":"SetKeyUp","Parameters":[{"Name":"key","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"LocalUserSecurity"},{"MemberType":"Function","Name":"StartRecording","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"LocalUserSecurity"},{"MemberType":"Function","Name":"StopRecording","Parameters":[],"ReturnType":{"Category":"Primitive","Name":"string"},"Security":"LocalUserSecurity"},{"MemberType":"Function","Name":"TypeKey","Parameters":[{"Name":"key","Type":{"Category":"Primitive","Name":"string"}}],"ReturnType":{"Category":"Primitive","Name":"void"},"Security":"LocalUserSecurity"}],"MemoryCategory":"Instances","Name":"VirtualUser","Superclass":"Instance","Tags":["NotCreatable","Service","NotReplicated"]},{"Members":[],"MemoryCategory":"Instances","Name":"Visit","Superclass":"Instance","Tags":["NotCreatable","Service","NotReplicated"]},{"Members":[{"Category":"Behavior","MemberType":"Property","Name":"Enabled","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":true},"ValueType":{"Category":"Primitive","Name":"bool"}},{"Category":"Parts","MemberType":"Property","Name":"Part0","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"Class","Name":"BasePart"}},{"Category":"Parts","MemberType":"Property","Name":"Part1","Security":{"Read":"None","Write":"None"},"Serialization":{"CanLoad":true,"CanSave":false},"Tags":["NotReplicated"],"ValueType":{"Category":"Class","Name":"BasePart"}}],"MemoryCategory":"Instances","Name":"WeldConstraint","Superclass":"Instance"}],"Enums":[{"Items":[{"Name":"Nothing","Value":0},{"Name":"Pause","Value":1},{"Name":"Lose","Value":2},{"Name":"Draw","Value":3},{"Name":"Win","Value":4}],"Name":"ActionType"},{"Items":[{"Name":"Attachment0","Value":0},{"Name":"Attachment1","Value":1},{"Name":"World","Value":2}],"Name":"ActuatorRelativeTo"},{"Items":[{"Name":"None","Value":0},{"Name":"Motor","Value":1},{"Name":"Servo","Value":2}],"Name":"ActuatorType"},{"Items":[{"Name":"Idle","Value":0},{"Name":"Movement","Value":1},{"Name":"Action","Value":2},{"Name":"Core","Value":1000}],"Name":"AnimationPriority"},{"Items":[{"Name":"None","Value":0},{"Name":"OpenApp","Value":1},{"Name":"TapChatTab","Value":2},{"Name":"TapConversationEntry","Value":3},{"Name":"TapAvatarTab","Value":4},{"Name":"ReadConversation","Value":5},{"Name":"TapGamePageTab","Value":6},{"Name":"TapHomePageTab","Value":7},{"Name":"GamePageLoaded","Value":8},{"Name":"HomePageLoaded","Value":9},{"Name":"AvatarEditorPageLoaded","Value":10}],"Name":"AppShellActionType"},{"Items":[{"Name":"FitWithinMaxSize","Value":0},{"Name":"ScaleWithParentSize","Value":1}],"Name":"AspectType"},{"Items":[{"Name":"Image","Value":1},{"Name":"TeeShirt","Value":2},{"Name":"Audio","Value":3},{"Name":"Mesh","Value":4},{"Name":"Lua","Value":5},{"Name":"Hat","Value":8},{"Name":"Place","Value":9},{"Name":"Model","Value":10},{"Name":"Shirt","Value":11},{"Name":"Pants","Value":12},{"Name":"Decal","Value":13},{"Name":"Head","Value":17},{"Name":"Face","Value":18},{"Name":"Gear","Value":19},{"Name":"Badge","Value":21},{"Name":"Animation","Value":24},{"Name":"Torso","Value":27},{"Name":"RightArm","Value":28},{"Name":"LeftArm","Value":29},{"Name":"LeftLeg","Value":30},{"Name":"RightLeg","Value":31},{"Name":"Package","Value":32},{"Name":"GamePass","Value":34},{"Name":"Plugin","Value":38},{"Name":"MeshPart","Value":40},{"Name":"HairAccessory","Value":41},{"Name":"FaceAccessory","Value":42},{"Name":"NeckAccessory","Value":43},{"Name":"ShoulderAccessory","Value":44},{"Name":"FrontAccessory","Value":45},{"Name":"BackAccessory","Value":46},{"Name":"WaistAccessory","Value":47},{"Name":"ClimbAnimation","Value":48},{"Name":"DeathAnimation","Value":49},{"Name":"FallAnimation","Value":50},{"Name":"IdleAnimation","Value":51},{"Name":"JumpAnimation","Value":52},{"Name":"RunAnimation","Value":53},{"Name":"SwimAnimation","Value":54},{"Name":"WalkAnimation","Value":55},{"Name":"PoseAnimation","Value":56},{"Name":"EarAccessory","Value":57},{"Name":"EyeAccessory","Value":58}],"Name":"AssetType"},{"Items":[{"Name":"Default","Value":0},{"Name":"Explicit","Value":1},{"Name":"LegacyImplicit","Value":2}],"Name":"AutoJointsMode"},{"Items":[{"Name":"Friend","Value":0},{"Name":"Chat","Value":1},{"Name":"Emote","Value":2}],"Name":"AvatarContextMenuOption"},{"Items":[{"Name":"Fixed","Value":0},{"Name":"ArtistIntent","Value":1}],"Name":"AvatarJointPositionType"},{"Items":[{"Name":"X","Value":0},{"Name":"Y","Value":1},{"Name":"Z","Value":2}],"Name":"Axis"},{"Items":[{"Name":"Script","Value":0},{"Name":"GameTool","Value":1},{"Name":"Grab","Value":2},{"Name":"Clone","Value":3},{"Name":"Hammer","Value":4}],"Name":"BinType"},{"Items":[{"Name":"Head","Value":0},{"Name":"Torso","Value":1},{"Name":"LeftArm","Value":2},{"Name":"RightArm","Value":3},{"Name":"LeftLeg","Value":4},{"Name":"RightLeg","Value":5}],"Name":"BodyPart"},{"Items":[{"Name":"Head","Value":0},{"Name":"UpperTorso","Value":1},{"Name":"LowerTorso","Value":2},{"Name":"LeftFoot","Value":3},{"Name":"LeftLowerLeg","Value":4},{"Name":"LeftUpperLeg","Value":5},{"Name":"RightFoot","Value":6},{"Name":"RightLowerLeg","Value":7},{"Name":"RightUpperLeg","Value":8},{"Name":"LeftHand","Value":9},{"Name":"LeftLowerArm","Value":10},{"Name":"LeftUpperArm","Value":11},{"Name":"RightHand","Value":12},{"Name":"RightLowerArm","Value":13},{"Name":"RightUpperArm","Value":14},{"Name":"RootPart","Value":15},{"Name":"Unknown","Value":17}],"Name":"BodyPartR15"},{"Items":[{"Name":"Jump","Value":32},{"Name":"Dismount","Value":8}],"Name":"Button"},{"Items":[{"Name":"Custom","Value":0},{"Name":"RobloxButtonDefault","Value":1},{"Name":"RobloxButton","Value":2},{"Name":"RobloxRoundButton","Value":3},{"Name":"RobloxRoundDefaultButton","Value":4},{"Name":"RobloxRoundDropdownButton","Value":5}],"Name":"ButtonStyle"},{"Items":[{"Name":"Classic","Value":0},{"Name":"LockFirstPerson","Value":1}],"Name":"CameraMode"},{"Items":[{"Name":"Classic","Value":0},{"Name":"EdgeBump","Value":1}],"Name":"CameraPanMode"},{"Items":[{"Name":"Fixed","Value":0},{"Name":"Watch","Value":2},{"Name":"Attach","Value":1},{"Name":"Track","Value":3},{"Name":"Follow","Value":4},{"Name":"Custom","Value":5},{"Name":"Scriptable","Value":6},{"Name":"Orbital","Value":7}],"Name":"CameraType"},{"Items":[{"Name":"Solid","Value":0},{"Name":"VerticalWedge","Value":1},{"Name":"CornerWedge","Value":2},{"Name":"InverseCornerWedge","Value":3},{"Name":"HorizontalWedge","Value":4}],"Name":"CellBlock"},{"Items":[{"Name":"Empty","Value":0},{"Name":"Grass","Value":1},{"Name":"Sand","Value":2},{"Name":"Brick","Value":3},{"Name":"Granite","Value":4},{"Name":"Asphalt","Value":5},{"Name":"Iron","Value":6},{"Name":"Aluminum","Value":7},{"Name":"Gold","Value":8},{"Name":"WoodPlank","Value":9},{"Name":"WoodLog","Value":10},{"Name":"Gravel","Value":11},{"Name":"CinderBlock","Value":12},{"Name":"MossyStone","Value":13},{"Name":"Cement","Value":14},{"Name":"RedPlastic","Value":15},{"Name":"BluePlastic","Value":16},{"Name":"Water","Value":17}],"Name":"CellMaterial"},{"Items":[{"Name":"NegZ","Value":0},{"Name":"X","Value":1},{"Name":"Z","Value":2},{"Name":"NegX","Value":3}],"Name":"CellOrientation"},{"Items":[{"Name":"UnsolicitedDialog","Value":1},{"Name":"PlayerInitiatedDialog","Value":2},{"Name":"ModalDialog","Value":3},{"Name":"QuitDialog","Value":4}],"Name":"CenterDialogType"},{"Items":[{"Name":"Blue","Value":0},{"Name":"Green","Value":1},{"Name":"Red","Value":2},{"Name":"White","Value":3}],"Name":"ChatColor"},{"Items":[{"Name":"Menu","Value":0},{"Name":"TextAndMenu","Value":1}],"Name":"ChatMode"},{"Items":[{"Name":"AllUsers","Value":0},{"Name":"NoOne","Value":1},{"Name":"Friends","Value":2}],"Name":"ChatPrivacyMode"},{"Items":[{"Name":"Classic","Value":0},{"Name":"Bubble","Value":1},{"Name":"ClassicAndBubble","Value":2}],"Name":"ChatStyle"},{"Items":[{"Name":"Default","Value":0},{"Name":"Hull","Value":1},{"Name":"Box","Value":2}],"Name":"CollisionFidelity"},{"Items":[{"Name":"Default","Value":0},{"Name":"Follow","Value":2},{"Name":"Classic","Value":1},{"Name":"Orbital","Value":3}],"Name":"ComputerCameraMovementMode"},{"Items":[{"Name":"Default","Value":0},{"Name":"KeyboardMouse","Value":1},{"Name":"ClickToMove","Value":2}],"Name":"ComputerMovementMode"},{"Items":[{"Name":"OK","Value":0},{"Name":"DisconnectErrors","Value":256},{"Name":"DisconnectBadhash","Value":257},{"Name":"DisconnectSecurityKeyMismatch","Value":258},{"Name":"DisconnectNewSecurityKeyMismatch","Value":272},{"Name":"DisconnectProtocolMismatch","Value":259},{"Name":"DisconnectReceivePacketError","Value":260},{"Name":"DisconnectReceivePacketStreamError","Value":261},{"Name":"DisconnectSendPacketError","Value":262},{"Name":"DisconnectIllegalTeleport","Value":263},{"Name":"DisconnectDuplicatePlayer","Value":264},{"Name":"DisconnectDuplicateTicket","Value":265},{"Name":"DisconnectTimeout","Value":266},{"Name":"DisconnectLuaKick","Value":267},{"Name":"DisconnectOnRemoteSysStats","Value":268},{"Name":"DisconnectHashTimeout","Value":269},{"Name":"DisconnectCloudEditKick","Value":270},{"Name":"DisconnectPlayerless","Value":271},{"Name":"DisconnectEvicted","Value":273},{"Name":"DisconnectDevMaintenance","Value":274},{"Name":"DisconnectRobloxMaintenance","Value":275},{"Name":"DisconnectRejoin","Value":276},{"Name":"DisconnectConnectionLost","Value":277},{"Name":"PlacelaunchErrors","Value":512},{"Name":"PlacelaunchDisabled","Value":515},{"Name":"PlacelauchError","Value":516},{"Name":"PlacelaunchGameEnded","Value":517},{"Name":"PlacelaunchGameFull","Value":518},{"Name":"PlacelaunchUserLeft","Value":522},{"Name":"PlacelaunchRestricted","Value":523},{"Name":"PlacelaunchUnauthorized","Value":524},{"Name":"PlacelaunchFlooded","Value":525},{"Name":"PlacelaunchHashExpired","Value":526},{"Name":"PlacelaunchHashException","Value":527},{"Name":"PlacelaunchPartyCannotFit","Value":528},{"Name":"PlacelaunchHttpError","Value":529},{"Name":"PlacelaunchCustomMessage","Value":610},{"Name":"PlacelaunchOtherError","Value":611},{"Name":"TeleportErrors","Value":768},{"Name":"TeleportFailure","Value":769},{"Name":"TeleportGameNotFound","Value":770},{"Name":"TeleportGameEnded","Value":771},{"Name":"TeleportGameFull","Value":772},{"Name":"TeleportUnauthorized","Value":773},{"Name":"TeleportFlooded","Value":774},{"Name":"TeleportIsTeleporting","Value":775}],"Name":"ConnectionError"},{"Items":[{"Name":"Connected","Value":0},{"Name":"Disconnected","Value":1}],"Name":"ConnectionState"},{"Items":[{"Name":"Low","Value":1000},{"Name":"Medium","Value":2000},{"Name":"Default","Value":2000},{"Name":"High","Value":3000}],"Name":"ContextActionPriority"},{"Items":[{"Name":"Pass","Value":1},{"Name":"Sink","Value":0}],"Name":"ContextActionResult"},{"Items":[{"Name":"MouseLockSwitch","Value":1},{"Name":"Classic","Value":0}],"Name":"ControlMode"},{"Items":[{"Name":"PlayerList","Value":0},{"Name":"Health","Value":1},{"Name":"Backpack","Value":2},{"Name":"Chat","Value":3},{"Name":"All","Value":4}],"Name":"CoreGuiType"},{"Items":[{"Name":"User","Value":0},{"Name":"Group","Value":1}],"Name":"CreatorType"},{"Items":[{"Name":"Default","Value":0},{"Name":"Robux","Value":1},{"Name":"Tix","Value":2}],"Name":"CurrencyType"},{"Items":[{"Name":"Default","Value":0},{"Name":"Follow","Value":2},{"Name":"Classic","Value":1}],"Name":"CustomCameraMode"},{"Items":[{"Name":"GetAsync","Value":0},{"Name":"SetIncrementAsync","Value":1},{"Name":"UpdateAsync","Value":2},{"Name":"GetSortedAsync","Value":3},{"Name":"SetIncrementSortedAsync","Value":4},{"Name":"OnUpdate","Value":5}],"Name":"DataStoreRequestType"},{"Items":[{"Name":"Zoom","Value":0},{"Name":"Invisicam","Value":1}],"Name":"DevCameraOcclusionMode"},{"Items":[{"Name":"UserChoice","Value":0},{"Name":"Classic","Value":1},{"Name":"Follow","Value":2},{"Name":"Orbital","Value":3}],"Name":"DevComputerCameraMovementMode"},{"Items":[{"Name":"UserChoice","Value":0},{"Name":"KeyboardMouse","Value":1},{"Name":"ClickToMove","Value":2},{"Name":"Scriptable","Value":3}],"Name":"DevComputerMovementMode"},{"Items":[{"Name":"UserChoice","Value":0},{"Name":"Classic","Value":1},{"Name":"Follow","Value":2},{"Name":"Orbital","Value":3}],"Name":"DevTouchCameraMovementMode"},{"Items":[{"Name":"UserChoice","Value":0},{"Name":"Thumbstick","Value":1},{"Name":"DPad","Value":2},{"Name":"Thumbpad","Value":3},{"Name":"ClickToMove","Value":4},{"Name":"Scriptable","Value":5},{"Name":"DynamicThumbstick","Value":6}],"Name":"DevTouchMovementMode"},{"Items":[{"Name":"Internal","Value":0},{"Name":"HttpCache","Value":1},{"Name":"Instances","Value":2},{"Name":"Signals","Value":3},{"Name":"LuaHeap","Value":4},{"Name":"Script","Value":5},{"Name":"PhysicsCollision","Value":6},{"Name":"PhysicsParts","Value":7},{"Name":"GraphicsSolidModels","Value":8},{"Name":"GraphicsMeshParts","Value":9},{"Name":"GraphicsParticles","Value":10},{"Name":"GraphicsParts","Value":11},{"Name":"GraphicsSpatialHash","Value":12},{"Name":"GraphicsTerrain","Value":13},{"Name":"GraphicsTexture","Value":14},{"Name":"GraphicsTextureCharacter","Value":15},{"Name":"Sounds","Value":16},{"Name":"StreamingSounds","Value":17},{"Name":"TerrainVoxels","Value":18},{"Name":"Gui","Value":20},{"Name":"Animation","Value":21},{"Name":"Navigation","Value":22}],"Name":"DeveloperMemoryTag"},{"Items":[{"Name":"SinglePlayer","Value":0},{"Name":"MultiplePlayers","Value":1}],"Name":"DialogBehaviorType"},{"Items":[{"Name":"Quest","Value":0},{"Name":"Help","Value":1},{"Name":"Shop","Value":2}],"Name":"DialogPurpose"},{"Items":[{"Name":"Neutral","Value":0},{"Name":"Friendly","Value":1},{"Name":"Enemy","Value":2}],"Name":"DialogTone"},{"Items":[{"Name":"Width","Value":0},{"Name":"Height","Value":1}],"Name":"DominantAxis"},{"Items":[{"Name":"In","Value":0},{"Name":"Out","Value":1},{"Name":"InOut","Value":2}],"Name":"EasingDirection"},{"Items":[{"Name":"Linear","Value":0},{"Name":"Sine","Value":1},{"Name":"Back","Value":2},{"Name":"Quad","Value":3},{"Name":"Quart","Value":4},{"Name":"Quint","Value":5},{"Name":"Bounce","Value":6},{"Name":"Elastic","Value":7}],"Name":"EasingStyle"},{"Items":[{"Name":"WhenScrollable","Value":0},{"Name":"Always","Value":1},{"Name":"Never","Value":2}],"Name":"ElasticBehavior"},{"Items":[{"Name":"DefaultAuto","Value":0},{"Name":"Disabled","Value":1},{"Name":"Always","Value":2},{"Name":"Skip2","Value":3},{"Name":"Skip4","Value":4},{"Name":"Skip8","Value":5},{"Name":"Skip16","Value":6}],"Name":"EnviromentalPhysicsThrottle"},{"Items":[{"Name":"DontReport","Value":0},{"Name":"Prompt","Value":1},{"Name":"Report","Value":2}],"Name":"ErrorReporting"},{"Items":[{"Name":"NoCraters","Value":0},{"Name":"Craters","Value":1},{"Name":"CratersAndDebris","Value":2}],"Name":"ExplosionType"},{"Items":[{"Name":"Horizontal","Value":0},{"Name":"Vertical","Value":1}],"Name":"FillDirection"},{"Items":[{"Name":"Rejected","Value":1},{"Name":"Accepted","Value":0}],"Name":"FilterResult"},{"Items":[{"Name":"Legacy","Value":0},{"Name":"Arial","Value":1},{"Name":"ArialBold","Value":2},{"Name":"SourceSans","Value":3},{"Name":"SourceSansBold","Value":4},{"Name":"SourceSansSemibold","Value":16},{"Name":"SourceSansLight","Value":5},{"Name":"SourceSansItalic","Value":6},{"Name":"Bodoni","Value":7},{"Name":"Garamond","Value":8},{"Name":"Cartoon","Value":9},{"Name":"Code","Value":10},{"Name":"Highway","Value":11},{"Name":"SciFi","Value":12},{"Name":"Arcade","Value":13},{"Name":"Fantasy","Value":14},{"Name":"Antique","Value":15}],"Name":"Font"},{"Items":[{"Name":"Size8","Value":0},{"Name":"Size9","Value":1},{"Name":"Size10","Value":2},{"Name":"Size11","Value":3},{"Name":"Size12","Value":4},{"Name":"Size14","Value":5},{"Name":"Size18","Value":6},{"Name":"Size24","Value":7},{"Name":"Size36","Value":8},{"Name":"Size48","Value":9},{"Name":"Size28","Value":10},{"Name":"Size32","Value":11},{"Name":"Size42","Value":12},{"Name":"Size60","Value":13},{"Name":"Size96","Value":14}],"Name":"FontSize"},{"Items":[{"Name":"Symmetric","Value":0},{"Name":"Brick","Value":1},{"Name":"Plate","Value":2},{"Name":"Custom","Value":3}],"Name":"FormFactor"},{"Items":[{"Name":"Custom","Value":0},{"Name":"ChatBlue","Value":1},{"Name":"RobloxSquare","Value":2},{"Name":"RobloxRound","Value":3},{"Name":"ChatGreen","Value":4},{"Name":"ChatRed","Value":5},{"Name":"DropShadow","Value":6}],"Name":"FrameStyle"},{"Items":[{"Name":"Automatic","Value":0},{"Name":"On","Value":1},{"Name":"Off","Value":2}],"Name":"FramerateManagerMode"},{"Items":[{"Name":"Issue","Value":0},{"Name":"Revoke","Value":1},{"Name":"Accept","Value":2},{"Name":"Deny","Value":3}],"Name":"FriendRequestEvent"},{"Items":[{"Name":"Unknown","Value":0},{"Name":"NotFriend","Value":1},{"Name":"Friend","Value":2},{"Name":"FriendRequestSent","Value":3},{"Name":"FriendRequestReceived","Value":4}],"Name":"FriendStatus"},{"Items":[{"Name":"Passed","Value":0},{"Name":"Warning","Value":1},{"Name":"Error","Value":2}],"Name":"FunctionalTestResult"},{"Items":[{"Name":"R6","Value":0},{"Name":"R15","Value":1},{"Name":"PlayerChoice","Value":2}],"Name":"GameAvatarType"},{"Items":[{"Name":"AllGenres","Value":0},{"Name":"MatchingGenreOnly","Value":1}],"Name":"GearGenreSetting","Tags":["Deprecated"]},{"Items":[{"Name":"MeleeWeapons","Value":0},{"Name":"RangedWeapons","Value":1},{"Name":"Explosives","Value":2},{"Name":"PowerUps","Value":3},{"Name":"NavigationEnhancers","Value":4},{"Name":"MusicalInstruments","Value":5},{"Name":"SocialItems","Value":6},{"Name":"BuildingTools","Value":7},{"Name":"Transport","Value":8}],"Name":"GearType"},{"Items":[{"Name":"All","Value":0},{"Name":"TownAndCity","Value":1},{"Name":"Fantasy","Value":2},{"Name":"SciFi","Value":3},{"Name":"Ninja","Value":4},{"Name":"Scary","Value":5},{"Name":"Pirate","Value":6},{"Name":"Adventure","Value":7},{"Name":"Sports","Value":8},{"Name":"Funny","Value":9},{"Name":"WildWest","Value":10},{"Name":"War","Value":11},{"Name":"SkatePark","Value":12},{"Name":"Tutorial","Value":13}],"Name":"Genre","Tags":["Deprecated"]},{"Items":[{"Name":"Automatic","Value":1},{"Name":"Direct3D9","Value":3},{"Name":"Direct3D11","Value":2},{"Name":"OpenGL","Value":4},{"Name":"Metal","Value":5},{"Name":"Vulkan","Value":6},{"Name":"NoGraphics","Value":7}],"Name":"GraphicsMode"},{"Items":[{"Name":"Resize","Value":0},{"Name":"Movement","Value":1}],"Name":"HandlesStyle"},{"Items":[{"Name":"Center","Value":0},{"Name":"Left","Value":1},{"Name":"Right","Value":2}],"Name":"HorizontalAlignment"},{"Items":[{"Name":"VerySlow","Value":0},{"Name":"Slow","Value":1},{"Name":"Medium","Value":2},{"Name":"Fast","Value":3},{"Name":"VeryFast","Value":4}],"Name":"HoverAnimateSpeed"},{"Items":[{"Name":"ApplicationJson","Value":0},{"Name":"ApplicationXml","Value":1},{"Name":"ApplicationUrlEncoded","Value":2},{"Name":"TextPlain","Value":3},{"Name":"TextXml","Value":4}],"Name":"HttpContentType"},{"Items":[{"Name":"Default","Value":0},{"Name":"MarketplaceService","Value":2},{"Name":"Players","Value":7},{"Name":"Chat","Value":15},{"Name":"Avatar","Value":16}],"Name":"HttpRequestType"},{"Items":[{"Name":"Viewer","Value":0},{"Name":"Subject","Value":1},{"Name":"None","Value":2}],"Name":"HumanoidDisplayDistanceType"},{"Items":[{"Name":"DisplayWhenDamaged","Value":0},{"Name":"AlwaysOn","Value":1},{"Name":"AlwaysOff","Value":2}],"Name":"HumanoidHealthDisplayType"},{"Items":[{"Name":"R6","Value":0},{"Name":"R15","Value":1}],"Name":"HumanoidRigType"},{"Items":[{"Name":"FallingDown","Value":0},{"Name":"Running","Value":8},{"Name":"RunningNoPhysics","Value":10},{"Name":"Climbing","Value":12},{"Name":"StrafingNoPhysics","Value":11},{"Name":"Ragdoll","Value":1},{"Name":"GettingUp","Value":2},{"Name":"Jumping","Value":3},{"Name":"Landed","Value":7},{"Name":"Flying","Value":6},{"Name":"Freefall","Value":5},{"Name":"Seated","Value":13},{"Name":"PlatformStanding","Value":14},{"Name":"Dead","Value":15},{"Name":"Swimming","Value":4},{"Name":"Physics","Value":16},{"Name":"None","Value":18}],"Name":"HumanoidStateType"},{"Items":[{"Name":"Edge","Value":0},{"Name":"Inset","Value":1},{"Name":"Center","Value":2}],"Name":"InOut"},{"Items":[{"Name":"Asset","Value":0},{"Name":"Product","Value":1},{"Name":"GamePass","Value":2}],"Name":"InfoType"},{"Items":[{"Name":"Top","Value":0},{"Name":"Bottom","Value":1},{"Name":"Left","Value":2},{"Name":"Right","Value":3},{"Name":"Float","Value":4}],"Name":"InitialDockState"},{"Items":[{"Name":"NoInput","Value":0},{"Name":"LeftTread","Tags":["Deprecated"],"Value":1},{"Name":"RightTread","Tags":["Deprecated"],"Value":2},{"Name":"Steer","Tags":["Deprecated"],"Value":3},{"Name":"Throttle","Tags":["Deprecated"],"Value":4},{"Name":"UpDown","Tags":["Deprecated"],"Value":6},{"Name":"Action1","Tags":["Deprecated"],"Value":7},{"Name":"Action2","Tags":["Deprecated"],"Value":8},{"Name":"Action3","Tags":["Deprecated"],"Value":9},{"Name":"Action4","Tags":["Deprecated"],"Value":10},{"Name":"Action5","Tags":["Deprecated"],"Value":11},{"Name":"Constant","Value":12},{"Name":"Sin","Value":13}],"Name":"InputType"},{"Items":[{"Name":"All","Value":0},{"Name":"Surface","Value":1},{"Name":"None","Value":2}],"Name":"JointCreationMode"},{"Items":[{"Name":"None","Value":28},{"Name":"Rotate","Value":7},{"Name":"RotateP","Value":8},{"Name":"RotateV","Value":9},{"Name":"Glue","Value":10},{"Name":"Weld","Value":1},{"Name":"Snap","Value":3}],"Name":"JointType"},{"Items":[{"Name":"Unknown","Value":0},{"Name":"Backspace","Value":8},{"Name":"Tab","Value":9},{"Name":"Clear","Value":12},{"Name":"Return","Value":13},{"Name":"Pause","Value":19},{"Name":"Escape","Value":27},{"Name":"Space","Value":32},{"Name":"QuotedDouble","Value":34},{"Name":"Hash","Value":35},{"Name":"Dollar","Value":36},{"Name":"Percent","Value":37},{"Name":"Ampersand","Value":38},{"Name":"Quote","Value":39},{"Name":"LeftParenthesis","Value":40},{"Name":"RightParenthesis","Value":41},{"Name":"Asterisk","Value":42},{"Name":"Plus","Value":43},{"Name":"Comma","Value":44},{"Name":"Minus","Value":45},{"Name":"Period","Value":46},{"Name":"Slash","Value":47},{"Name":"Zero","Value":48},{"Name":"One","Value":49},{"Name":"Two","Value":50},{"Name":"Three","Value":51},{"Name":"Four","Value":52},{"Name":"Five","Value":53},{"Name":"Six","Value":54},{"Name":"Seven","Value":55},{"Name":"Eight","Value":56},{"Name":"Nine","Value":57},{"Name":"Colon","Value":58},{"Name":"Semicolon","Value":59},{"Name":"LessThan","Value":60},{"Name":"Equals","Value":61},{"Name":"GreaterThan","Value":62},{"Name":"Question","Value":63},{"Name":"At","Value":64},{"Name":"LeftBracket","Value":91},{"Name":"BackSlash","Value":92},{"Name":"RightBracket","Value":93},{"Name":"Caret","Value":94},{"Name":"Underscore","Value":95},{"Name":"Backquote","Value":96},{"Name":"A","Value":97},{"Name":"B","Value":98},{"Name":"C","Value":99},{"Name":"D","Value":100},{"Name":"E","Value":101},{"Name":"F","Value":102},{"Name":"G","Value":103},{"Name":"H","Value":104},{"Name":"I","Value":105},{"Name":"J","Value":106},{"Name":"K","Value":107},{"Name":"L","Value":108},{"Name":"M","Value":109},{"Name":"N","Value":110},{"Name":"O","Value":111},{"Name":"P","Value":112},{"Name":"Q","Value":113},{"Name":"R","Value":114},{"Name":"S","Value":115},{"Name":"T","Value":116},{"Name":"U","Value":117},{"Name":"V","Value":118},{"Name":"W","Value":119},{"Name":"X","Value":120},{"Name":"Y","Value":121},{"Name":"Z","Value":122},{"Name":"LeftCurly","Value":123},{"Name":"Pipe","Value":124},{"Name":"RightCurly","Value":125},{"Name":"Tilde","Value":126},{"Name":"Delete","Value":127},{"Name":"KeypadZero","Value":256},{"Name":"KeypadOne","Value":257},{"Name":"KeypadTwo","Value":258},{"Name":"KeypadThree","Value":259},{"Name":"KeypadFour","Value":260},{"Name":"KeypadFive","Value":261},{"Name":"KeypadSix","Value":262},{"Name":"KeypadSeven","Value":263},{"Name":"KeypadEight","Value":264},{"Name":"KeypadNine","Value":265},{"Name":"KeypadPeriod","Value":266},{"Name":"KeypadDivide","Value":267},{"Name":"KeypadMultiply","Value":268},{"Name":"KeypadMinus","Value":269},{"Name":"KeypadPlus","Value":270},{"Name":"KeypadEnter","Value":271},{"Name":"KeypadEquals","Value":272},{"Name":"Up","Value":273},{"Name":"Down","Value":274},{"Name":"Right","Value":275},{"Name":"Left","Value":276},{"Name":"Insert","Value":277},{"Name":"Home","Value":278},{"Name":"End","Value":279},{"Name":"PageUp","Value":280},{"Name":"PageDown","Value":281},{"Name":"LeftShift","Value":304},{"Name":"RightShift","Value":303},{"Name":"LeftMeta","Value":310},{"Name":"RightMeta","Value":309},{"Name":"LeftAlt","Value":308},{"Name":"RightAlt","Value":307},{"Name":"LeftControl","Value":306},{"Name":"RightControl","Value":305},{"Name":"CapsLock","Value":301},{"Name":"NumLock","Value":300},{"Name":"ScrollLock","Value":302},{"Name":"LeftSuper","Value":311},{"Name":"RightSuper","Value":312},{"Name":"Mode","Value":313},{"Name":"Compose","Value":314},{"Name":"Help","Value":315},{"Name":"Print","Value":316},{"Name":"SysReq","Value":317},{"Name":"Break","Value":318},{"Name":"Menu","Value":319},{"Name":"Power","Value":320},{"Name":"Euro","Value":321},{"Name":"Undo","Value":322},{"Name":"F1","Value":282},{"Name":"F2","Value":283},{"Name":"F3","Value":284},{"Name":"F4","Value":285},{"Name":"F5","Value":286},{"Name":"F6","Value":287},{"Name":"F7","Value":288},{"Name":"F8","Value":289},{"Name":"F9","Value":290},{"Name":"F10","Value":291},{"Name":"F11","Value":292},{"Name":"F12","Value":293},{"Name":"F13","Value":294},{"Name":"F14","Value":295},{"Name":"F15","Value":296},{"Name":"World0","Value":160},{"Name":"World1","Value":161},{"Name":"World2","Value":162},{"Name":"World3","Value":163},{"Name":"World4","Value":164},{"Name":"World5","Value":165},{"Name":"World6","Value":166},{"Name":"World7","Value":167},{"Name":"World8","Value":168},{"Name":"World9","Value":169},{"Name":"World10","Value":170},{"Name":"World11","Value":171},{"Name":"World12","Value":172},{"Name":"World13","Value":173},{"Name":"World14","Value":174},{"Name":"World15","Value":175},{"Name":"World16","Value":176},{"Name":"World17","Value":177},{"Name":"World18","Value":178},{"Name":"World19","Value":179},{"Name":"World20","Value":180},{"Name":"World21","Value":181},{"Name":"World22","Value":182},{"Name":"World23","Value":183},{"Name":"World24","Value":184},{"Name":"World25","Value":185},{"Name":"World26","Value":186},{"Name":"World27","Value":187},{"Name":"World28","Value":188},{"Name":"World29","Value":189},{"Name":"World30","Value":190},{"Name":"World31","Value":191},{"Name":"World32","Value":192},{"Name":"World33","Value":193},{"Name":"World34","Value":194},{"Name":"World35","Value":195},{"Name":"World36","Value":196},{"Name":"World37","Value":197},{"Name":"World38","Value":198},{"Name":"World39","Value":199},{"Name":"World40","Value":200},{"Name":"World41","Value":201},{"Name":"World42","Value":202},{"Name":"World43","Value":203},{"Name":"World44","Value":204},{"Name":"World45","Value":205},{"Name":"World46","Value":206},{"Name":"World47","Value":207},{"Name":"World48","Value":208},{"Name":"World49","Value":209},{"Name":"World50","Value":210},{"Name":"World51","Value":211},{"Name":"World52","Value":212},{"Name":"World53","Value":213},{"Name":"World54","Value":214},{"Name":"World55","Value":215},{"Name":"World56","Value":216},{"Name":"World57","Value":217},{"Name":"World58","Value":218},{"Name":"World59","Value":219},{"Name":"World60","Value":220},{"Name":"World61","Value":221},{"Name":"World62","Value":222},{"Name":"World63","Value":223},{"Name":"World64","Value":224},{"Name":"World65","Value":225},{"Name":"World66","Value":226},{"Name":"World67","Value":227},{"Name":"World68","Value":228},{"Name":"World69","Value":229},{"Name":"World70","Value":230},{"Name":"World71","Value":231},{"Name":"World72","Value":232},{"Name":"World73","Value":233},{"Name":"World74","Value":234},{"Name":"World75","Value":235},{"Name":"World76","Value":236},{"Name":"World77","Value":237},{"Name":"World78","Value":238},{"Name":"World79","Value":239},{"Name":"World80","Value":240},{"Name":"World81","Value":241},{"Name":"World82","Value":242},{"Name":"World83","Value":243},{"Name":"World84","Value":244},{"Name":"World85","Value":245},{"Name":"World86","Value":246},{"Name":"World87","Value":247},{"Name":"World88","Value":248},{"Name":"World89","Value":249},{"Name":"World90","Value":250},{"Name":"World91","Value":251},{"Name":"World92","Value":252},{"Name":"World93","Value":253},{"Name":"World94","Value":254},{"Name":"World95","Value":255},{"Name":"ButtonX","Value":1000},{"Name":"ButtonY","Value":1001},{"Name":"ButtonA","Value":1002},{"Name":"ButtonB","Value":1003},{"Name":"ButtonR1","Value":1004},{"Name":"ButtonL1","Value":1005},{"Name":"ButtonR2","Value":1006},{"Name":"ButtonL2","Value":1007},{"Name":"ButtonR3","Value":1008},{"Name":"ButtonL3","Value":1009},{"Name":"ButtonStart","Value":1010},{"Name":"ButtonSelect","Value":1011},{"Name":"DPadLeft","Value":1012},{"Name":"DPadRight","Value":1013},{"Name":"DPadUp","Value":1014},{"Name":"DPadDown","Value":1015},{"Name":"Thumbstick1","Value":1016},{"Name":"Thumbstick2","Value":1017}],"Name":"KeyCode"},{"Items":[{"Name":"Include","Value":0},{"Name":"Exclude","Value":1}],"Name":"KeywordFilterType"},{"Items":[{"Name":"Default","Value":0}],"Name":"Language"},{"Items":[{"Name":"Left","Value":0},{"Name":"Center","Value":1},{"Name":"Right","Value":2}],"Name":"LeftRight"},{"Items":[{"Name":"High","Value":2},{"Name":"Medium","Value":1},{"Name":"Low","Value":0}],"Name":"LevelOfDetailSetting"},{"Items":[{"Name":"Head","Value":0},{"Name":"Torso","Value":1},{"Name":"LeftArm","Value":2},{"Name":"RightArm","Value":3},{"Name":"LeftLeg","Value":4},{"Name":"RightLeg","Value":5},{"Name":"Unknown","Value":6}],"Name":"Limb"},{"Items":[{"Name":"Horizontal","Value":0},{"Name":"Vertical","Value":1}],"Name":"ListDisplayMode"},{"Items":[{"Name":"Camera","Value":0},{"Name":"CFrame","Value":1},{"Name":"ObjectPosition","Value":2},{"Name":"ObjectCFrame","Value":3}],"Name":"ListenerType"},{"Items":[{"Name":"Plastic","Value":256},{"Name":"Wood","Value":512},{"Name":"Slate","Value":800},{"Name":"Concrete","Value":816},{"Name":"CorrodedMetal","Value":1040},{"Name":"DiamondPlate","Value":1056},{"Name":"Foil","Value":1072},{"Name":"Grass","Value":1280},{"Name":"Ice","Value":1536},{"Name":"Marble","Value":784},{"Name":"Granite","Value":832},{"Name":"Brick","Value":848},{"Name":"Pebble","Value":864},{"Name":"Sand","Value":1296},{"Name":"Fabric","Value":1312},{"Name":"SmoothPlastic","Value":272},{"Name":"Metal","Value":1088},{"Name":"WoodPlanks","Value":528},{"Name":"Cobblestone","Value":880},{"Name":"Air","Tags":["NotBrowsable"],"Value":1792},{"Name":"Water","Tags":["NotBrowsable"],"Value":2048},{"Name":"Rock","Tags":["NotBrowsable"],"Value":896},{"Name":"Glacier","Tags":["NotBrowsable"],"Value":1552},{"Name":"Snow","Tags":["NotBrowsable"],"Value":1328},{"Name":"Sandstone","Tags":["NotBrowsable"],"Value":912},{"Name":"Mud","Tags":["NotBrowsable"],"Value":1344},{"Name":"Basalt","Tags":["NotBrowsable"],"Value":788},{"Name":"Ground","Tags":["NotBrowsable"],"Value":1360},{"Name":"CrackedLava","Tags":["NotBrowsable"],"Value":804},{"Name":"Neon","Value":288},{"Name":"Glass","Value":1568},{"Name":"Asphalt","Tags":["NotBrowsable"],"Value":1376},{"Name":"LeafyGrass","Tags":["NotBrowsable"],"Value":1284},{"Name":"Salt","Tags":["NotBrowsable"],"Value":1392},{"Name":"Limestone","Tags":["NotBrowsable"],"Value":820},{"Name":"Pavement","Tags":["NotBrowsable"],"Value":836}],"Name":"Material"},{"Items":[{"Name":"None","Value":0},{"Name":"BuildersClub","Value":1},{"Name":"TurboBuildersClub","Value":2},{"Name":"OutrageousBuildersClub","Value":3}],"Name":"MembershipType"},{"Items":[{"Name":"Head","Value":0},{"Name":"Torso","Value":1},{"Name":"Wedge","Value":2},{"Name":"Prism","Tags":["Deprecated"],"Value":7},{"Name":"Pyramid","Tags":["Deprecated"],"Value":8},{"Name":"ParallelRamp","Tags":["Deprecated"],"Value":9},{"Name":"RightAngleRamp","Tags":["Deprecated"],"Value":10},{"Name":"CornerWedge","Tags":["Deprecated"],"Value":11},{"Name":"Brick","Value":6},{"Name":"Sphere","Value":3},{"Name":"Cylinder","Value":4},{"Name":"FileMesh","Value":5}],"Name":"MeshType"},{"Items":[{"Name":"MessageOutput","Value":0},{"Name":"MessageInfo","Value":1},{"Name":"MessageWarning","Value":2},{"Name":"MessageError","Value":3}],"Name":"MessageType"},{"Items":[{"Name":"Default","Value":0},{"Name":"LockCenter","Value":1},{"Name":"LockCurrentPosition","Value":2}],"Name":"MouseBehavior"},{"Items":[{"Name":"Stopped","Value":0},{"Name":"Coasting","Value":1},{"Name":"Pushing","Value":2},{"Name":"Stopping","Value":3},{"Name":"AirFree","Value":4}],"Name":"MoveState"},{"Items":[{"Name":"OccludeAll","Value":2},{"Name":"EnemyOcclusion","Value":1},{"Name":"NoOcclusion","Value":0}],"Name":"NameOcclusion"},{"Items":[{"Name":"Automatic","Value":0},{"Name":"Manual","Value":1},{"Name":"OnContact","Value":2}],"Name":"NetworkOwnership"},{"Items":[{"Name":"Top","Value":1},{"Name":"Bottom","Value":4},{"Name":"Back","Value":2},{"Name":"Front","Value":5},{"Name":"Right","Value":0},{"Name":"Left","Value":3}],"Name":"NormalId"},{"Items":[{"Name":"Horizontal","Value":0},{"Name":"Vertical","Value":1}],"Name":"OutputLayoutMode"},{"Items":[{"Name":"None","Value":0},{"Name":"ForceShow","Value":1},{"Name":"ForceHide","Value":2}],"Name":"OverrideMouseIconBehavior"},{"Items":[{"Name":"IMMEDIATE_PRIORITY","Value":0},{"Name":"HIGH_PRIORITY","Value":1},{"Name":"MEDIUM_PRIORITY","Value":2},{"Name":"LOW_PRIORITY","Value":3}],"Name":"PacketPriority"},{"Items":[{"Name":"Ball","Value":0},{"Name":"Block","Value":1},{"Name":"Cylinder","Value":2}],"Name":"PartType"},{"Items":[{"Name":"Success","Value":0},{"Name":"ClosestNoPath","Tags":["Deprecated"],"Value":1},{"Name":"ClosestOutOfRange","Tags":["Deprecated"],"Value":2},{"Name":"FailStartNotEmpty","Tags":["Deprecated"],"Value":3},{"Name":"FailFinishNotEmpty","Tags":["Deprecated"],"Value":4},{"Name":"NoPath","Value":5}],"Name":"PathStatus"},{"Items":[{"Name":"Walk","Value":0},{"Name":"Jump","Value":1}],"Name":"PathWaypointAction"},{"Items":[{"Name":"Game","Value":0},{"Name":"RobloxGame","Value":1},{"Name":"RobloxScript","Value":2},{"Name":"Studio","Value":3},{"Name":"Roblox","Value":4}],"Name":"PermissionLevelShown"},{"Items":[{"Name":"Windows","Value":0},{"Name":"OSX","Value":1},{"Name":"IOS","Value":2},{"Name":"Android","Value":3},{"Name":"XBoxOne","Value":4},{"Name":"PS4","Value":5},{"Name":"PS3","Value":6},{"Name":"XBox360","Value":7},{"Name":"WiiU","Value":8},{"Name":"NX","Value":9},{"Name":"Ouya","Value":10},{"Name":"AndroidTV","Value":11},{"Name":"Chromecast","Value":12},{"Name":"Linux","Value":13},{"Name":"SteamOS","Value":14},{"Name":"WebOS","Value":15},{"Name":"DOS","Value":16},{"Name":"BeOS","Value":17},{"Name":"UWP","Value":18},{"Name":"None","Value":19}],"Name":"Platform"},{"Items":[{"Name":"Begin","Value":0},{"Name":"Delayed","Value":1},{"Name":"Playing","Value":2},{"Name":"Paused","Value":3},{"Name":"Completed","Value":4},{"Name":"Cancelled","Value":5}],"Name":"PlaybackState"},{"Items":[{"Name":"CharacterForward","Value":0},{"Name":"CharacterBackward","Value":1},{"Name":"CharacterLeft","Value":2},{"Name":"CharacterRight","Value":3},{"Name":"CharacterJump","Value":4}],"Name":"PlayerActions"},{"Items":[{"Name":"All","Value":0},{"Name":"Team","Value":1},{"Name":"Whisper","Value":2}],"Name":"PlayerChatType"},{"Items":[{"Name":"Out","Value":1},{"Name":"InOut","Value":2},{"Name":"In","Value":0}],"Name":"PoseEasingDirection"},{"Items":[{"Name":"Linear","Value":0},{"Name":"Constant","Value":1},{"Name":"Elastic","Value":2},{"Name":"Cubic","Value":3},{"Name":"Bounce","Value":4}],"Name":"PoseEasingStyle"},{"Items":[{"Name":"Owner","Value":255},{"Name":"Admin","Value":240},{"Name":"Member","Value":128},{"Name":"Visitor","Value":10},{"Name":"Banned","Value":0}],"Name":"PrivilegeType","Tags":["Deprecated"]},{"Items":[{"Name":"NotProcessedYet","Value":0},{"Name":"PurchaseGranted","Value":1}],"Name":"ProductPurchaseDecision"},{"Items":[{"Name":"Automatic","Value":0},{"Name":"Level01","Value":1},{"Name":"Level02","Value":2},{"Name":"Level03","Value":3},{"Name":"Level04","Value":4},{"Name":"Level05","Value":5},{"Name":"Level06","Value":6},{"Name":"Level07","Value":7},{"Name":"Level08","Value":8},{"Name":"Level09","Value":9},{"Name":"Level10","Value":10},{"Name":"Level11","Value":11},{"Name":"Level12","Value":12},{"Name":"Level13","Value":13},{"Name":"Level14","Value":14},{"Name":"Level15","Value":15},{"Name":"Level16","Value":16},{"Name":"Level17","Value":17},{"Name":"Level18","Value":18},{"Name":"Level19","Value":19},{"Name":"Level20","Value":20},{"Name":"Level21","Value":21}],"Name":"QualityLevel"},{"Items":[{"Name":"OuterBox","Value":0},{"Name":"InnerBox","Value":1}],"Name":"R15CollisionType"},{"Items":[{"Name":"First","Value":0},{"Name":"Input","Value":100},{"Name":"Camera","Value":200},{"Name":"Character","Value":300},{"Name":"Last","Value":2000}],"Name":"RenderPriority"},{"Items":[{"Name":"psnr","Value":0},{"Name":"diff","Value":1}],"Name":"RenderingTestComparisonMethod"},{"Items":[{"Name":"NoReverb","Value":0},{"Name":"GenericReverb","Value":1},{"Name":"PaddedCell","Value":2},{"Name":"Room","Value":3},{"Name":"Bathroom","Value":4},{"Name":"LivingRoom","Value":5},{"Name":"StoneRoom","Value":6},{"Name":"Auditorium","Value":7},{"Name":"ConcertHall","Value":8},{"Name":"Cave","Value":9},{"Name":"Arena","Value":10},{"Name":"Hangar","Value":11},{"Name":"CarpettedHallway","Value":12},{"Name":"Hallway","Value":13},{"Name":"StoneCorridor","Value":14},{"Name":"Alley","Value":15},{"Name":"Forest","Value":16},{"Name":"City","Value":17},{"Name":"Mountains","Value":18},{"Name":"Quarry","Value":19},{"Name":"Plain","Value":20},{"Name":"ParkingLot","Value":21},{"Name":"SewerPipe","Value":22},{"Name":"UnderWater","Value":23}],"Name":"ReverbType"},{"Items":[{"Name":"Select","Value":0},{"Name":"Scale","Value":1},{"Name":"Rotate","Value":2},{"Name":"Move","Value":3},{"Name":"Transform","Value":4},{"Name":"ColorPicker","Value":5},{"Name":"MaterialPicker","Value":6},{"Name":"Group","Value":7},{"Name":"Ungroup","Value":8},{"Name":"None","Value":9}],"Name":"RibbonTool"},{"Items":[{"Name":"Inverse","Value":0},{"Name":"Linear","Value":1},{"Name":"InverseTapered","Value":3},{"Name":"LinearSquare","Value":2}],"Name":"RollOffMode"},{"Items":[{"Name":"MovementRelative","Value":0},{"Name":"CameraRelative","Value":1}],"Name":"RotationType"},{"Items":[{"Name":"Aggregate","Value":0},{"Name":"Snapshot","Value":1},{"Name":"Hybrid","Value":2}],"Name":"RuntimeUndoBehavior"},{"Items":[{"Name":"SaveAll","Value":2},{"Name":"SaveWorld","Value":0},{"Name":"SaveGame","Value":1}],"Name":"SaveFilter","Tags":["Deprecated"]},{"Items":[{"Name":"Automatic","Value":0},{"Name":"QualityLevel1","Value":1},{"Name":"QualityLevel2","Value":2},{"Name":"QualityLevel3","Value":3},{"Name":"QualityLevel4","Value":4},{"Name":"QualityLevel5","Value":5},{"Name":"QualityLevel6","Value":6},{"Name":"QualityLevel7","Value":7},{"Name":"QualityLevel8","Value":8},{"Name":"QualityLevel9","Value":9},{"Name":"QualityLevel10","Value":10}],"Name":"SavedQualitySetting"},{"Items":[{"Name":"Stretch","Value":0},{"Name":"Slice","Value":1},{"Name":"Tile","Value":2},{"Name":"Fit","Value":3},{"Name":"Crop","Value":4}],"Name":"ScaleType"},{"Items":[{"Name":"LandscapeLeft","Value":0},{"Name":"LandscapeRight","Value":1},{"Name":"LandscapeSensor","Value":2},{"Name":"Portrait","Value":3},{"Name":"Sensor","Value":4}],"Name":"ScreenOrientation"},{"Items":[{"Name":"None","Value":0},{"Name":"ScrollBar","Value":1},{"Name":"Always","Value":2}],"Name":"ScrollBarInset"},{"Items":[{"Name":"X","Value":1},{"Name":"Y","Value":2},{"Name":"XY","Value":4}],"Name":"ScrollingDirection"},{"Items":[{"Name":"Enabled","Value":0},{"Name":"Muted","Value":1},{"Name":"OnlineGame","Value":2}],"Name":"ServerAudioBehavior"},{"Items":[{"Name":"RelativeXY","Value":0},{"Name":"RelativeXX","Value":1},{"Name":"RelativeYY","Value":2}],"Name":"SizeConstraint"},{"Items":[{"Name":"LayoutOrder","Value":2},{"Name":"Name","Value":0},{"Name":"Custom","Tags":["Deprecated"],"Value":1}],"Name":"SortOrder"},{"Items":[{"Name":"NoSound","Value":0},{"Name":"Boing","Value":1},{"Name":"Bomb","Value":2},{"Name":"Break","Value":3},{"Name":"Click","Value":4},{"Name":"Clock","Value":5},{"Name":"Slingshot","Value":6},{"Name":"Page","Value":7},{"Name":"Ping","Value":8},{"Name":"Snap","Value":9},{"Name":"Splat","Value":10},{"Name":"Step","Value":11},{"Name":"StepOn","Value":12},{"Name":"Swoosh","Value":13},{"Name":"Victory","Value":14}],"Name":"SoundType"},{"Items":[{"Name":"Insert","Value":0},{"Name":"Home","Value":1},{"Name":"End","Value":2},{"Name":"PageUp","Value":3},{"Name":"PageDown","Value":4},{"Name":"ChatHotkey","Value":5}],"Name":"SpecialKey"},{"Items":[{"Name":"TopLeft","Value":0},{"Name":"TopRight","Value":1},{"Name":"BottomLeft","Value":2},{"Name":"BottomRight","Value":3}],"Name":"StartCorner"},{"Items":[{"Name":"Poison","Tags":["Deprecated"],"Value":0},{"Name":"Confusion","Tags":["Deprecated"],"Value":1}],"Name":"Status","Tags":["Deprecated"]},{"Items":[{"Name":"Button","Value":16},{"Name":"MainButton","Value":17},{"Name":"RibbonButton","Value":18},{"Name":"MainText","Value":21},{"Name":"TitlebarText","Value":22},{"Name":"HighlightText","Value":23},{"Name":"DimmerText","Value":24},{"Name":"LinkText","Value":25},{"Name":"WarningText","Value":26},{"Name":"ErrorText","Value":27},{"Name":"InfoText","Value":28},{"Name":"SensitiveText","Value":29},{"Name":"RibbonTab","Value":8},{"Name":"RibbonTabTopBar","Value":9},{"Name":"Item","Value":3},{"Name":"TableItem","Value":4},{"Name":"TabBar","Value":5},{"Name":"Tab","Value":6},{"Name":"Notification","Value":1},{"Name":"Tooltip","Value":2},{"Name":"InputField","Value":15},{"Name":"Menu","Value":7},{"Name":"ScrollBar","Value":12},{"Name":"ScrollBarBackground","Value":13},{"Name":"EmulatorBar","Value":10},{"Name":"EmulatorDropDown","Value":11},{"Name":"Border","Value":19},{"Name":"Shadow","Value":20},{"Name":"MainSection","Value":0},{"Name":"ScriptBackground","Value":30},{"Name":"ScriptText","Value":31},{"Name":"ScriptSelectionText","Value":32},{"Name":"ScriptSelectionBackground","Value":33},{"Name":"ScriptFindSelectionBackground","Value":34},{"Name":"ScriptMachtingWordSelectionBackground","Value":35},{"Name":"ScriptOperator","Value":36},{"Name":"ScriptNumber","Value":37},{"Name":"ScriptString","Value":38},{"Name":"ScriptComment","Value":39},{"Name":"ScriptPreprocessor","Value":40},{"Name":"ScriptKeyword","Value":41},{"Name":"ScriptBuiltInFunction","Value":42},{"Name":"ScriptWarning","Value":43},{"Name":"ScriptError","Value":44},{"Name":"ViewPortBackground","Value":14}],"Name":"StudioStyleGuideColor"},{"Items":[{"Name":"Default","Value":0},{"Name":"Selected","Value":1},{"Name":"Pressed","Value":2},{"Name":"Disabled","Value":3},{"Name":"Hover","Value":4}],"Name":"StudioStyleGuideModifier"},{"Items":[{"Name":"AlternatingSupports","Value":0},{"Name":"BridgeStyleSupports","Value":1},{"Name":"NoSupports","Value":2}],"Name":"Style"},{"Items":[{"Name":"None","Value":0},{"Name":"Hinge","Value":1},{"Name":"SteppingMotor","Value":2},{"Name":"Motor","Value":3}],"Name":"SurfaceConstraint"},{"Items":[{"Name":"Smooth","Value":0},{"Name":"Glue","Value":1},{"Name":"Weld","Value":2},{"Name":"Studs","Value":3},{"Name":"Inlet","Value":4},{"Name":"Universal","Value":5},{"Name":"Hinge","Value":6},{"Name":"Motor","Value":7},{"Name":"SteppingMotor","Value":8},{"Name":"Unjoinable","Value":9},{"Name":"SmoothNoOutlines","Value":10}],"Name":"SurfaceType"},{"Items":[{"Name":"Right","Value":0},{"Name":"Left","Value":1},{"Name":"Up","Value":2},{"Name":"Down","Value":3},{"Name":"None","Value":4}],"Name":"SwipeDirection"},{"Items":[{"Name":"RowMajor","Value":0},{"Name":"ColumnMajor","Value":1}],"Name":"TableMajorAxis"},{"Items":[{"Name":"Success","Value":0},{"Name":"Failure","Value":1},{"Name":"GameNotFound","Value":2},{"Name":"GameEnded","Value":3},{"Name":"GameFull","Value":4},{"Name":"Unauthorized","Value":5},{"Name":"Flooded","Value":6},{"Name":"IsTeleporting","Value":7}],"Name":"TeleportResult"},{"Items":[{"Name":"RequestedFromServer","Value":0},{"Name":"Started","Value":1},{"Name":"WaitingForServer","Value":2},{"Name":"Failed","Value":3},{"Name":"InProgress","Value":4}],"Name":"TeleportState"},{"Items":[{"Name":"ToPlace","Value":0},{"Name":"ToInstance","Value":1},{"Name":"ToReservedServer","Value":2}],"Name":"TeleportType"},{"Items":[{"Name":"PublicChat","Value":1},{"Name":"PrivateChat","Value":2}],"Name":"TextFilterContext"},{"Items":[{"Name":"None","Value":0},{"Name":"AtEnd","Value":1}],"Name":"TextTruncate"},{"Items":[{"Name":"Left","Value":0},{"Name":"Center","Value":2},{"Name":"Right","Value":1}],"Name":"TextXAlignment"},{"Items":[{"Name":"Top","Value":0},{"Name":"Center","Value":1},{"Name":"Bottom","Value":2}],"Name":"TextYAlignment"},{"Items":[{"Name":"Stretch","Value":0},{"Name":"Wrap","Value":1},{"Name":"Static","Value":2}],"Name":"TextureMode"},{"Items":[{"Name":"NonHumanoid","Value":0},{"Name":"NonHumanoidOrphaned","Value":1},{"Name":"Humanoid","Value":2},{"Name":"HumanoidOrphaned","Value":3}],"Name":"TextureQueryType"},{"Items":[{"Name":"Auto","Value":0},{"Name":"PerCore1","Value":101},{"Name":"PerCore2","Value":102},{"Name":"PerCore3","Value":103},{"Name":"PerCore4","Value":104},{"Name":"Threads1","Value":1},{"Name":"Threads2","Value":2},{"Name":"Threads3","Value":3},{"Name":"Threads4","Value":4},{"Name":"Threads8","Value":8},{"Name":"Threads16","Value":16}],"Name":"ThreadPoolConfig"},{"Items":[{"Name":"Extreme","Value":2},{"Name":"ElevatedOnServer","Value":1},{"Name":"Default","Value":0}],"Name":"ThrottlingPriority"},{"Items":[{"Name":"Size48x48","Value":0},{"Name":"Size180x180","Value":1},{"Name":"Size420x420","Value":2},{"Name":"Size60x60","Value":3},{"Name":"Size100x100","Value":4},{"Name":"Size150x150","Value":5},{"Name":"Size352x352","Value":6}],"Name":"ThumbnailSize"},{"Items":[{"Name":"HeadShot","Value":0},{"Name":"AvatarBust","Value":1},{"Name":"AvatarThumbnail","Value":2}],"Name":"ThumbnailType"},{"Items":[{"Name":"Fast","Value":0},{"Name":"Benchmark","Value":1},{"Name":"Precise","Value":2}],"Name":"TickCountSampleMethod"},{"Items":[{"Name":"Top","Value":0},{"Name":"Center","Value":1},{"Name":"Bottom","Value":2}],"Name":"TopBottom"},{"Items":[{"Name":"Default","Value":0},{"Name":"Follow","Value":2},{"Name":"Classic","Value":1},{"Name":"Orbital","Value":3}],"Name":"TouchCameraMovementMode"},{"Items":[{"Name":"Default","Value":0},{"Name":"Thumbstick","Value":1},{"Name":"DPad","Value":2},{"Name":"Thumbpad","Value":3},{"Name":"ClickToMove","Value":4},{"Name":"DynamicThumbstick","Value":5}],"Name":"TouchMovementMode"},{"Items":[{"Name":"Canceled","Value":0},{"Name":"Completed","Value":1}],"Name":"TweenStatus"},{"Items":[{"Name":"Light","Value":0},{"Name":"Dark","Value":1}],"Name":"UITheme"},{"Items":[{"Name":"UiMessageError","Value":0},{"Name":"UiMessageInfo","Value":1}],"Name":"UiMessageType"},{"Items":[{"Name":"Never","Value":0},{"Name":"Ask","Value":1},{"Name":"Always","Value":2}],"Name":"UploadSetting"},{"Items":[{"Name":"Head","Value":0},{"Name":"LeftHand","Value":1},{"Name":"RightHand","Value":2}],"Name":"UserCFrame"},{"Items":[{"Name":"Begin","Value":0},{"Name":"Change","Value":1},{"Name":"End","Value":2},{"Name":"Cancel","Value":3},{"Name":"None","Value":4}],"Name":"UserInputState"},{"Items":[{"Name":"MouseButton1","Value":0},{"Name":"MouseButton2","Value":1},{"Name":"MouseButton3","Value":2},{"Name":"MouseWheel","Value":3},{"Name":"MouseMovement","Value":4},{"Name":"Touch","Value":7},{"Name":"Keyboard","Value":8},{"Name":"Focus","Value":9},{"Name":"Accelerometer","Value":10},{"Name":"Gyro","Value":11},{"Name":"Gamepad1","Value":12},{"Name":"Gamepad2","Value":13},{"Name":"Gamepad3","Value":14},{"Name":"Gamepad4","Value":15},{"Name":"Gamepad5","Value":16},{"Name":"Gamepad6","Value":17},{"Name":"Gamepad7","Value":18},{"Name":"Gamepad8","Value":19},{"Name":"TextInput","Value":20},{"Name":"None","Value":21}],"Name":"UserInputType"},{"Items":[{"Name":"Left","Value":0},{"Name":"Right","Value":1}],"Name":"VRTouchpad"},{"Items":[{"Name":"Touch","Value":0},{"Name":"VirtualThumbstick","Value":1},{"Name":"ABXY","Value":2}],"Name":"VRTouchpadMode"},{"Items":[{"Name":"Center","Value":0},{"Name":"Top","Value":1},{"Name":"Bottom","Value":2}],"Name":"VerticalAlignment"},{"Items":[{"Name":"Left","Value":1},{"Name":"Right","Value":0}],"Name":"VerticalScrollBarPosition"},{"Items":[{"Name":"Large","Value":0},{"Name":"Small","Value":1},{"Name":"LeftTrigger","Value":2},{"Name":"RightTrigger","Value":3},{"Name":"LeftHand","Value":4},{"Name":"RightHand","Value":5}],"Name":"VibrationMotor"},{"Items":[{"Name":"LowResolution","Value":0},{"Name":"MediumResolution","Value":1},{"Name":"HighResolution","Value":2}],"Name":"VideoQualitySettings"},{"Items":[{"Name":"Recording","Value":1},{"Name":"Playing","Value":2},{"Name":"None","Value":0}],"Name":"VirtualInputMode"},{"Items":[{"Name":"NegX","Value":0},{"Name":"X","Value":1},{"Name":"NegY","Value":2},{"Name":"Y","Value":3},{"Name":"NegZ","Value":4},{"Name":"Z","Value":5}],"Name":"WaterDirection"},{"Items":[{"Name":"None","Value":0},{"Name":"Small","Value":1},{"Name":"Medium","Value":2},{"Name":"Strong","Value":3},{"Name":"Max","Value":4}],"Name":"WaterForce"},{"Items":[{"Name":"Global","Value":0},{"Name":"Sibling","Value":1}],"Name":"ZIndexBehavior"}],"Version":1}'
				--if localAPI then 
				--	rawAPI = localAPI
				--else
				--	Main.DepsVersionData[1] = ""
				--end
			--end
			rawAPI = rawAPI
		--else
		--	if script:FindFirstChild("API") then
		--		rawAPI = require(script.API)
		--	else
		--		error("NO API EXISTS")
		--	end
		--end
		Main.RawAPI = rawAPI
		--print(rawAPI)
		api = service.HttpService:JSONDecode(rawAPI)

		local classes,enums = {},{}
		local categoryOrder,seenCategories = {},{}

		local function insertAbove(t,item,aboveItem)
			local findPos = table.find(t,item)
			if not findPos then return end
			table.remove(t,findPos)

			local pos = table.find(t,aboveItem)
			if not pos then return end
			table.insert(t,pos,item)
		end

		for _,class in pairs(api.Classes) do
			local newClass = {}
			newClass.Name = class.Name
			newClass.Superclass = class.Superclass
			newClass.Properties = {}
			newClass.Functions = {}
			newClass.Events = {}
			newClass.Callbacks = {}
			newClass.Tags = {}

			if class.Tags then for c,tag in pairs(class.Tags) do newClass.Tags[tag] = true end end
			for __,member in pairs(class.Members) do
				local newMember = {}
				newMember.Name = member.Name
				newMember.Class = class.Name
				newMember.Security = member.Security
				newMember.Tags ={}
				if member.Tags then for c,tag in pairs(member.Tags) do newMember.Tags[tag] = true end end

				local mType = member.MemberType
				if mType == "Property" then
					local propCategory = member.Category or "Other"
					propCategory = propCategory:match("^%s*(.-)%s*$")
					if not seenCategories[propCategory] then
						categoryOrder[#categoryOrder+1] = propCategory
						seenCategories[propCategory] = true
					end
					newMember.ValueType = member.ValueType
					newMember.Category = propCategory
					newMember.Serialization = member.Serialization
					table.insert(newClass.Properties,newMember)
				elseif mType == "Function" then
					newMember.Parameters = {}
					newMember.ReturnType = member.ReturnType.Name
					for c,param in pairs(member.Parameters) do
						table.insert(newMember.Parameters,{Name = param.Name, Type = param.Type.Name})
					end
					table.insert(newClass.Functions,newMember)
				elseif mType == "Event" then
					newMember.Parameters = {}
					for c,param in pairs(member.Parameters) do
						table.insert(newMember.Parameters,{Name = param.Name, Type = param.Type.Name})
					end
					table.insert(newClass.Events,newMember)
				end
			end

			classes[class.Name] = newClass
		end

		for _,class in pairs(classes) do
			class.Superclass = classes[class.Superclass]
		end

		for _,enum in pairs(api.Enums) do
			local newEnum = {}
			newEnum.Name = enum.Name
			newEnum.Items = {}
			newEnum.Tags = {}

			if enum.Tags then for c,tag in pairs(enum.Tags) do newEnum.Tags[tag] = true end end
			for __,item in pairs(enum.Items) do
				local newItem = {}
				newItem.Name = item.Name
				newItem.Value = item.Value
				table.insert(newEnum.Items,newItem)
			end

			enums[enum.Name] = newEnum
		end

		local function getMember(class,member)
			if not classes[class] or not classes[class][member] then return end
			local result = {}

			local currentClass = classes[class]
			while currentClass do
				for _,entry in pairs(currentClass[member]) do
					result[#result+1] = entry
				end
				currentClass = currentClass.Superclass
			end

			table.sort(result,function(a,b) return a.Name < b.Name end)
			return result
		end

		insertAbove(categoryOrder,"Behavior","Tuning")
		insertAbove(categoryOrder,"Appearance","Data")
		insertAbove(categoryOrder,"Attachments","Axes")
		insertAbove(categoryOrder,"Cylinder","Slider")
		insertAbove(categoryOrder,"Localization","Jump Settings")
		insertAbove(categoryOrder,"Surface","Motion")
		insertAbove(categoryOrder,"Surface Inputs","Surface")
		insertAbove(categoryOrder,"Part","Surface Inputs")
		insertAbove(categoryOrder,"Assembly","Surface Inputs")
		insertAbove(categoryOrder,"Character","Controls")
		categoryOrder[#categoryOrder+1] = "Unscriptable"
		categoryOrder[#categoryOrder+1] = "Attributes"

		local categoryOrderMap = {}
		for i = 1,#categoryOrder do
			categoryOrderMap[categoryOrder[i]] = i
		end

		return {
			Classes = classes,
			Enums = enums,
			CategoryOrder = categoryOrderMap,
			GetMember = getMember
		}
	end

	Main.FetchRMD = function()
		local rawXML
		if Main.Elevated then
			if Main.LocalDepsUpToDate() then
				local localRMD = Lib.ReadFile("dex/rbx_rmd.dat")
				if localRMD then 
					rawXML = localRMD
				else
					Main.DepsVersionData[1] = ""
				end
			end
			rawXML = rawXML or [[<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
  <Item class="ReflectionMetadataClasses">
    <Properties></Properties>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Actor</string>
        <string name="ClassCategory">Scripting</string>
        <string name="summary">A logical grouping of datamodel nodes which can enable scripts to run in parallel.</string>
        <string name="ExplorerOrder">10</string>
        <string name="ExplorerImageIndex">113</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">BindableFunction</string>
        <string name="ClassCategory">Scripting</string>
        <string name="ExplorerOrder">40</string>
        <string name="ExplorerImageIndex">66</string>
      </Properties>

      <Item class="ReflectionMetadataYieldFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Invoke</string>
          </Properties>
        </Item>
      </Item>
      <Item class="ReflectionMetadataCallbacks">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">OnInvoke</string>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">BindableEvent</string>
        <string name="ClassCategory">Scripting</string>

        <string name="ExplorerOrder">50</string>
        <string name="ExplorerImageIndex">67</string>
      </Properties>
      <Item class="ReflectionMetadataFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Fire</string>
          </Properties>
        </Item>
      </Item>
      <Item class="ReflectionMetadataEvents">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Event</string>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">TouchTransmitter</string>

        <bool name="Browsable">false</bool>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">37</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">ForceField</string>
        <string name="ClassCategory">Avatar</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">37</string>
        <string name="PreferredParent">Model</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">PluginManager</string>

      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">PluginManagerInterface</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">TeleportService</string>
      </Properties>
      <Item class="ReflectionMetadataMember">
        <Properties>
          <string name="Name">CustomizedTeleportUI</string>
          <bool name="Deprecated">true</bool>
        </Properties>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Plugin</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">86</string>
      </Properties>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">PluginMouse</string>

      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Glue</string>
        <bool name="Deprecated">true</bool>
        <string name="PreferredParent">BasePart</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">CollectionService</string>
      </Properties>
      <Item class="ReflectionMetadataEvents">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ItemAdded</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ItemRemoved</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
      </Item>
      <Item class="ReflectionMetadataFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetCollection</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetTagged</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">AddTag</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">RemoveTag</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetTags</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">HasTag</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetInstanceAddedSignal</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetInstanceRemovedSignal</string>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">JointsService</string>
        <bool name="Deprecated">true</bool>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">RunService</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">BadgeService</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">LogService</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">AssetService</string>
      </Properties>
      <Item class="ReflectionMetadataYieldFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">RevertAsset</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">SetPlacePermissions</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetPlacePermissions</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetAssetVersions</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetCreatorAssetID</string>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">HttpService</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">HttpEnabled</string>
            <bool name="Browsable">true</bool>
          </Properties>
        </Item>
      </Item>
      <Item class="ReflectionMetadataYieldFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetAsync</string>
            <string name="ScriptContext">Server</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">PostAsync</string>
            <string name="ScriptContext">Server</string>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">AnalyticsService</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ApiKey</string>
            <bool name="Browsable">true</bool>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">InsertService</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">AllowClientInsertModels</string>
            <bool name="Browsable">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">AllowInsertFreeModels</string>
            <bool name="Browsable">false</bool>
            <bool name="Deprecated">true</bool>
            <string name="ExplorerOrder">-1</string>
          </Properties>
        </Item>
      </Item>
      <Item class="ReflectionMetadataFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetCollection</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Insert</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ApproveAssetId</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ApproveAssetVersionId</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
      </Item>

      <Item class="ReflectionMetadataYieldFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetBaseSets</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetUserSets</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetBaseCategories</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetUserCategories</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LoadAsset</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LoadAssetVersion</string>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Hat</string>
        <string name="ClassCategory">Avatar</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">45</string>
        <bool name="Deprecated">true</bool>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Accessory</string>
        <string name="ClassCategory">Avatar</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">32</string>
        <string name="PreferredParent">Model</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">LocalBackpack</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">LocalBackpackItem</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">MotorFeature</string>
        <bool name="Deprecated">true</bool>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Attachment</string>
        <string name="ClassCategory">Constraints</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">81</string>
        <string name="PreferredParent">PVInstance</string>
      </Properties>

      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Rotation</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">WorldRotation</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Orientation</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">WorldOrientation</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Axis</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">SecondaryAxis</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">WorldAxis</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">SecondaryWorldAxis</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">WorldCFrame</string>
            <string name="PropertyOrder">1000</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">WrapTarget</string>
        <string name="ClassCategory">Effects</string>
        <string name="ExplorerOrder">32</string>
        <string name="ExplorerImageIndex">127</string>
        <string name="PreferredParent">BasePart</string>
        <string name="PreferredParents">BasePart</string>
        <string name="PreferredParents">Model</string>
      </Properties>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">WrapLayer</string>
        <string name="ClassCategory">Effects</string>
        <string name="ExplorerOrder">32</string>
        <string name="ExplorerImageIndex">126</string>
        <string name="PreferredParent">BasePart</string>
        <string name="PreferredParents">BasePart</string>
        <string name="PreferredParents">Model</string>
      </Properties>
    </Item>


    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Bone</string>
        <string name="ClassCategory">Animations</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">114</string>
        <string name="PreferredParent">PVInstance</string>
        <string name="PreferredParents">PVInstance</string>
        <string name="PreferredParents">Bone</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Constraint</string>
        <string name="ClassCategory">Physics</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">86</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Enabled</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Color</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Visible</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Active</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">BallSocketConstraint</string>
        <string name="ClassCategory">Constraints</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">86</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LimitsEnabled</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">UpperAngle</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Restitution</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TwistLimitsEnabled</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TwistUpperAngle</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TwistLowerAngle</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Radius</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">RopeConstraint</string>
        <string name="ClassCategory">Constraints</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">89</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Length</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Restitution</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">CurrentDistance</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Thickness</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">RodConstraint</string>
        <string name="ClassCategory">Constraints</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">90</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Length</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">CurrentDistance</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Thickness</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LimitAngle0</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LimitAngle1</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LimitsEnabled</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">SpringConstraint</string>
        <string name="ClassCategory">Constraints</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">91</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LimitsEnabled</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Stiffness</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Damping</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">FreeLength</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MaxForce</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MaxLength</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MinLength</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Radius</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Thickness</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Coils</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">CurrentLength</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">TorsionSpringConstraint</string>
        <string name="ClassCategory">Constraints</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">125</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LimitsEnabled</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Stiffness</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Damping</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MaxTorque</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MaxAngle</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Restitution</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Radius</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Coils</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">CurrentAngle</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">WeldConstraint</string>
        <string name="ClassCategory">Constraints</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">94</string>
        <string name="PreferredParent">PVInstance</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Active</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">NoCollisionConstraint</string>
        <string name="ClassCategory">Constraints</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">105</string>
        <string name="PreferredParent">PVInstance</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Enabled</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">RigidConstraint</string>
        <string name="ClassCategory">Constraints</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">135</string>
        <string name="PreferredParent">PVInstance</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">DestructionEnabled</string>
            <string name="PropertyOrder">0</string>
            <string name="FFlag">SimSolverEnableDestruction</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Broken</string>
            <string name="PropertyOrder">1</string>
            <string name="FFlag">SimSolverEnableDestruction</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">DestructionForce</string>
            <string name="PropertyOrder">2</string>
            <string name="FFlag">SimSolverEnableDestruction</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">DestructionTorque</string>
            <string name="PropertyOrder">3</string>
            <string name="FFlag">SimSolverEnableDestruction</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">HingeConstraint</string>
        <string name="ClassCategory">Constraints</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">87</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ActuatorType</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LimitsEnabled</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">UpperAngle</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LowerAngle</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">AngularRestitution</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">AngularVelocity</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MotorMaxTorque</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MotorMaxAcceleration</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">AngularSpeed</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ServoMaxTorque</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TargetAngle</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">CurrentAngle</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Radius</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">UniversalConstraint</string>
        <string name="ClassCategory">Constraints</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">123</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LimitsEnabled</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MaxAngle</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Restitution</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">CurrentAngle</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Radius</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">SlidingBallConstraint</string>
        <string name="ClassCategory">Constraints</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">88</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ActuatorType</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LimitsEnabled</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LowerLimit</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">UpperLimit</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Restitution</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Velocity</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MotorMaxForce</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MotorMaxAcceleration</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Speed</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ServoMaxForce</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TargetPosition</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">CurrentPosition</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Size</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">PrismaticConstraint</string>
        <string name="ClassCategory">Constraints</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">88</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">CylindricalConstraint</string>
        <string name="ClassCategory">Constraints</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">95</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">InclinationAngle</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">AngularActuatorType</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">AngularLimitsEnabled</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">UpperAngle</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LowerAngle</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">AngularRestitution</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">AngularVelocity</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MotorMaxTorque</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MotorMaxAngularAcceleration</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">AngularSpeed</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ServoMaxTorque</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TargetAngle</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">CurrentAngle</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">WorldRotationAxis</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">RotationAxisVisible</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">AlignOrientation</string>
        <string name="ClassCategory">Constraints</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">100</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">AlignPosition</string>
        <string name="ClassCategory">Constraints</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">99</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
            <Properties>
                <string name="Name">ForceLimitMode</string>
                <string name="summary">Selects the mode for force limit. Options Uniform or Per-component</string>
            </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">AnimationConstraint</string>
        <string name="ClassCategory">Constraints</string>
        <string name="ExplorerOrder">30</string>
        <string name="PreferredParent">BasePart</string>
        <bool name="FFlag">SimAnimationConstraint</bool>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">VectorForce</string>
        <string name="ClassCategory">Constraints</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">102</string>
        <string name="PreferredParent">Model</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">LineForce</string>
        <string name="ClassCategory">Constraints</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">101</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Torque</string>
        <string name="ClassCategory">Constraints</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">103</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">AngularVelocity</string>
        <string name="ClassCategory">Constraints</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">103</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">PlaneConstraint</string>
        <string name="ClassCategory">Constraints</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">134</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">PluginCapabilities</string>
        <string name="ExplorerOrder">30</string>
        <string name="PrefferedParent">Plugin</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Plane</string>
        <string name="ClassCategory">Constraints</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">134</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">LinearVelocity</string>
        <string name="ClassCategory">Constraints</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">132</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Mode</string>
            <string name="summary">Selects the mode of the velocity constraint.  Options Line, Plane, Vector</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LineDirection</string>
            <string name="summary">Direction of the line used to contraint the velocity to a line.</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LineVelocity</string>
            <string name="summary">The value of the constraint velocity along a line.</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">PlanePrimaryTangent</string>
            <string name="summary">The primary axis in the plane.</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">PlaneSecondaryTangent</string>
            <string name="summary">The secondary axis in the plane.</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">PlaneVelocity</string>
            <string name="summary">Velocity coefficients in the constraint plane.</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Velocity</string>
            <string name="summary">Constraint velocity for the Vector mode.</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MaxForce</string>
            <string name="summary">Maximum force magnitude that is applied to satisfy the constraint. </string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">RelativeTo</string>
            <string name="summary">Selects whether the velocity orientation is relative to attachment0, attachment1 or the world. </string>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Mouse</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Hit</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Icon</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Origin</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Origin</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Target</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TargetFilter</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TargetSurface</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">UnitRay</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ViewSizeX</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ViewSizeY</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">X</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Y</string>
          </Properties>
        </Item>
      </Item>
      <Item class="ReflectionMetadataEvents">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Button1Down</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Button1Up</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Button2Down</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Button2Up</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Idle</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">KeyDown</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">KeyUp</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Move</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">WheelBackward</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">WheelForward</string>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">ProfilingItem</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">ChangeHistoryService</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">RotateP</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">RotateV</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">ScriptContext</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Selection</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">VelocityMotor</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Weld</string>
        <string name="ExplorerOrder">200</string>
        <string name="ExplorerImageIndex">34</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">TaskScheduler</string>
        <bool name="Insertable">false</bool>
      </Properties>
      <Item class="ReflectionMetadataFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">SetThreadShare</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">StatsItem</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Snap</string>
        <string name="ExplorerOrder">200</string>
        <string name="ExplorerImageIndex">34</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">FileMesh</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">EditableMesh</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">ClickDetector</string>
        <string name="ClassCategory">3D Interfaces</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">41</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MaxActivationDistance</string>
          </Properties>
        </Item>
      </Item>
      <Item class="ReflectionMetadataEvents">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MouseClick</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MouseHoverEnter</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MouseHoverLeave</string>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">DragDetector</string>
        <string name="ClassCategory">3D Interfaces</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">41</string>
        <string name="PreferredParent">BasePart</string>
        <bool name="FFlag">DragDetectors1</bool>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ReferenceInstance</string>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">ProximityPrompt</string>
        <string name="ClassCategory">3D Interfaces</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">124</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MaxActivationDistance</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ActionText</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ObjectText</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">KeyboardKeyCode</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GamepadKeyCode</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Enabled</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">HoldDuration</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Exclusivity</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Style</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">UIOffset</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">RequiresLineOfSight</string>
          </Properties>
        </Item>
      </Item>
      <Item class="ReflectionMetadataFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">InputHoldBegin</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">InputHoldEnd</string>
          </Properties>
        </Item>
      </Item>
      <Item class="ReflectionMetadataEvents">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Triggered</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TriggeEnded</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">PromptShown</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">PromptHidden</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">PromptButtonHoldBegan</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">PromptButtonHoldEnded</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">ProximityPromptService</string>
        <bool name="Browsable">false</bool>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Enabled</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MaxPromptsVisible</string>
          </Properties>
        </Item>
      </Item>
      <Item class="ReflectionMetadataEvents">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Triggered</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TriggeEnded</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">PromptShown</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">PromptHidden</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">PromptButtonHoldBegan</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">PromptButtonHoldEnded</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Clothing</string>
        <string name="ExplorerOrder">20</string>
      </Properties>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Smoke</string>
        <string name="ClassCategory">Effects</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">59</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TimeScale</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Trail</string>
        <string name="ClassCategory">Effects</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">93</string>
        <string name="PreferredParent">Model</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LightEmission</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LightInfluence</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Brightness</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">10</double>
            <double name="UINumTicks">2000</double>
          </Properties>
        </Item>

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ZOffset</string>
            <double name="UIMinimum">-1</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Lifetime</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">20</double>
          </Properties>
        </Item>

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TextureLength</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">5</double>
            <double name="UINumTicks">40</double>
          </Properties>
        </Item>

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MinLength</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>

      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">AdGui</string>
        <string name="ClassCategory">Ads</string>
        <string name="ExplorerOrder">200</string>
        <string name="ExplorerImageIndex">145</string>
        <string name="PreferredParent">GuiBase2d</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">AdPortal</string>
        <string name="ClassCategory">Ads</string>
        <string name="ExplorerOrder">200</string>
        <string name="ExplorerImageIndex">146</string>
        <string name="PreferredParent">Part</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Beam</string>
        <string name="ClassCategory">Effects</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">96</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LightEmission</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LightInfluence</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TextureSpeed</string>
            <double name="UIMinimum">-1</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TextureLength</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">5</double>
            <double name="UINumTicks">40</double>
          </Properties>
        </Item>

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">CurveSize0</string>
            <double name="UIMinimum">-10</double>
            <double name="UIMaximum">10</double>
          </Properties>
        </Item>

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">CurveSize1</string>
            <double name="UIMinimum">-10</double>
            <double name="UIMaximum">10</double>
          </Properties>
        </Item>

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ZOffset</string>
            <double name="UIMinimum">-1</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Brightness</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">10</double>
            <double name="UINumTicks">2000</double>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">SurfaceAppearance</string>
        <string name="ClassCategory">3D Interfaces</string>
        <string name="ExplorerOrder">40</string>
        <string name="ExplorerImageIndex">10</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">AlphaMode</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ColorMap</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MetalnessMap</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">NormalMap</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">RoughnessMap</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TexturePack</string>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">ParticleEmitter</string>
        <string name="ClassCategory">Effects</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">80</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LightEmission</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LightInfluence</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Size</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">10</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Transparency</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Brightness</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">10</double>
            <double name="UINumTicks">2000</double>
          </Properties>
        </Item>

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Drag</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">5</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TimeScale</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">VelocityInheritance</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Rate</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">100</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Squash</string>
            <double name="UIMinimum">-3</double>
            <double name="UIMaximum">3</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ShapePartial</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Rotation</string>
            <double name="UIMinimum">-180</double>
            <double name="UIMaximum">180</double>
            <double name="UINumTicks">72</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">RotSpeed</string>
            <double name="UIMinimum">-360</double>
            <double name="UIMaximum">360</double>
            <double name="UINumTicks">72</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Speed</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">100</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Lifetime</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">5</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">FlipbookFramerate</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">30</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Sparkles</string>
        <string name="ClassCategory">Effects</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">42</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TimeScale</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Explosion</string>
        <string name="ClassCategory">Effects</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">36</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">BlastPressure</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">BlastRadius</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Position</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ExplosionType</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TimeScale</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Fire</string>
        <string name="ClassCategory">Effects</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">61</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Color</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Heat</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">SecondaryColor</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Size</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TimeScale</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Seat</string>
        <string name="ClassCategory">Interaction</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">35</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Platform</string>

        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">35</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">SkateboardPlatform</string>
        <bool name="Deprecated">true</bool>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">35</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">VehicleSeat</string>
        <string name="ClassCategory">Interaction</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">35</string>
        <string name="PreferredParent">Model</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Tool</string>
        <string name="ClassCategory">Interaction</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">17</string>
        <string name="PreferredParent">StarterPack</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Flag</string>
        <bool name="Deprecated">true</bool>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">38</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">CanBeDropped</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TeamColor</string>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">FlagStand</string>
        <bool name="Deprecated">true</bool>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">39</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">BackpackItem</string>
        <string name="ExplorerOrder">20</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Decal</string>
        <string name="ClassCategory">3D Interfaces</string>
        <string name="ExplorerOrder">40</string>
        <string name="ExplorerImageIndex">7</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Face</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Shiny</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Specular</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Transparency</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">JointInstance</string>
        <string name="ExplorerOrder">200</string>
        <string name="ExplorerImageIndex">34</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Active</string>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Message</string>
        <string name="ExplorerOrder">110</string>
        <string name="ExplorerImageIndex">33</string>
        <bool name="Deprecated">true</bool>
        <string name="PreferredParent">StarterGui</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Hint</string>
        <bool name="Deprecated">true</bool>
        <string name="ExplorerOrder">110</string>
        <string name="ExplorerImageIndex">33</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">IntValue</string>
        <string name="ClassCategory">Values</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">4</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">RayValue</string>
        <string name="ClassCategory">Values</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">4</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">IntConstrainedValue</string>
        <bool name="Deprecated">true</bool>
        <string name="ClassCategory">Values</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">4</string>
      </Properties>
      <Item class="ReflectionMetadataMember">
        <Properties>
          <string name="Name">MaxValue</string>
        </Properties>
      </Item>
      <Item class="ReflectionMetadataMember">
        <Properties>
          <string name="Name">MinValue</string>
        </Properties>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">DoubleConstrainedValue</string>
        <bool name="Deprecated">true</bool>
        <string name="ClassCategory">Values</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">4</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MaxValue</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MinValue</string>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">BoolValue</string>
        <string name="ClassCategory">Values</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">4</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">CustomEvent</string>
        <string name="ExplorerOrder">30</string>
        <bool name="Deprecated">true</bool>
        <string name="ExplorerImageIndex">4</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">CustomEventReceiver</string>
        <string name="ExplorerOrder">30</string>
        <bool name="Deprecated">true</bool>
        <string name="ExplorerImageIndex">4</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">FloorWire</string>
        <bool name="Deprecated">true</bool>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">4</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">CycleOffset</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">From</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">StudsBetweenTextures</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Texture</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TextureSize</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">To</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Velocity</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">WireRadius</string>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">NumberValue</string>
        <string name="ClassCategory">Values</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">4</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">StringValue</string>
        <string name="ClassCategory">Values</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">4</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Vector3Value</string>
        <string name="ClassCategory">Values</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">4</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">CFrameValue</string>
        <string name="ClassCategory">Values</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">4</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Color3Value</string>
        <string name="ClassCategory">Values</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">4</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">BrickColorValue</string>
        <string name="ClassCategory">Values</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">4</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">ValueBase</string>
        <string name="ClassCategory">Values</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">4</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">ObjectValue</string>
        <string name="ClassCategory">Values</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">4</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">SpecialMesh</string>
        <string name="ClassCategory">Meshes</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">8</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">BlockMesh</string>
        <string name="ClassCategory">Meshes</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">8</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">CylinderMesh</string>
        <string name="ClassCategory">Meshes</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">8</string>
        <string name="PreferredParent">BasePart</string>
        <bool name="Deprecated">true</bool>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">BevelMesh</string>
        <string name="ClassCategory">Meshes</string>
        <bool name="Browsable">false</bool>
        <bool name="Deprecated">true</bool>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">DataModelMesh</string>
        <bool name="Browsable">false</bool>

      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Texture</string>
        <string name="ClassCategory">3D Interfaces</string>
        <string name="ExplorerOrder">40</string>
        <string name="ExplorerImageIndex">10</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Sound</string>
        <string name="ClassCategory">Sounds</string>
        <string name="ExplorerOrder">10</string>
        <string name="ExplorerImageIndex">11</string>
      </Properties>
      <Item class="ReflectionMetadataFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">play</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
      </Item>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">PlayOnRemove</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Volume</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">10</double>
            <double name="UINumTicks">1000</double>
            <string name="SliderScaling">Square</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">PlaybackSpeed</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">20</double>
            <double name="UINumTicks">1000</double>
            <string name="SliderScaling">Square</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ChannelCount</string>
            <bool name="FFlag">EnableAudioChannelCountProperty</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">PlaybackRegionsEnabled</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Wire</string>
        <string name="ClassCategory">Sounds</string>
        <string name="ExplorerOrder">10</string>
        <string name="ExplorerImageIndex">11</string>
        <bool name="FFlag">EnableAudioWiringStudio</bool>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">AudioPlayer</string>
        <string name="ClassCategory">Sounds</string>
        <string name="ExplorerOrder">10</string>
        <string name="ExplorerImageIndex">11</string>
        <bool name="FFlag">EnableAudioWiringStudio</bool>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">PlaybackSpeed</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">20</double>
            <double name="UINumTicks">1000</double>
            <string name="SliderScaling">Square</string>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">AudioEmitter</string>
        <string name="ClassCategory">Sounds</string>
        <string name="ExplorerOrder">10</string>
        <string name="ExplorerImageIndex">11</string>
        <bool name="FFlag">EnableAudioWiringStudio</bool>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">AudioListener</string>
        <string name="ClassCategory">Sounds</string>
        <string name="ExplorerOrder">10</string>
        <string name="ExplorerImageIndex">11</string>
        <bool name="FFlag">EnableAudioWiringStudio</bool>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">AudioDeviceInput</string>
        <string name="ClassCategory">Sounds</string>
        <string name="ExplorerOrder">10</string>
        <string name="ExplorerImageIndex">11</string>
        <bool name="FFlag">EnableAudioWiringStudio</bool>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">AudioDeviceOutput</string>
        <string name="ClassCategory">Sounds</string>
        <string name="ExplorerOrder">10</string>
        <string name="ExplorerImageIndex">11</string>
        <bool name="FFlag">EnableAudioWiringStudio</bool>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">AudioChorus</string>
        <string name="ClassCategory">Sounds</string>
        <string name="ExplorerOrder">10</string>
        <string name="ExplorerImageIndex">11</string>
        <bool name="FFlag">EnableAudioWiringStudio</bool>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Depth</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Mix</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Rate</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">20</double>
            <double name="UINumTicks">1000</double>
            <string name="SliderScaling">Square</string>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">AudioDistortion</string>
        <string name="ClassCategory">Sounds</string>
        <string name="ExplorerOrder">10</string>
        <string name="ExplorerImageIndex">11</string>
        <bool name="FFlag">EnableAudioWiringStudio</bool>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Level</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">AudioFlanger</string>
        <string name="ClassCategory">Sounds</string>
        <string name="ExplorerOrder">10</string>
        <string name="ExplorerImageIndex">11</string>
        <bool name="FFlag">EnableAudioWiringStudio</bool>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Depth</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Mix</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Rate</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">20</double>
            <double name="UINumTicks">1000</double>
            <string name="SliderScaling">Square</string>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">AudioReverb</string>
        <string name="ClassCategory">Sounds</string>
        <string name="ExplorerOrder">10</string>
        <string name="ExplorerImageIndex">11</string>
        <bool name="FFlag">EnableAudioWiringStudio</bool>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Density</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Diffusion</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ReferenceFrequency</string>
            <double name="UIMinimum">20</double>
            <double name="UIMaximum">20000</double>
            <double name="UINumTicks">20000</double>
            <string name="SliderScaling">Square</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">DecayRatio</string>
            <double name="UIMinimum">0.1</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">DecayTime</string>
            <double name="UIMinimum">0.1</double>
            <double name="UIMaximum">20</double>
            <double name="UINumTicks">1000</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">EarlyDelayTime</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">0.1</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LateDelayTime</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">0.1</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">HighCutFrequency</string>
            <double name="UIMinimum">20</double>
            <double name="UIMaximum">20000</double>
            <double name="UINumTicks">20000</double>
            <string name="SliderScaling">Square</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LowShelfFrequency</string>
            <double name="UIMinimum">20</double>
            <double name="UIMaximum">20000</double>
            <double name="UINumTicks">20000</double>
            <string name="SliderScaling">Square</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LowShelfGain</string>
            <double name="UIMinimum">-36</double>
            <double name="UIMaximum">12</double>
            <double name="UINumTicks">1000</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">DryLevel</string>
            <double name="UIMinimum">-80</double>
            <double name="UIMaximum">20</double>
            <double name="UINumTicks">1000</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">WetLevel</string>
            <double name="UIMinimum">-80</double>
            <double name="UIMaximum">20</double>
            <double name="UINumTicks">1000</double>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">AudioEcho</string>
        <string name="ClassCategory">Sounds</string>
        <string name="ExplorerOrder">10</string>
        <string name="ExplorerImageIndex">11</string>
        <bool name="FFlag">EnableAudioWiringStudio</bool>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">DelayTime</string>
            <double name="UIMinimum">0.001</double>
            <double name="UIMaximum">5</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Feedback</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">DryLevel</string>
            <double name="UIMinimum">-80</double>
            <double name="UIMaximum">10</double>
            <double name="UINumTicks">1000</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">WetLevel</string>
            <double name="UIMinimum">-80</double>
            <double name="UIMaximum">10</double>
            <double name="UINumTicks">1000</double>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">AudioEqualizer</string>
        <string name="ClassCategory">Sounds</string>
        <string name="ExplorerOrder">10</string>
        <string name="ExplorerImageIndex">11</string>
        <bool name="FFlag">EnableAudioWiringStudio</bool>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MidRange</string>
            <double name="UIMinimum">200</double>
            <double name="UIMaximum">20000</double>
            <double name="UINumTicks">20000</double>
            <string name="SliderScaling">Square</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LowGain</string>
            <double name="UIMinimum">-80</double>
            <double name="UIMaximum">10</double>
            <double name="UINumTicks">1000</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MidGain</string>
            <double name="UIMinimum">-80</double>
            <double name="UIMaximum">10</double>
            <double name="UINumTicks">1000</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">HighGain</string>
            <double name="UIMinimum">-80</double>
            <double name="UIMaximum">10</double>
            <double name="UINumTicks">1000</double>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">AudioFader</string>
        <string name="ClassCategory">Sounds</string>
        <string name="ExplorerOrder">10</string>
        <string name="ExplorerImageIndex">11</string>
        <bool name="FFlag">EnableAudioWiringStudio</bool>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Volume</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">3</double>
            <double name="UINumTicks">100</double>
            <string name="SliderScaling">Square</string>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">AudioAnalyzer</string>
        <string name="ClassCategory">Sounds</string>
        <string name="ExplorerOrder">10</string>
        <string name="ExplorerImageIndex">11</string>
        <bool name="FFlag">EnableAudioWiringStudio</bool>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">AudioPitchShifter</string>
        <string name="ClassCategory">Sounds</string>
        <string name="ExplorerOrder">10</string>
        <string name="ExplorerImageIndex">11</string>
        <bool name="FFlag">EnableAudioWiringStudio</bool>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Pitch</string>
            <double name="UIMinimum">0.5</double>
            <double name="UIMaximum">2</double>
            <double name="UINumTicks">100</double>
            <string name="SliderScaling">Square</string>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">AudioCompressor</string>
        <string name="ClassCategory">Sounds</string>
        <string name="ExplorerOrder">10</string>
        <string name="ExplorerImageIndex">11</string>
        <bool name="FFlag">EnableAudioWiringStudio</bool>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Attack</string>
            <double name="UIMinimum">0.0001</double>
            <double name="UIMaximum">5</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MakeupGain</string>
            <double name="UIMinimum">-30</double>
            <double name="UIMaximum">30</double>
            <double name="UINumTicks">1000</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Ratio</string>
            <double name="UIMinimum">1</double>
            <double name="UIMaximum">50</double>
            <double name="UINumTicks">1000</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Release</string>
            <double name="UIMinimum">0.01</double>
            <double name="UIMaximum">5</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Threshold</string>
            <double name="UIMinimum">-60</double>
            <double name="UIMaximum">0</double>
            <double name="UINumTicks">1000</double>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">EchoSoundEffect</string>
        <string name="ClassCategory">Sounds</string>
        <string name="ExplorerOrder">20</string>
        <string name="ExplorerImageIndex">84</string>
        <string name="PreferredParent">Sound</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Delay</string>
            <double name="UIMinimum">0.1</double>
            <double name="UIMaximum">5</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Feedback</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">DryLevel</string>
            <double name="UIMinimum">-80</double>
            <double name="UIMaximum">10</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">WetLevel</string>
            <double name="UIMinimum">-80</double>
            <double name="UIMaximum">100</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">FlangeSoundEffect</string>
        <string name="ClassCategory">Sounds</string>
        <string name="ExplorerOrder">20</string>
        <string name="ExplorerImageIndex">84</string>
        <string name="PreferredParent">Sound</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Mix</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Depth</string>
            <double name="UIMinimum">0.01</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Rate</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">20</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">DistortionSoundEffect</string>
        <string name="ClassCategory">Sounds</string>
        <string name="ExplorerOrder">20</string>
        <string name="ExplorerImageIndex">84</string>
        <string name="PreferredParent">Sound</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Level</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">PitchShiftSoundEffect</string>
        <string name="ClassCategory">Sounds</string>
        <string name="ExplorerOrder">20</string>
        <string name="ExplorerImageIndex">84</string>
        <string name="PreferredParent">Sound</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Octave</string>
            <double name="UIMinimum">0.5</double>
            <double name="UIMaximum">2</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">ChannelSelectorSoundEffect</string>
        <string name="ClassCategory">Sounds</string>
        <string name="ExplorerOrder">20</string>
        <string name="ExplorerImageIndex">84</string>
        <string name="PreferredParent">Sound</string>
        <string name="FFlag">EnableAudioChannelSelector</string>
      </Properties>
    </Item>


    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">ChorusSoundEffect</string>
        <string name="ClassCategory">Sounds</string>
        <string name="ExplorerOrder">20</string>
        <string name="ExplorerImageIndex">84</string>
        <string name="PreferredParent">Sound</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Mix</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Rate</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">20</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Depth</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">TremoloSoundEffect</string>
        <string name="ClassCategory">Sounds</string>
        <string name="ExplorerOrder">20</string>
        <string name="ExplorerImageIndex">84</string>
        <string name="PreferredParent">Sound</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Frequency</string>
            <double name="UIMinimum">0.1</double>
            <double name="UIMaximum">20</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Depth</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Duty</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">ReverbSoundEffect</string>
        <string name="ClassCategory">Sounds</string>
        <string name="ExplorerOrder">20</string>
        <string name="ExplorerImageIndex">84</string>
        <string name="PreferredParent">Sound</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">DecayTime</string>
            <double name="UIMinimum">0.1</double>
            <double name="UIMaximum">20</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Diffusion</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Density</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">DryLevel</string>
            <double name="UIMinimum">-80</double>
            <double name="UIMaximum">20</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">WetLevel</string>
            <double name="UIMinimum">-80</double>
            <double name="UIMaximum">20</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">EqualizerSoundEffect</string>
        <string name="ClassCategory">Sounds</string>
        <string name="ExplorerOrder">20</string>
        <string name="ExplorerImageIndex">84</string>
        <string name="PreferredParent">Sound</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LowGain</string>
            <double name="UIMinimum">-80</double>
            <double name="UIMaximum">10</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MidGain</string>
            <double name="UIMinimum">-80</double>
            <double name="UIMaximum">10</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">HighGain</string>
            <double name="UIMinimum">-80</double>
            <double name="UIMaximum">10</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">CompressorSoundEffect</string>
        <string name="ClassCategory">Sounds</string>
        <string name="ExplorerOrder">20</string>
        <string name="ExplorerImageIndex">84</string>
        <string name="PreferredParent">Sound</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Threshold</string>
            <double name="UIMinimum">-80</double>
            <double name="UIMaximum">0</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Attack</string>
            <double name="UIMinimum">0.001</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Release</string>
            <double name="UIMinimum">0.001</double>
            <double name="UIMaximum">5</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Ratio</string>
            <double name="UIMinimum">1</double>
            <double name="UIMaximum">50</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GainMakeup</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">30</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">SoundGroup</string>
        <string name="ClassCategory">Sounds</string>
        <string name="ExplorerOrder">20</string>
        <string name="ExplorerImageIndex">85</string>
        <string name="PreferredParent">SoundService</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Volume</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">10</double>
            <double name="UINumTicks">1000</double>
            <string name="SliderScaling">Square</string>
          </Properties>
        </Item>
      </Item>
    </Item>


    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">StockSound</string>
        <string name="Browsable">false</string>
        <string name="ExplorerOrder">-1</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">SoundService</string>
        <string name="ExplorerOrder">500</string>
        <string name="ExplorerImageIndex">31</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">AmbientReverb</string>

          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">RespectFilteringEnabled</string>
            <bool name="FFlag">!DisableSoundServiceRespectFilteringEnabled</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">DopplerScale</string>

          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">DistanceFactor</string>

          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">RolloffScale</string>

          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">VolumetricAudio</string>
            <bool name="FFlag">AudioToggleVolumetricPanning</bool>

          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Backpack</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">20</string>
        <string name="Insertable">false</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">StarterPack</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">20</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">StarterPlayer</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">79</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">DeathStyle</string>
            <string name="FFlag">EnableDeathStyle</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">AvatarJointUpgrade</string>
            <string name="FFlag">AvatarJointUpgrade</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LuaCharacterController</string>
            <string name="FFlag">EnableLuaCharacterController</string>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">StarterGear</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">20</string>
        <string name="Insertable">false</string>
      </Properties>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">CoreGui</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">46</string>
      </Properties>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">CorePackages</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">20</string>
      </Properties>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">RobloxPluginGuiService</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">46</string>
      </Properties>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">PluginGuiService</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">46</string>
      </Properties>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">PluginDebugService</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">46</string>
      </Properties>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Studio</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Show Plugin GUI Service in Explorer</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Main Volume</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">250</double>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">UIGridStyleLayout</string>
        <string name="ClassCategory">GUI</string>
        <string name="Browsable">false</string>
        <string name="PreferredParent">GuiBase2d</string>
      </Properties>

      <Item class="ReflectionMetadataFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">SetCustomSortFunction</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ApplyLayout</string>
          </Properties>
        </Item>
      </Item>

      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">SortOrder</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">FillDirection</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">HorizontalAlignment</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">VerticalAlignment</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">UIListLayout</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">26</string>
        <string name="ClassCategory">GUI</string>
        <string name="PreferredParent">GuiBase2d</string>
      </Properties>

      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Padding</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">UIGridLayout</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">26</string>
        <string name="ClassCategory">GUI</string>
        <string name="PreferredParent">GuiBase2d</string>
      </Properties>

      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">CellSize</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">CellPadding</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">FillDirectionMaxCells</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">20</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">AbsoluteSize</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">StartCorner</string>
          </Properties>
        </Item>
      </Item>

    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">UIPageLayout</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">26</string>
        <string name="ClassCategory">GUI</string>
        <string name="PreferredParent">GuiBase2d</string>
      </Properties>

      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">CurrentPage</string>
          </Properties>
        </Item>

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Circular</string>
          </Properties>
        </Item>

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Padding</string>
          </Properties>
        </Item>

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Animated</string>
          </Properties>
        </Item>

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">EasingStyle</string>
          </Properties>
        </Item>

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">EasingDirection</string>
          </Properties>
        </Item>

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TweenTime</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">5</double>
            <double name="UINumTicks">500</double>
          </Properties>
        </Item>
      </Item>

      <Item class="ReflectionMetadataFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Next</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Previous</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">JumpTo</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">JumpToIndex</string>
          </Properties>
        </Item>
      </Item>

      <Item class="ReflectionMetadataEvents">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">PageEnter</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">PageLeave</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Stopped</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">UITableLayout</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">26</string>
        <string name="ClassCategory">GUI</string>
        <string name="PreferredParent">GuiBase2d</string>
      </Properties>

      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Padding</string>
          </Properties>
        </Item>

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">FillEmptySpaceRows</string>
          </Properties>
        </Item>

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">FillEmptySpaceColumns</string>
          </Properties>
        </Item>

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MajorAxis</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">UISizeConstraint</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">26</string>
        <string name="ClassCategory">GUI</string>
        <string name="PreferredParent">GuiBase2d</string>
      </Properties>

      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MinSize</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MaxSize</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">UITextSizeConstraint</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">26</string>
        <string name="ClassCategory">GUI</string>
        <string name="PreferredParent">GuiBase2d</string>
      </Properties>

      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MinTextSize</string>
            <double name="UIMinimum">1</double>
            <double name="UIMaximum">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MaxTextSize</string>
            <double name="UIMinimum">1</double>
            <double name="UIMaximum">100</double>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">UIAspectRatioConstraint</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">26</string>
        <string name="ClassCategory">GUI</string>
      </Properties>

      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">AspectRatio</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">10</double>
            <double name="UINumTicks">1000</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">AspectType</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">DominantAxis</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">UIScale</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">26</string>
        <string name="ClassCategory">GUI</string>
        <string name="PreferredParent">GuiBase2d</string>
      </Properties>

      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Scale</string>
            <double name="UIMinimum">0.1</double>
            <double name="UIMaximum">10</double>
            <double name="UINumTicks">990</double>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">UIPadding</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">26</string>
        <string name="ClassCategory">GUI</string>
        <string name="PreferredParent">GuiBase2d</string>
      </Properties>

      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">PaddingLeft</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">PaddingRight</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">PaddingTop</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">PaddingBottom</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">UIGradient</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">26</string>
        <string name="ClassCategory">GUI</string>
        <string name="PreferredParent">GuiBase2d</string>
      </Properties>

      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Color</string>
          </Properties>
        </Item>

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Transparency</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Rotation</string>
            <double name="UIMinimum">-180</double>
            <double name="UIMaximum">180</double>
            <double name="UINumTicks">360</double>
          </Properties>
        </Item>

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Offset</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">UICorner</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">26</string>
        <string name="ClassCategory">GUI</string>
        <string name="PreferredParent">GuiBase2d</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">CornerRadius</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">UIStroke</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">26</string>
        <string name="ClassCategory">GUI</string>
        <string name="PreferredParent">GuiBase2d</string>
      </Properties>

      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Color</string>
          </Properties>
        </Item>

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Transparency</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Thickness</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">25</double>
            <double name="UINumTicks">250</double>
          </Properties>
        </Item>

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Enabled</string>
          </Properties>
        </Item>

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LineJoinMode</string>
          </Properties>
        </Item>

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ApplyStrokeMode</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">TweenBase</string>
        <string name="Browsable">false</string>
      </Properties>

      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">PlaybackState</string>
          </Properties>
        </Item>
      </Item>

      <Item class="ReflectionMetadataFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Play</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Pause</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Cancel</string>
          </Properties>
        </Item>
      </Item>

      <Item class="ReflectionMetadataEvents">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Completed</string>
          </Properties>
        </Item>
      </Item>
    </Item>


    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Tween</string>
      </Properties>

      <Item class="ReflectionMetadataFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Instance</string>
          </Properties>
        </Item>

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TweenInfo</string>
          </Properties>
        </Item>
      </Item>
    </Item>


    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">TweenService</string>
      </Properties>

      <Item class="ReflectionMetadataFunctions">
        <Item class="ReflectionMetadataEvents">
          <Item class="ReflectionMetadataMember">
            <Properties>
              <string name="Name">Create</string>
            </Properties>
          </Item>
          <Item class="ReflectionMetadataMember">
            <Properties>
              <string name="Name">GetValue</string>
            </Properties>
          </Item>
        </Item>
      </Item>
    </Item>


    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">StarterGui</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">46</string>
      </Properties>

      <Item class="ReflectionMetadataFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">SetCoreGuiEnabled</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetCoreGuiEnabled</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">GuiService</string>
      </Properties>

      <Item class="ReflectionMetadataFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetGuiInset</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">ContextActionService</string>
      </Properties>

      <Item class="ReflectionMetadataFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">BindAction</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">SetTitle</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">SetDescription</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">SetImage</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">SetPosition</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">UnbindAction</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">UnbindAllActions</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetBoundActionInfo</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetAllBoundActionInfo</string>
          </Properties>
        </Item>
      </Item>

      <Item class="ReflectionMetadataYieldFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetButton</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">PointsService</string>
        <bool name="Deprecated">true</bool>
      </Properties>

      <Item class="ReflectionMetadataEvents">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">PointsAwarded</string>
          </Properties>
        </Item>
      </Item>

      <Item class="ReflectionMetadataYieldFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">AwardPoints</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetPointBalance</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetGamePointBalance</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetAwardablePoints</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Chat</string>
        <string name="ExplorerOrder">510</string>
        <string name="ExplorerImageIndex">33</string>
        <token name="ServiceVisibility">2</token>        <!-- WithChildren -->
      </Properties>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">ChatService</string>
        <string name="ExplorerOrder">510</string>
        <string name="ExplorerImageIndex">33</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">TextChatService</string>
        <string name="ClassCategory">Text Chat</string>
        <string name="ExplorerOrder">511</string>
        <string name="ExplorerImageIndex">143</string>
      </Properties>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">ChatWindowConfiguration</string>
        <string name="ClassCategory">Text Chat</string>
        <string name="ExplorerOrder">10</string>
        <string name="ExplorerImageIndex">141</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">BackgroundTransparency</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TextSize</string>
            <double name="UIMinimum">1</double>
            <double name="UIMaximum">100</double>
            <double name="UINumTicks">99</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TextStrokeTransparency</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">HeightScale</string>
            <double name="UIMinimum">0.5</double>
            <double name="UIMaximum">2</double>
            <double name="UINumTicks">1000</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">WidthScale</string>
            <double name="UIMinimum">0.5</double>
            <double name="UIMaximum">2</double>
            <double name="UINumTicks">1000</double>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">ChatInputBarConfiguration</string>
        <string name="ClassCategory">Text Chat</string>
        <string name="ExplorerOrder">11</string>
        <string name="ExplorerImageIndex">142</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">BackgroundTransparency</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TextSize</string>
            <double name="UIMinimum">1</double>
            <double name="UIMaximum">100</double>
            <double name="UINumTicks">99</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TextStrokeTransparency</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">BubbleChatConfiguration</string>
        <string name="ClassCategory">Text Chat</string>
        <string name="ExplorerOrder">12</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">BackgroundTransparency</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TextSize</string>
            <double name="UIMinimum">1</double>
            <double name="UIMaximum">100</double>
            <double name="UINumTicks">99</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">BubblesSpacing</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">20</double>
            <double name="UINumTicks">200</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">VerticalStudsOffset</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">10</double>
            <double name="UINumTicks">200</double>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">TextChannel</string>
        <string name="ClassCategory">Text Chat</string>
        <string name="ExplorerOrder">13</string>
        <string name="ExplorerImageIndex">140</string>
        <string name="PreferredParent">TextChatService</string>
      </Properties>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">TextSource</string>
        <string name="ClassCategory">Text Chat</string>
        <string name="ExplorerOrder">10</string>
        <string name="ExplorerImageIndex">139</string>
        <string name="PreferredParent">TextChannel</string>
      </Properties>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">TextChatCommand</string>
        <string name="ClassCategory">Text Chat</string>
        <string name="ExplorerOrder">14</string>
        <string name="ExplorerImageIndex">138</string>
        <string name="PreferredParent">TextChatService</string>
      </Properties>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">VoiceChatInternal</string>
        <string name="Insertable">false</string>
        <string name="Browsable">false</string>
      </Properties>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">VoiceChatService</string>
        <string name="ExplorerOrder">520</string>
        <string name="ExplorerImageIndex">136</string>
        <token name="ServiceVisibility">1</token>        <!-- Off -->
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">EnableDefaultVoice</string>
            <string name="FFlag">VoiceServiceEnableDefaultVoice</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">UseAudioApi</string>
            <string name="FFlag">VoiceInputUseNewAudioApi5</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">LocalizationTable</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">97</string>
        <string name="ClassCategory">Localization</string>
      </Properties>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">LocalizationService</string>
        <string name="ExplorerOrder">530</string>
        <string name="ExplorerImageIndex">92</string>
        <token name="ServiceVisibility">2</token>        <!-- WithChildren -->
      </Properties>
      <Item class="ReflectionMetadataMember">
        <Properties>
          <string name="Name">PreferredLanguage</string>
        </Properties>
      </Item>
      <Item class="ReflectionMetadataMember">
        <Properties>
          <string name="Name">GetLocaleId</string>
        </Properties>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">MarketplaceService</string>
        <string name="ExplorerImageIndex">46</string>
      </Properties>

      <Item class="ReflectionMetadataFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">PromptPurchase</string>
          </Properties>
        </Item>
      </Item>

      <Item class="ReflectionMetadataYieldFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetProductInfo</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">PlayerOwnsAsset</string>
          </Properties>
        </Item>
      </Item>
      <Item class="ReflectionMetadataCallbacks">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ProcessReceipt</string>
          </Properties>
        </Item>
      </Item>
      <Item class="ReflectionMetadataEvents">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">PromptPurchaseFinished</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">UserInputService</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TouchEnabled</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">KeyboardEnabled</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MouseEnabled</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">AccelerometerEnabled</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GyroscopeEnabled</string>
          </Properties>
        </Item>
      </Item>

      <Item class="ReflectionMetadataEvents">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TouchTap</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TouchPinch</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TouchSwipe</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TouchLongPress</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TouchRotate</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TouchPan</string>
          </Properties>
        </Item>

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TouchStarted</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TouchMoved</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TouchEnded</string>
          </Properties>
        </Item>

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">InputBegan</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">InputChanged</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">InputEnded</string>
          </Properties>
        </Item>

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TextBoxFocused</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TextBoxFocusReleased</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">DeviceAccelerationChanged</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">DeviceGravityChanged</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">DeviceRotationChanged</string>
          </Properties>
        </Item>

      </Item>
      <Item class="ReflectionMetadataFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetDeviceAcceleration</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetDeviceGravity</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetDeviceRotation</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Atmosphere</string>
        <string name="ClassCategory">Environment</string>
        <string name="ExplorerOrder">5</string>
        <string name="ExplorerImageIndex">28</string>
        <string name="PreferredParent">Lighting</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Density</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">1000</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Offset</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">1000</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Height</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">3</double>
            <double name="UINumTicks">1000</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Color</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Decay</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Haze</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">10</double>
            <double name="UINumTicks">1000</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Glare</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">10</double>
            <double name="UINumTicks">1000</double>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Clouds</string>
        <string name="ClassCategory">Environment</string>
        <string name="ExplorerOrder">5</string>
        <string name="ExplorerImageIndex">28</string>
        <string name="PreferredParent">Workspace</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Enabled</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Color</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Cover</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">1000</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Density</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">1000</double>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">MaterialVariant</string>
        <string name="ClassCategory">3D Interfaces</string>
        <string name="ExplorerOrder">41</string>
        <string name="ExplorerImageIndex">130</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">BaseMaterial</string>
            <string name="PropertyOrder">0</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ColorMap</string>
            <string name="PropertyOrder">1</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MetalnessMap</string>
            <string name="PropertyOrder">2</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">NormalMap</string>
            <string name="PropertyOrder">3</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">RoughnessMap</string>
            <string name="PropertyOrder">4</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">StudsPerTile</string>
            <double name="UIMinimum">0.1</double>
            <double name="UIMaximum">20</double>
            <double name="UINumTicks">200</double>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">TerrainDetail</string>
        <string name="ClassCategory">3D Interfaces</string>
        <string name="ExplorerOrder">42</string>
        <string name="ExplorerImageIndex">144</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Face</string>
            <string name="PropertyOrder">0</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ColorMap</string>
            <string name="PropertyOrder">1</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MetalnessMap</string>
            <string name="PropertyOrder">2</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">NormalMap</string>
            <string name="PropertyOrder">3</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">RoughnessMap</string>
            <string name="PropertyOrder">4</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">StudsPerTile</string>
            <double name="UIMinimum">0.1</double>
            <double name="UIMaximum">20</double>
            <double name="UINumTicks">200</double>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">MaterialService</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">131</string>
      </Properties>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Sky</string>
        <string name="ClassCategory">Environment</string>
        <string name="ExplorerOrder">5</string>
        <string name="ExplorerImageIndex">28</string>
        <string name="PreferredParent">Lighting</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">ColorCorrectionEffect</string>
        <string name="ClassCategory">Post Processing Effects</string>
        <string name="ExplorerOrder">20</string>
        <string name="ExplorerImageIndex">83</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Brightness</string>
            <double name="UIMinimum">-1</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Contrast</string>
            <double name="UIMinimum">-1</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Saturation</string>
            <double name="UIMinimum">-1</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">BloomEffect</string>
        <string name="ClassCategory">Post Processing Effects</string>
        <string name="ExplorerOrder">20</string>
        <string name="ExplorerImageIndex">83</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Intensity</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Threshold</string>
            <double name="UIMinimum">0.8</double>
            <double name="UIMaximum">4</double>
            <double name="UINumTicks">1000</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Size</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">56</double>
            <double name="UINumTicks">56</double>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">BlurEffect</string>
        <string name="ClassCategory">Post Processing Effects</string>
        <string name="ExplorerOrder">20</string>
        <string name="ExplorerImageIndex">83</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Size</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">56</double>
            <double name="UINumTicks">56</double>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Highlight</string>
        <string name="ClassCategory">Effects</string>
        <string name="ExplorerOrder">20</string>
        <string name="ExplorerImageIndex">133</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">FillTransparency</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">OutlineTransparency</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>

      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">DepthOfFieldEffect</string>
        <string name="ClassCategory">Post Processing Effects</string>
        <string name="ExplorerOrder">20</string>
        <string name="ExplorerImageIndex">83</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">FocusDistance</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">200.0</double>
            <double name="UINumTicks">10000</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">InFocusRadius</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">50.0</double>
            <double name="UINumTicks">10000</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">NearIntensity</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">10000</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">FarIntensity</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">10000</double>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">SunRaysEffect</string>
        <string name="ClassCategory">Post Processing Effects</string>
        <string name="ExplorerOrder">20</string>
        <string name="ExplorerImageIndex">83</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Intensity</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">1000</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Spread</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">1000</double>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Motor</string>
        <string name="ExplorerOrder">20</string>
        <string name="Insertable">false</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">ControllerPartSensor</string>
        <string name="ClassCategory">Avatar</string>
        <string name="ExplorerOrder">20</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">BuoyancySensor</string>
        <string name="ClassCategory">Avatar</string>
        <string name="ExplorerOrder">20</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">ControllerManager</string>
        <string name="ClassCategory">Avatar</string>
        <string name="ExplorerOrder">20</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">GroundController</string>
        <string name="ClassCategory">Avatar</string>
        <string name="ExplorerOrder">20</string>
        <string name="PreferredParent">ControllerManager</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">AirController</string>
        <string name="ClassCategory">Avatar</string>
        <string name="ExplorerOrder">20</string>
        <string name="PreferredParent">ControllerManager</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">ClimbController</string>
        <string name="ClassCategory">Avatar</string>
        <string name="ExplorerOrder">20</string>
        <string name="PreferredParent">ControllerManager</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">SwimController</string>
        <string name="ClassCategory">Avatar</string>
        <string name="ExplorerOrder">20</string>
        <string name="PreferredParent">ControllerManager</string>
      </Properties>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Humanoid</string>
        <string name="ClassCategory">Avatar</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">9</string>
        <string name="PreferredParent">Model</string>
      </Properties>
      <Item class="ReflectionMetadataFunctions">

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MoveTo</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Jump</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Sit</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TakeDamage</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">UnequipTools</string>

          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">EquipTool</string>

          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ReplaceBodyPartR15</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetBodyPartR15</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetMoveVelocity</string>
            <string name="Description">Returns the movement velocity based on the player input.</string>
            <string name="FFlag">EnableGetMoveVelocity2</string>
          </Properties>
        </Item>
      </Item>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">NameOcclusion</string>

          </Properties>
          <Properties>
            <string name="Name">Health</string>
          </Properties>
          <Properties>
            <string name="Name">MaxHealth</string>
          </Properties>
          <Properties>
            <string name="Name">TargetPoint</string>
          </Properties>
          <Properties>
            <string name="Name">Torso</string>
            <bool name="Deprecated">true</bool>
          </Properties>
          <Properties>
            <string name="Name">LeftLeg</string>
            <bool name="Deprecated">true</bool>
          </Properties>
          <Properties>
            <string name="Name">RightLeg</string>
            <bool name="Deprecated">true</bool>
          </Properties>
          <Properties>
            <string name="Name">CollisionType</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">EvaluateStateMachine</string>
            <string name="FFlag">EnableEvaluateStateMachine3</string>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">BodyColors</string>
        <string name="ClassCategory">Avatar</string>
        <string name="ExplorerOrder">20</string>
        <string name="PreferredParent">Model</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Shirt</string>
        <string name="ClassCategory">Avatar</string>
        <string name="ExplorerOrder">20</string>
        <string name="ExplorerImageIndex">43</string>
        <string name="PreferredParent">Model</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Pants</string>
        <string name="ClassCategory">Avatar</string>
        <string name="ExplorerOrder">20</string>
        <string name="ExplorerImageIndex">44</string>
        <string name="PreferredParent">Model</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">ShirtGraphic</string>
        <string name="ClassCategory">Avatar</string>
        <string name="ExplorerOrder">20</string>
        <string name="ExplorerImageIndex">40</string>
        <string name="PreferredParent">Model</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Skin</string>
        <bool name="Deprecated">true</bool>
        <string name="ExplorerOrder">20</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">DebugSettings</string>
        <bool name="Browsable">false</bool>
        <string name="ExplorerOrder">20</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">FaceInstance</string>
        <bool name="Browsable">false</bool>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">GameSettings</string>
        <bool name="Browsable">false</bool>
        <string name="ExplorerOrder">20</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">GlobalSettings</string>
        <bool name="Browsable">false</bool>
        <string name="ExplorerOrder">20</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Item</string>
        <bool name="Browsable">false</bool>
        <string name="ExplorerOrder">20</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">NetworkPeer</string>
        <bool name="Browsable">false</bool>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">NetworkSettings</string>
        <bool name="Browsable">false</bool>
        <string name="ExplorerOrder">20</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">PVInstance</string>
        <bool name="Browsable">false</bool>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">CoordinateFrame</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Origin Orientation</string>
            <string name="PropertyOrder">400</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Origin Position</string>
            <string name="PropertyOrder">300</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Pivot Offset Position</string>
            <string name="PropertyOrder">300</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Pivot Offset Orientation</string>
            <string name="PropertyOrder">400</string>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">PackageLink</string>
        <string name="ExplorerOrder">1</string>
        <string name="ExplorerImageIndex">98</string>
        <bool name="Browsable">false</bool>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Status</string>
            <bool name="Browsable">true</bool>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">RenderSettings</string>
        <bool name="Browsable">false</bool>
        <string name="ExplorerOrder">20</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">RootInstance</string>
        <bool name="Browsable">false</bool>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">ServiceProvider</string>
        <bool name="Browsable">false</bool>
      </Properties>
      <Item class="ReflectionMetadataFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">service</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetService</string>
            <string name="Constraint">Instance:isService:0</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">FindService</string>
            <string name="Constraint">Instance:isService:0</string>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">ProfilingItem</string>
        <bool name="Browsable">false</bool>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">NetworkMarker</string>
        <bool name="Browsable">false</bool>
      </Properties>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Hopper</string>
        <bool name="Deprecated">true</bool>
        <string name="ExplorerOrder">20</string>
      </Properties>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Instance</string>
        <bool name="Browsable">false</bool>
      </Properties>

      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Archivable</string>
            <string name="PropertyOrder">990</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ClassName</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Parent</string>
          </Properties>
        </Item>
      </Item>

      <Item class="ReflectionMetadataFunctions">

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetDebugId</string>
            <bool name="Browsable">false</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Clone</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">clone</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">isA</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">IsA</string>
            <string name="Constraint">Instance:Any:0</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">FindFirstChild</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">FindFirstChildOfClass</string>
            <string name="Constraint">Instance:isScriptCreatable:0</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">FindFirstChildWhichIsA</string>
            <string name="Constraint">Instance:Any:0</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">FindFirstAncestor</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">FindFirstAncestorOfClass</string>
            <string name="Constraint">Instance:isScriptCreatable:0</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">FindFirstAncestorWhichIsA</string>
            <string name="Constraint">Instance:Any:0</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetFullName</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">children</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">getChildren</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetChildren</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetDescendants</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Remove</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">remove</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ClearAllChildren</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Destroy</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">findFirstChild</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
      </Item>
      <Item class="ReflectionMetadataEvents">

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">AncestryChanged</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">DescendantAdded</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">DescendantRemoving</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Changed</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">BodyGyro</string>
        <string name="ClassCategory">Legacy Body Movers</string>
        <string name="ExplorerOrder">140</string>
        <string name="ExplorerImageIndex">14</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MaxTorque</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">maxTorque</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">D</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">P</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">CFrame</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">cframe</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">BodyPosition</string>
        <string name="ClassCategory">Legacy Body Movers</string>
        <string name="ExplorerOrder">140</string>
        <string name="ExplorerImageIndex">14</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MaxForce</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">maxForce</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">D</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">P</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Position</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">position</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">RocketPropulsion</string>
        <string name="ClassCategory">Legacy Body Movers</string>
        <string name="ExplorerOrder">140</string>
        <string name="ExplorerImageIndex">14</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">BodyVelocity</string>
        <string name="ClassCategory">Legacy Body Movers</string>
        <string name="ExplorerOrder">140</string>
        <string name="ExplorerImageIndex">14</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MaxForce</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">maxForce</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">P</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Velocity</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">velocity</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">BodyAngularVelocity</string>
        <string name="ClassCategory">Legacy Body Movers</string>
        <string name="ExplorerOrder">140</string>
        <string name="ExplorerImageIndex">14</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MaxTorque</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">maxTorque</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">P</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">AngularVelocity</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">angularVelocity</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">BodyForce</string>
        <string name="ClassCategory">Legacy Body Movers</string>
        <string name="ExplorerOrder">140</string>
        <string name="ExplorerImageIndex">14</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Force</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">force</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">BodyThrust</string>
        <string name="ClassCategory">Legacy Body Movers</string>
        <string name="ExplorerOrder">140</string>
        <string name="ExplorerImageIndex">14</string>
        <string name="PreferredParent">BasePart</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Force</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">force</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Location</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">location</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Hole</string>
        <bool name="Deprecated">true</bool>
        <string name="ExplorerOrder">20</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Feature</string>
        <string name="ExplorerOrder">20</string>
      </Properties>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Teams</string>
        <string name="ExplorerOrder">140</string>
        <string name="ExplorerImageIndex">23</string>
        <string name="PreferredParent">Teams</string>
      </Properties>
      <Item class="ReflectionMetadataFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetPlayers</string>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Team</string>
        <string name="ClassCategory">Interaction</string>
        <string name="ExplorerOrder">10</string>
        <string name="ExplorerImageIndex">24</string>
        <string name="PreferredParent">Teams</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">SpawnLocation</string>
        <string name="ClassCategory">Interaction</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">25</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">NetworkClient</string>
        <bool name="Insertable">false</bool>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">16</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">NetworkServer</string>
        <bool name="Insertable">false</bool>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">15</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">LuaSourceContainer</string>
        <bool name="Browsable">false</bool>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">CurrentEditor</string>
            <bool name="EditingDisabled">true</bool>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Script</string>
        <string name="ClassCategory">Scripting</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">6</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LinkedScript</string>

          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">LocalScript</string>
        <string name="ClassCategory">Scripting</string>
        <string name="ExplorerOrder">40</string>
        <string name="ExplorerImageIndex">18</string>
      </Properties>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">RenderingTest</string>
        <string name="Insertable">true</string>
        <string name="ClassCategory">Scripting</string>
        <string name="ExplorerOrder">40</string>
        <string name="ExplorerImageIndex">5</string>
      </Properties>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">NetworkReplicator</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">29</string>
      </Properties>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Model</string>
        <string name="ExplorerOrder">100</string>
        <string name="ExplorerImageIndex">2</string>
        <string name="PreferredParent">PVInstance</string>
      </Properties>
      <Item class="ReflectionMetadataFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">BreakJoints</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetModelCFrame</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetModelSize</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MakeJoints</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MoveTo</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ResetOrientationToIdentity</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">SetIdentityOrientation</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TranslateBy</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetPrimaryPartCFrame</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">SetPrimaryPartCFrame</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">makeJoints</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">move</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
      </Item>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">PrimaryPart</string>
            <string name="PropertyOrder">200</string>
            <string name="Description">A Part that serves as a physical reference for the Model's Pivot. If set, the Pivot will follow the PrimaryPart during simulation, otherwise the Pivot will be a fixed world space location.</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LevelOfDetail</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">World Pivot Position</string>
            <string name="PropertyOrder">300</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">World Pivot Orientation</string>
            <string name="PropertyOrder">400</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Status</string>
        <bool name="Deprecated">true</bool>
        <string name="ExplorerOrder">100</string>
        <string name="ExplorerImageIndex">2</string>
      </Properties>
      <Item class="ReflectionMetadataFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">move</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">DataModel</string>
      </Properties>

      <Item class="ReflectionMetadataCallbacks">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">OnClose</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
      </Item>

      <Item class="ReflectionMetadataProperties">
        <Properties>
        </Properties>

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">PrivateServerId</string>
            <bool name="ServerOnly">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">PrivateServerOwnerId</string>
            <bool name="ServerOnly">true</bool>
          </Properties>
        </Item>

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">VIPServerId</string>
            <bool name="ServerOnly">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">VIPServerOwnerId</string>
            <bool name="ServerOnly">true</bool>
          </Properties>
        </Item>

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Workspace</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">workspace</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ShowMouse</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">IsLoaded</string>
          </Properties>
        </Item>
      </Item>

      <Item class="ReflectionMetadataEvents">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Loaded</string>
          </Properties>
        </Item>
      </Item>

      <Item class="ReflectionMetadataFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">SetPlaceID</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">SetCreatorID</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">DataStoreService</string>
      </Properties>

      <Item class="ReflectionMetadataFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetDataStore</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetGlobalDataStore</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetOrderedDataStore</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">GlobalDataStore</string>
        <string name="ExplorerOrder">-1</string>
      </Properties>

      <Item class="ReflectionMetadataFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">OnUpdate</string>
          </Properties>
        </Item>
      </Item>

      <Item class="ReflectionMetadataYieldFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetAsync</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">IncrementAsync</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">SetAsync</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">UpdateAsync</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">OrderedDataStore</string>
        <string name="ExplorerOrder">-1</string>
      </Properties>

      <Item class="ReflectionMetadataYieldFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetSortedAsync</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">HopperBin</string>
        <bool name="Deprecated">true</bool>
        <string name="ExplorerOrder">240</string>
        <string name="ExplorerImageIndex">22</string>
      </Properties>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Camera</string>
        <string name="ExplorerOrder">5</string>
        <string name="ExplorerImageIndex">5</string>
        <string name="PreferredParent">Model</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">CameraSubject</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">CameraType</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">CoordinateFrame</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">CFrame</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">FieldOfViewMode</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">FieldOfView</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">DiagonalFieldOfView</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MaxAxisFieldOfView</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Focus</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ViewportSize</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">NearPlaneZ</string>
          </Properties>
        </Item>
      </Item>
      <Item class="ReflectionMetadataFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetRoll</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">WorldToScreenPoint</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ScreenPointToRay</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ViewportPointToRay</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">WorldToViewportPoint</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">SetRoll</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Players</string>
        <string name="ExplorerOrder">20</string>
        <string name="ExplorerImageIndex">21</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">CharacterAutoLoads</string>
            <bool name="Browsable">true</bool>
          </Properties>
        </Item>
      </Item>
      <Item class="ReflectionMetadataFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">players</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">ReplicatedStorage</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">70</string>
      </Properties>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">RobloxReplicatedStorage</string>
        <bool name="Browsable">false</bool>
      </Properties>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">ReplicatedFirst</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">70</string>
      </Properties>
      <Item class="ReflectionMetadataFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">RemoveRobloxLoadingScreen</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">ServerStorage</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">69</string>
      </Properties>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">ServerScriptService</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">71</string>
      </Properties>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">StudioService</string>
      </Properties>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Lighting</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">13</string>
      </Properties>
      <Item class="ReflectionMetadataFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetMinutesAfterMidnight</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetMoonDirection</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetMoonPhase</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetSunDirection</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">SetMinutesAfterMidnight</string>
          </Properties>
        </Item>
      </Item>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Ambient</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Brightness</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">10</double>
            <double name="UINumTicks">1000</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">EnvironmentDiffuseScale</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">1000</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">EnvironmentSpecularScale</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">1000</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ExposureCompensation</string>
            <double name="UIMinimum">-3</double>
            <double name="UIMaximum">3</double>
            <double name="UINumTicks">600</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ShadowSoftness</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ColorShift_Bottom</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ColorShift_Top</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GeographicLatitude</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">360</double>
            <double name="UINumTicks">360</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GlobalShadows</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">OutdoorAmbient</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Outlines</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ShadowColor</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TimeOfDay</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ClockTime</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">24</double>
            <double name="UINumTicks">240</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">FogColor</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">FogEnd</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">FogStart</string>
          </Properties>
        </Item>
      </Item>
      <Item class="ReflectionMetadataEvents">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LightingChanged</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">TestService</string>
        <string name="ExplorerOrder">1000</string>
        <string name="ExplorerImageIndex">68</string>
        <token name="ServiceVisibility">2</token>        <!-- WithChildren -->
      </Properties>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">VRService</string>
        <string name="ExplorerOrder">1000</string>
        <token name="ServiceVisibility">2</token>
        <string name="FFlag">VRServiceStudioExplorer</string>
      </Properties>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">DebuggerManager</string>
        <!-- string name="ExplorerOrder">1010</string-->

      </Properties>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">ScriptDebugger</string>
        <!--string name="ExplorerOrder">1010</string-->

      </Properties>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">DebuggerBreakpoint</string>
        <!--string name="ExplorerOrder">1010</string-->

      </Properties>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">DebuggerWatch</string>
        <!--string name="ExplorerOrder">1010</string-->

      </Properties>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Debris</string>
        <string name="ExplorerImageIndex">30</string>
      </Properties>
      <Item class="ReflectionMetadataFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">addItem</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">AddItem</string>
          </Properties>
        </Item>
      </Item>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MaxItems</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Accoutrement</string>
        <string name="ExplorerOrder">20</string>
        <string name="ExplorerImageIndex">32</string>
        <string name="Insertable">false</string>
      </Properties>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Player</string>
        <bool name="Insertable">false</bool>
        <string name="ExplorerOrder">10</string>
        <string name="ExplorerImageIndex">12</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">CharacterAppearance</string>
            <bool name="Browsable">false</bool>
            <string name="PreferredParent">Model</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">CameraMode</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">DataReady</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">DataComplexity</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
      </Item>
      <Item class="ReflectionMetadataFunctions">

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LoadCharacter</string>
            <bool name="Browsable">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LoadData</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">SaveData</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">SaveBoolean</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">SaveInstance</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">SaveString</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LoadBoolean</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LoadNumber</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LoadString</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LoadInstance</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">SaveNumber</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">playerFromCharacter</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">SetUnder13</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
      </Item>

      <Item class="ReflectionMetadataYieldFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">WaitForDataReady</string>
            <bool name="Deprecated">true</bool>
            <bool name="Browsable">true</bool>
          </Properties>
        </Item>
      </Item>

      <Item class="ReflectionMetadataEvents">

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Idled</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Workspace</string>
        <string name="ExplorerOrder">5</string>
        <string name="ExplorerImageIndex">19</string>
      </Properties>
      <Item class="ReflectionMetadataFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">FindPartsInRegion3</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">FindPartsInRegion3WithIgnoreList</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">FindPartOnRay</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">FindPartOnRayWithIgnoreList</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
      </Item>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">PGSPhysicsSolverEnabled</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">FallenPartsDestroyHeight</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">BasePart</string>
        <string name="ExplorerOrder">3</string>
        <bool name="Browsable">false</bool>
      </Properties>

      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Color</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">CFrame</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">CanCollide</string>
            <string name="PropertyOrder">1000</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">CanQuery</string>
            <string name="PropertyOrder">1001</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">CanTouch</string>
            <string name="PropertyOrder">1002</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Anchored</string>
            <string name="PropertyOrder">900</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Massless</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">RootPriority</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Elasticity</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Friction</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">2</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Locked</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">CastShadow</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Material</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Reflectance</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ResizeIncrement</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ResizeableFaces</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Transparency</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Velocity</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Size</string>
            <string name="PropertyOrder">50</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Position</string>
            <string name="PropertyOrder">100</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Orientation</string>
            <string name="PropertyOrder">200</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Rotation</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">CenterOfMass</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">AssemblyMass</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">AssemblyCenterOfMass</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">AssemblyLinearVelocity</string>
            <string name="PropertyOrder">1000</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">AssemblyAngularVelocity</string>
            <string name="PropertyOrder">1010</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">AssemblyRootPart</string>
          </Properties>
        </Item>
      </Item>

      <Item class="ReflectionMetadataFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">makeJoints</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MakeJoints</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">BreakJoints</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetMass</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Resize</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">getMass</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
      </Item>
      <Item class="ReflectionMetadataEvents">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">OutfitChanged</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LocalSimulationTouched</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">StoppedTouching</string>

          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TouchEnded</string>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Part</string>
        <string name="ClassCategory">Parts</string>
        <string name="ExplorerOrder">110</string>
        <string name="ExplorerImageIndex">1</string>
        <string name="PreferredParent">Workspace</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">TrussPart</string>
        <string name="ClassCategory">Parts</string>
        <string name="ExplorerOrder">120</string>
        <string name="ExplorerImageIndex">1</string>
        <string name="PreferredParent">Model</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">WedgePart</string>
        <string name="ClassCategory">Parts</string>
        <string name="ExplorerOrder">120</string>
        <string name="ExplorerImageIndex">1</string>
        <string name="PreferredParent">Model</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">PrismPart</string>
        <bool name="Browsable">false</bool>
        <bool name="Deprecated">true</bool>
        <string name="ExplorerOrder">120</string>
        <string name="ExplorerImageIndex">1</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">PyramidPart</string>
        <bool name="Browsable">false</bool>
        <bool name="Deprecated">true</bool>
        <string name="ExplorerOrder">120</string>
        <string name="ExplorerImageIndex">1</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">ParallelRampPart</string>
        <bool name="Browsable">false</bool>
        <bool name="Deprecated">true</bool>
        <string name="ExplorerOrder">120</string>
        <string name="ExplorerImageIndex">1</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">RightAngleRampPart</string>
        <bool name="Browsable">false</bool>
        <bool name="Deprecated">true</bool>
        <string name="ExplorerOrder">120</string>
        <string name="ExplorerImageIndex">1</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">CornerWedgePart</string>
        <string name="ClassCategory">Parts</string>
        <string name="ExplorerOrder">120</string>
        <string name="ExplorerImageIndex">1</string>
        <string name="PreferredParent">Workspace</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">PlayerGui</string>
        <string name="ExplorerOrder">130</string>
        <string name="ExplorerImageIndex">46</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">SelectionImageObject</string>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">PlayerScripts</string>
        <string name="ExplorerOrder">130</string>
        <string name="ExplorerImageIndex">78</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">StandalonePluginScripts</string>
        <string name="ExplorerOrder">130</string>
        <string name="ExplorerImageIndex">78</string>
        <string name="Insertable">true</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">StarterPlayerScripts</string>
        <string name="ExplorerOrder">130</string>
        <string name="ExplorerImageIndex">78</string>
        <string name="Insertable">false</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">StarterCharacterScripts</string>
        <string name="ExplorerOrder">130</string>
        <string name="ExplorerImageIndex">78</string>
        <string name="Insertable">false</string>
      </Properties>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">GuiMain</string>
        <bool name="Deprecated">true</bool>
        <string name="ExplorerOrder">140</string>
        <string name="ExplorerImageIndex">47</string>
      </Properties>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">LayerCollector</string>
        <string name="Browsable">false</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Enabled</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ZIndexBehavior</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">UIFlexItem</string>
        <string name="ExplorerOrder">130</string>
        <string name="ExplorerImageIndex">26</string>
        <string name="PreferredParent">GuiObject</string>
        <string name="FFlag">UIListLayoutShowFlexProperties</string>
      </Properties>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">ScreenGui</string>
        <string name="ClassCategory">GUI</string>
        <string name="ExplorerOrder">140</string>
        <string name="ExplorerImageIndex">47</string>
        <string name="PreferredParent">BasePlayerGui</string>
      </Properties>

      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">SafeAreaCompatibility</string>
            <string name="FFlag">GuiObjectSafeAreaBackgroundExtension</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ClipToDeviceSafeArea</string>
            <string name="FFlag">GuiObjectSafeAreaBackgroundExtension</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ScreenInsets</string>
            <string name="FFlag">ScreenGuiShowScreenInsetsInStudio</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">FunctionalTest</string>
        <bool name="Deprecated">true</bool>
        <string name="ExplorerOrder">10</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">BillboardGui</string>
        <string name="ClassCategory">GUI</string>
        <string name="ExplorerOrder">140</string>
        <string name="ExplorerImageIndex">64</string>
        <string name="PreferredParent">GuiBase2d</string>
      </Properties>

      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Adornee</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">AbsolutePosition</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">AbsoluteSize</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Active</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">AlwaysOnTop</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Enabled</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ExtentsOffset</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">PlayerToHideFrom</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">StudsOffset</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">SizeOffset</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Size</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LightInfluence</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MaxDistance</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1000</double>
            <double name="UINumTicks">20</double>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">SurfaceGuiBase</string>
        <string name="ClassCategory">GUI</string>
        <string name="ExplorerOrder">140</string>
        <string name="ExplorerImageIndex">64</string>
        <string name="PreferredParent">GuiBase2d</string>
      </Properties>

      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Adornee</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Active</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">SurfaceGui</string>
        <string name="ClassCategory">GUI</string>
        <string name="ExplorerOrder">140</string>
        <string name="ExplorerImageIndex">64</string>
        <string name="PreferredParent">GuiBase2d</string>
      </Properties>

      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Enabled</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LightInfluence</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Brightness</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">10</double>
            <double name="UINumTicks">2000</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MaxDistance</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1000</double>
            <double name="UINumTicks">20</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">PixelsPerStud</string>
            <double name="UIMinimum">10</double>
            <double name="UIMaximum">200</double>
            <double name="UINumTicks">19</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ToolPunchThroughDistance</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1000</double>
            <double name="UINumTicks">20</double>
          </Properties>
        </Item>
      </Item>

    </Item>


    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">GuiBase2d</string>
        <bool name="Browsable">false</bool>
      </Properties>

      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">AbsolutePosition</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">AbsoluteSize</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">SelectionGroup</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">SelectionBehaviorUp</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">SelectionBehaviorDown</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">SelectionBehaviorLeft</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">SelectionBehaviorRight</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">InputObject</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">UserInputType</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">UserInputState</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Position</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">KeyCode</string>
          </Properties>
        </Item>
      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">GuiObject</string>
        <bool name="Browsable">false</bool>
      </Properties>

      <Item class="ReflectionMetadataFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TweenPosition</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TweenSize</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TweenSizeAndPosition</string>
          </Properties>
        </Item>
      </Item>

      <Item class="ReflectionMetadataProperties">

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">SelectionOrder</string>
          </Properties>
        </Item>

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Active</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">BackgroundColor3</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">BackgroundTransparency</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">BorderColor3</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">BorderSizePixel</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ClipsDescendants</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Draggable</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Size</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Position</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Rotation</string>
            <double name="UIMinimum">-180</double>
            <double name="UIMaximum">180</double>
            <double name="UINumTicks">360</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">SizeConstraint</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ZIndex</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">BackgroundColor</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">BorderColor</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">SelectionImageObject</string>
          </Properties>
        </Item>
      </Item>

      <Item class="ReflectionMetadataEvents">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">DragBegin</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">DragStopped</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MouseEnter</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MouseLeave</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MouseMoved</string>
          </Properties>
        </Item>

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TouchTap</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TouchPinch</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TouchSwipe</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TouchLongPress</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TouchRotate</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TouchPan</string>
          </Properties>
        </Item>

        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">InputBegan</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">InputChanged</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">InputEnded</string>
          </Properties>
        </Item>

      </Item>
    </Item>

    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Frame</string>
        <string name="ClassCategory">GUI</string>
        <string name="ExplorerOrder">150</string>
        <string name="ExplorerImageIndex">48</string>
        <string name="PreferredParent">GuiBase2d</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Style</string>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">ScrollingFrame</string>
        <string name="ClassCategory">GUI</string>
        <string name="ExplorerOrder">150</string>
        <string name="ExplorerImageIndex">48</string>
        <string name="PreferredParent">GuiBase2d</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ScrollingEnabled</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">CanvasSize</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">CanvasPosition</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">AbsoluteWindowSize</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">AbsoluteCanvasSize</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ScrollBarThickness</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ScrollBarImageTransparency</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TopImage</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MidImage</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">BottomImage</string>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">ImageLabel</string>
        <string name="ClassCategory">GUI</string>
        <string name="ExplorerOrder">180</string>
        <string name="ExplorerImageIndex">49</string>
        <string name="PreferredParent">GuiBase2d</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Image</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ImageTransparency</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ScaleType</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">SliceCenter</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TileSize</string>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">VideoFrame</string>
        <string name="ClassCategory">GUI</string>
        <string name="ExplorerOrder">18</string>
        <string name="ExplorerImageIndex">120</string>
        <string name="PreferredParent">GuiBase2d</string>
        <string name="PreferredParents">GuiBase2d</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Volume</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">100</double>
            <double name="UINumTicks">1000</double>
            <string name="SliderScaling">Square</string>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">CanvasGroup</string>
        <string name="FFlag">RenderCanvasGroupToTexture</string>
        <string name="ClassCategory">GUI</string>
        <string name="ExplorerOrder">200</string>
        <string name="ExplorerImageIndex">48</string>
        <string name="PreferredParent">GuiBase2d</string>
        <string name="PreferredParents">GuiBase2d</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GroupTransparency</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">TextLabel</string>
        <string name="ClassCategory">GUI</string>
        <string name="ExplorerOrder">190</string>
        <string name="ExplorerImageIndex">50</string>
        <string name="PreferredParent">GuiBase2d</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TextColor</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LineHeight</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">3</double>
            <double name="UINumTicks">300</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TextSize</string>
            <double name="UIMinimum">1</double>
            <double name="UIMaximum">100</double>
            <double name="UINumTicks">99</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TextTransparency</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TextStrokeTransparency</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ContentText</string>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">TextButton</string>
        <string name="ClassCategory">GUI</string>
        <string name="ExplorerOrder">170</string>
        <string name="ExplorerImageIndex">51</string>
        <string name="PreferredParent">GuiBase2d</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TextColor</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LineHeight</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">3</double>
            <double name="UINumTicks">300</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TextSize</string>
            <double name="UIMinimum">1</double>
            <double name="UIMaximum">100</double>
            <double name="UINumTicks">99</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TextTransparency</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TextStrokeTransparency</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ContentText</string>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">TextBox</string>
        <string name="ClassCategory">GUI</string>
        <string name="ExplorerOrder">170</string>
        <string name="ExplorerImageIndex">51</string>
        <string name="PreferredParent">GuiBase2d</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TextColor</string>
            <bool name="Deprecated">true</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LineHeight</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">3</double>
            <double name="UINumTicks">300</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TextSize</string>
            <double name="UIMinimum">1</double>
            <double name="UIMaximum">100</double>
            <double name="UINumTicks">99</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TextTransparency</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TextStrokeTransparency</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ContentText</string>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">GuiButton</string>
        <string name="ClassCategory">GUI</string>
        <bool name="Browsable">false</bool>
        <string name="ExplorerOrder">160</string>
        <string name="ExplorerImageIndex">52</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">AutoButtonColor</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Modal</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Style</string>
          </Properties>
        </Item>
      </Item>
      <Item class="ReflectionMetadataEvents">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MouseButton1Click</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MouseButton1Down</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MouseButton1Up</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MouseButton2Click</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MouseButton2Down</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MouseButton2Up</string>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">ViewportFrame</string>
        <string name="ClassCategory">GUI</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">52</string>
        <string name="PreferredParent">GuiBase2d</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">CurrentCamera</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ImageTransparency</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ImageColor3</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Ambient</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LightColor</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LightDirection</string>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">ImageButton</string>
        <string name="ClassCategory">GUI</string>
        <string name="ExplorerOrder">160</string>
        <string name="ExplorerImageIndex">52</string>
        <string name="PreferredParent">GuiBase2d</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Image</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ImageTransparency</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
            <double name="UINumTicks">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ScaleType</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">SliceCenter</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TileSize</string>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">StyleBase</string>
        <string name="ClassCategory">Styling</string>
        <string name="ExplorerOrder">200</string>
        <string name="FFlag">FFlagEngineStylingEnabled2</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">StyleSheet</string>
        <string name="ClassCategory">Styling</string>
        <string name="ExplorerOrder">200</string>
        <string name="FFlag">FFlagEngineStylingEnabled2</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">StyleRule</string>
        <string name="ClassCategory">Styling</string>
        <string name="PreferredParent">StyleSheet</string>
        <string name="ExplorerOrder">200</string>
        <string name="FFlag">FFlagEngineStylingEnabled2</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">StyleLink</string>
        <string name="ClassCategory">Styling</string>
        <string name="ExplorerOrder">200</string>
        <string name="FFlag">FFlagEngineStylingEnabled2</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">StyleDerive</string>
        <string name="ClassCategory">Styling</string>
        <string name="PreferredParent">StyleSheet</string>
        <string name="ExplorerOrder">200</string>
        <string name="FFlag">FFlagEngineStylingEnabled2</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Handles</string>
        <string name="ClassCategory">Adornments</string>

        <string name="ExplorerOrder">190</string>
        <string name="ExplorerImageIndex">53</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">ArcHandles</string>
        <string name="ClassCategory">Adornments</string>

        <string name="ExplorerOrder">200</string>
        <string name="ExplorerImageIndex">56</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">SelectionBox</string>
        <string name="ClassCategory">Adornments</string>
        <string name="ExplorerOrder">210</string>
        <string name="ExplorerImageIndex">54</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">SelectionSphere</string>
        <string name="ClassCategory">Adornments</string>
        <string name="ExplorerOrder">210</string>
        <string name="ExplorerImageIndex">54</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">SurfaceSelection</string>
        <string name="ClassCategory">Adornments</string>
        <string name="ExplorerOrder">210</string>
        <string name="ExplorerImageIndex">55</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">PathfindingModifier</string>
        <string name="ClassCategory">Adornments</string>
        <string name="ExplorerOrder">210</string>
        <string name="ExplorerImageIndex">128</string>
      </Properties>
      <Item class="ReflectionMetadataMember">
        <Properties>
          <string name="Name">Label</string>
        </Properties>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">PathfindingLink</string>
        <string name="ClassCategory">Adornments</string>
        <string name="ExplorerOrder">210</string>
        <string name="ExplorerImageIndex">137</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Attachment0</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Attachment1</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Label</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">IsBidirectional</string>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Configuration</string>
        <string name="ExplorerOrder">220</string>
        <string name="ExplorerImageIndex">58</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">HumanoidDescription</string>
        <string name="ExplorerOrder">22</string>
        <string name="ExplorerImageIndex">104</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">BodyPartDescription</string>
        <string name="ExplorerOrder">22</string>
        <string name="ExplorerImageIndex">104</string>
        <bool name="FFlag">HumanoidDescriptionNewInstancesStudio</bool>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">AccessoryDescription</string>
        <string name="ExplorerOrder">22</string>
        <string name="ExplorerImageIndex">104</string>
        <bool name="FFlag">HumanoidDescriptionNewInstancesStudio</bool>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Folder</string>
        <string name="ExplorerOrder">10</string>
        <string name="ExplorerImageIndex">77</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">WorldModel</string>
        <bool name="Insertable">true</bool>
        <string name="ClassCategory">World</string>
        <string name="ExplorerOrder">22</string>
        <string name="ExplorerImageIndex">19</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Motor6D</string>
        <string name="ClassCategory">Animations</string>
        <string name="ExplorerOrder">200</string>
        <string name="ExplorerImageIndex">106</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">BoxHandleAdornment</string>
        <string name="ClassCategory">Adornments</string>
        <string name="ExplorerOrder">205</string>
        <string name="ExplorerImageIndex">111</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">ConeHandleAdornment</string>
        <string name="ClassCategory">Adornments</string>
        <string name="ExplorerOrder">205</string>
        <string name="ExplorerImageIndex">110</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">CylinderHandleAdornment</string>
        <string name="ClassCategory">Adornments</string>
        <string name="ExplorerOrder">205</string>
        <string name="ExplorerImageIndex">109</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">SphereHandleAdornment</string>
        <string name="ClassCategory">Adornments</string>
        <string name="ExplorerOrder">205</string>
        <string name="ExplorerImageIndex">112</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">WireframeHandleAdornment</string>
        <string name="ClassCategory">Adornments</string>
        <string name="ExplorerOrder">205</string>
        <string name="ExplorerImageIndex">113</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">LineHandleAdornment</string>
        <string name="ClassCategory">Adornments</string>
        <string name="ExplorerOrder">205</string>
        <string name="ExplorerImageIndex">107</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">ImageHandleAdornment</string>
        <string name="ClassCategory">Adornments</string>
        <string name="ExplorerOrder">205</string>
        <string name="ExplorerImageIndex">108</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">SelectionPartLasso</string>
        <bool name="Deprecated">true</bool>
        <string name="ExplorerOrder">220</string>
        <string name="ExplorerImageIndex">57</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">SelectionPointLasso</string>
        <bool name="Deprecated">true</bool>
        <string name="ExplorerOrder">220</string>
        <string name="ExplorerImageIndex">57</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">PartPairLasso</string>
        <string name="ExplorerOrder">220</string>
        <string name="ExplorerImageIndex">57</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">PoseBase</string>
        <string name="ExplorerOrder">220</string>
        <string name="ExplorerImageIndex">60</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Pose</string>
        <string name="ExplorerOrder">220</string>
        <string name="ExplorerImageIndex">60</string>
        <string name="Insertable">false</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">NumberPose</string>
        <string name="ExplorerOrder">220</string>
        <string name="ExplorerImageIndex">60</string>
        <string name="Insertable">false</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">KeyframeMarker</string>
        <string name="ExplorerOrder">220</string>
        <string name="ExplorerImageIndex">60</string>
        <string name="Insertable">false</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Keyframe</string>
        <string name="ExplorerOrder">220</string>
        <string name="ExplorerImageIndex">60</string>
        <string name="Insertable">false</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Animation</string>
        <string name="ClassCategory">Animations</string>
        <string name="ExplorerOrder">220</string>
        <string name="ExplorerImageIndex">60</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">AnimationTrack</string>
        <string name="ExplorerOrder">220</string>
        <string name="ExplorerImageIndex">60</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">AnimationController</string>
        <string name="ClassCategory">Animations</string>
        <string name="ExplorerOrder">220</string>
        <string name="ExplorerImageIndex">60</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Animator</string>
        <string name="ClassCategory">Animations</string>
        <string name="ExplorerOrder">220</string>
        <string name="ExplorerImageIndex">60</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">EvaluationThrottled</string>
            <string name="Description">Returns true if animation evaluation for the Animator is throttled.</string>
            <string name="PropertyOrder">1001</string>
            <bool name="FFlag">AnimatorIsThrottledPropertyEnabled</bool>
          </Properties>
	    </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">RootMotion</string>
            <string name="PropertyOrder">1002</string>
            <bool name="FFlag">RootMotionSupportedInternal</bool>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">RootMotionWeight</string>
            <string name="PropertyOrder">1003</string>
            <bool name="FFlag">RootMotionSupportedInternal</bool>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">IKControl</string>
        <string name="ClassCategory">Animations</string>
        <string name="ExplorerOrder">220</string>
        <string name="ExplorerImageIndex">53</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Type</string>
            <string name="Description">Specifies how the solver satisfies this control.</string>
            <string name="PropertyOrder">1001</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">EndEffector</string>
            <string name="Description">The part that you are interested in moving to reach the Target.</string>
            <string name="PropertyOrder">1002</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Target</string>
            <string name="Description">The object that the EndEffector reaches for or points at.</string>
            <string name="PropertyOrder">1003</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ChainRoot</string>
            <string name="Description">The last part that you are interested in moving your character.</string>
            <string name="PropertyOrder">1004</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Offset</string>
            <string name="Description">An additional offset applied on top of the Target in its local space.</string>
            <string name="PropertyOrder">1005</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Enabled</string>
            <string name="Description">Toggles the control on and off.</string>
            <string name="PropertyOrder">1010</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>d
            <string name="Name">Weight</string>
            <string name="Description">Specifies how much this IK control should affect the final pose.</string>
            <string name="PropertyOrder">1011</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Priority</string>
            <string name="Description">Specifies the order in which controls are solved.</string>
            <string name="PropertyOrder">1012</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">SmoothTime</string>
            <string name="Description">Specifies the time in seconds to smooth the control by.</string>
            <string name="PropertyOrder">1013</string>
          </Properties>
        </Item>
      </Item>
      <Item class="ReflectionMetadataFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetChainLength</string>
            <string name="Description">Returns the total length of the chain, which is the sum of the lengths of its segments.</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetChainCount</string>
            <string name="Description">Returns the number of segments in the chain, which is one less than the number of nodes.</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetNodeWorldCFrame</string>
            <string name="Description">Returns the CFrame of the node with the given index in world space.</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetNodeLocalCFrame</string>
            <string name="Description">Returns the CFrame of the node with the given index in local space.</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetRawFinalTarget</string>
            <string name="Description">Returns the CFrame of the raw final target in world space.</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetSmoothedFinalTarget</string>
            <string name="Description">Returns the CFrame of the smoothed final target in world space.</string>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">FaceControls</string>
        <string name="ClassCategory">Animations</string>
        <bool name="Browsable">true</bool>
        <bool name="Insertable">true</bool>
        <string name="ExplorerOrder">105</string>
        <string name="ExplorerImageIndex">129</string>
        <string name="PreferredParent">MeshPart</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ChinRaiserUpperLip</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ChinRaiser</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">FlatPucker</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Funneler</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LowerLipSuck</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LipPresser</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LipsTogether</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MouthLeft</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">MouthRight</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Pucker</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">UpperLipSuck</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LeftCheekPuff</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LeftDimpler</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LeftLipCornerDown</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LeftLowerLipDepressor</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LeftLipCornerPuller</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LeftLipStretcher</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LeftUpperLipRaiser</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">RightCheekPuff</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">RightDimpler</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">RightLipCornerDown</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">RightLowerLipDepressor</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">RightLipCornerPuller</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">RightLipStretcher</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">RightUpperLipRaiser</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">JawDrop</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">JawLeft</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">JawRight</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Corrugator</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LeftBrowLowerer</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LeftOuterBrowRaiser</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LeftNoseWrinkler</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LeftInnerBrowRaiser</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">RightBrowLowerer</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">RightOuterBrowRaiser</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">RightInnerBrowRaiser</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">RightNoseWrinkler</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">EyesLookDown</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">EyesLookLeft</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">EyesLookUp</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">EyesLookRight</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LeftCheekRaiser</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LeftEyeUpperLidRaiser</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">LeftEyeClosed</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">RightCheekRaiser</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">RightEyeUpperLidRaiser</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">RightEyeClosed</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TongueDown</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TongueOut</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">TongueUp</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">CharacterMesh</string>
        <string name="ClassCategory">Meshes</string>
        <string name="ExplorerOrder">220</string>
        <string name="ExplorerImageIndex">60</string>
        <string name="PreferredParent">Model</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Dialog</string>
        <string name="ClassCategory">3D Interfaces</string>
        <string name="ExplorerOrder">220</string>
        <string name="ExplorerImageIndex">62</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">ConversationDistance</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GoodbyeChoiceActive</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GoodbyeDialog</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">InUse</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">InitialPrompt</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Purpose</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Tone</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">BehaviorType</string>
          </Properties>
        </Item>
      </Item>
      <Item class="ReflectionMetadataFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetCurrentPlayers</string>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">DialogChoice</string>
        <string name="ClassCategory">3D Interfaces</string>
        <string name="ExplorerOrder">220</string>
        <string name="ExplorerImageIndex">63</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">UnionOperation</string>
        <bool name="Browsable">true</bool>
        <bool name="Insertable">false</bool>
        <string name="ExplorerOrder">105</string>
        <string name="ExplorerImageIndex">73</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">UsePartColor</string>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">NegateOperation</string>
        <bool name="Browsable">true</bool>
        <bool name="Insertable">false</bool>
        <string name="ExplorerOrder">104</string>
        <string name="ExplorerImageIndex">72</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">UsePartColor</string>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">MeshPart</string>
        <string name="ClassCategory">Parts</string>
        <bool name="Browsable">true</bool>
        <bool name="Insertable">true</bool>
        <string name="ExplorerOrder">105</string>
        <string name="ExplorerImageIndex">73</string>
        <string name="PreferredParent">Model</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Terrain</string>
        <bool name="Browsable">true</bool>
        <bool name="Insertable">false</bool>
        <string name="ExplorerOrder">5</string>
        <string name="ExplorerImageIndex">65</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">WaterTransparency</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">WaterWaveSize</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">WaterWaveSpeed</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">100</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">WaterReflectance</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GrassLength</string>
            <string name="FFlag">GrassLengthCustomization</string>
            <double name="UIMinimum">0.1</double>
            <double name="UIMaximum">1</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Decoration</string>
          </Properties>
        </Item>
      </Item>
      <Item class="ReflectionMetadataFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetCell</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">GetWaterCell</string>

          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">SetWaterCell</string>

          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">Light</string>
        <string name="ClassCategory">Lights</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">13</string>
        <string name="PreferredParent">PVInstance</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Brightness</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">40</double>
            <double name="UINumTicks">2000</double>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">PointLight</string>
        <string name="ClassCategory">Lights</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">13</string>
        <string name="PreferredParent">PVInstance</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Range</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">60</double>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">SpotLight</string>
        <string name="ClassCategory">Lights</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">13</string>
        <string name="PreferredParent">PVInstance</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Range</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">60</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Angle</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">180</double>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">SurfaceLight</string>
        <string name="ClassCategory">Lights</string>
        <string name="ExplorerOrder">30</string>
        <string name="ExplorerImageIndex">13</string>
        <string name="PreferredParent">PVInstance</string>
      </Properties>
      <Item class="ReflectionMetadataProperties">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Range</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">60</double>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">Angle</string>
            <double name="UIMinimum">0</double>
            <double name="UIMaximum">180</double>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">RemoteFunction</string>
        <string name="ClassCategory">Scripting</string>
        <string name="ExplorerOrder">40</string>
        <string name="ExplorerImageIndex">74</string>
      </Properties>
      <Item class="ReflectionMetadataYieldFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">InvokeClient</string>
            <string name="ScriptContext">Server</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">InvokeServer</string>
            <string name="ScriptContext">Client</string>
          </Properties>
        </Item>
      </Item>
      <Item class="ReflectionMetadataCallbacks">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">OnClientInvoke</string>
            <string name="ScriptContext">Client</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">OnServerInvoke</string>
            <string name="ScriptContext">Server</string>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">RemoteEvent</string>
        <string name="ClassCategory">Scripting</string>
        <string name="ExplorerOrder">50</string>
        <string name="ExplorerImageIndex">75</string>
      </Properties>
      <Item class="ReflectionMetadataFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">FireAllClients</string>
            <string name="ScriptContext">Server</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">FireClient</string>
            <string name="ScriptContext">Server</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">FireServer</string>
            <string name="ScriptContext">Client</string>
          </Properties>
        </Item>
      </Item>
      <Item class="ReflectionMetadataEvents">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">OnClientEvent</string>
            <string name="ScriptContext">Client</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">OnServerEvent</string>
            <string name="ScriptContext">Server</string>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">UnreliableRemoteEvent</string>
        <string name="ClassCategory">Scripting</string>
        <string name="ExplorerOrder">51</string>
        <string name="ExplorerImageIndex">75</string>
        <string name="summary">Same as RemoteEvents but events are sent unreliably (neither reliably nor ordered).</string>
      </Properties>
      <Item class="ReflectionMetadataFunctions">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">FireAllClients</string>
            <string name="ScriptContext">Server</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">FireClient</string>
            <string name="ScriptContext">Server</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">FireServer</string>
            <string name="ScriptContext">Client</string>
          </Properties>
        </Item>
      </Item>
      <Item class="ReflectionMetadataEvents">
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">OnClientEvent</string>
            <string name="ScriptContext">Client</string>
          </Properties>
        </Item>
        <Item class="ReflectionMetadataMember">
          <Properties>
            <string name="Name">OnServerEvent</string>
            <string name="ScriptContext">Server</string>
          </Properties>
        </Item>
      </Item>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">TerrainRegion</string>
        <bool name="Browsable">true</bool>
        <string name="ExplorerOrder">20</string>
        <string name="ExplorerImageIndex">65</string>
        <string name="Insertable">false</string>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataClass">
      <Properties>
        <string name="Name">ModuleScript</string>
        <string name="ClassCategory">Scripting</string>
        <string name="ExplorerOrder">50</string>
        <string name="ExplorerImageIndex">76</string>
      </Properties>
    </Item>
  </Item>
  <Item class="ReflectionMetadataEnums">
    <Properties></Properties>
    <Item class="ReflectionMetadataEnum">
      <Properties>
        <string name="Name">ContextActionResult</string>
      </Properties>
      <Item class="ReflectionMetadataEnumItem">
        <Properties>
          <string name="Name">Sink</string>
        </Properties>
      </Item>
      <Item class="ReflectionMetadataEnumItem">
        <Properties>
          <string name="Name">Pass</string>
        </Properties>
      </Item>
    </Item>
    <Item class="ReflectionMetadataEnum">
      <Properties>
        <string name="Name">PartType</string>
      </Properties>
      <Item class="ReflectionMetadataEnumItem">
        <Properties>
          <string name="Name">Ball</string>
        </Properties>
      </Item>
      <Item class="ReflectionMetadataEnumItem">
        <Properties>
          <string name="Name">Block</string>
        </Properties>
      </Item>
      <Item class="ReflectionMetadataEnumItem">
        <Properties>
          <string name="Name">Cylinder</string>
        </Properties>
      </Item>
      <Item class="ReflectionMetadataEnumItem">
        <Properties>
          <string name="Name">Wedge</string>
        </Properties>
      </Item>
      <Item class="ReflectionMetadataEnumItem">
        <Properties>
          <string name="Name">CornerWedge</string>
        </Properties>
      </Item>
    </Item>
    <Item class="ReflectionMetadataEnum">
      <Properties>
        <string name="Name">Material</string>
      </Properties>
      <Item class="ReflectionMetadataEnumItem">
        <Properties>
          <string name="Name">Air</string>
          <bool name="Browsable">false</bool>
        </Properties>
      </Item>
      <Item class="ReflectionMetadataEnumItem">
        <Properties>
          <string name="Name">Water</string>
          <bool name="Browsable">false</bool>
        </Properties>
      </Item>
      <Item class="ReflectionMetadataEnumItem">
        <Properties>
          <string name="Name">Rock</string>
          <bool name="Browsable">true</bool>
        </Properties>
      </Item>
      <Item class="ReflectionMetadataEnumItem">
        <Properties>
          <string name="Name">Glacier</string>
          <bool name="Browsable">true</bool>
        </Properties>
      </Item>
      <Item class="ReflectionMetadataEnumItem">
        <Properties>
          <string name="Name">Snow</string>
          <bool name="Browsable">true</bool>
        </Properties>
      </Item>
      <Item class="ReflectionMetadataEnumItem">
        <Properties>
          <string name="Name">Sandstone</string>
          <bool name="Browsable">true</bool>
        </Properties>
      </Item>
      <Item class="ReflectionMetadataEnumItem">
        <Properties>
          <string name="Name">Mud</string>
          <bool name="Browsable">true</bool>
        </Properties>
      </Item>
      <Item class="ReflectionMetadataEnumItem">
        <Properties>
          <string name="Name">Basalt</string>
          <bool name="Browsable">true</bool>
        </Properties>
      </Item>
      <Item class="ReflectionMetadataEnumItem">
        <Properties>
          <string name="Name">Ground</string>
          <bool name="Browsable">true</bool>
        </Properties>
      </Item>
      <Item class="ReflectionMetadataEnumItem">
        <Properties>
          <string name="Name">CrackedLava</string>
          <bool name="Browsable">true</bool>
        </Properties>
      </Item>
      <Item class="ReflectionMetadataEnumItem">
        <Properties>
          <string name="Name">Asphalt</string>
          <bool name="Browsable">true</bool>
        </Properties>
      </Item>
      <Item class="ReflectionMetadataEnumItem">
        <Properties>
          <string name="Name">LeafyGrass</string>
          <bool name="Browsable">true</bool>
        </Properties>
      </Item>
      <Item class="ReflectionMetadataEnumItem">
        <Properties>
          <string name="Name">Salt</string>
          <bool name="Browsable">true</bool>
        </Properties>
      </Item>
      <Item class="ReflectionMetadataEnumItem">
        <Properties>
          <string name="Name">Limestone</string>
          <bool name="Browsable">true</bool>
        </Properties>
      </Item>
      <Item class="ReflectionMetadataEnumItem">
        <Properties>
          <string name="Name">Pavement</string>
          <bool name="Browsable">true</bool>
        </Properties>
      </Item>
    </Item>
    <Item class="ReflectionMetadataEnum">
      <Properties>
        <string name="Name">Status</string>
        <bool name="Deprecated">true</bool>
      </Properties>
      <Item class="ReflectionMetadataEnumItem">
        <Properties>
          <string name="Name">Poison</string>
          <bool name="Deprecated">true</bool>
        </Properties>
      </Item>
      <Item class="ReflectionMetadataEnumItem">
        <Properties>
          <string name="Name">Confusion</string>
          <bool name="Deprecated">true</bool>
        </Properties>
      </Item>
    </Item>
    <Item class="ReflectionMetadataEnum">
      <Properties>
        <string name="Name">SaveFilter</string>
        <bool name="Deprecated">true</bool>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataEnum">
      <Properties>
        <string name="Name">PrivilegeType</string>
        <bool name="Deprecated">true</bool>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataEnum">
      <Properties>
        <string name="Name">Genre</string>
        <bool name="Deprecated">true</bool>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataEnum">
      <Properties>
        <string name="Name">GearGenreSetting</string>
        <bool name="Deprecated">true</bool>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataEnum">
      <Properties>
        <string name="Name">GearType</string>
        <bool name="Deprecated">true</bool>
      </Properties>
    </Item>
    <Item class="ReflectionMetadataEnum">
      <Properties>
        <string name="Name">SortOrder</string>
      </Properties>
      <Item class="ReflectionMetadataEnumItem">
        <Properties>
          <string name="Name">Name</string>
        </Properties>
      </Item>
      <Item class="ReflectionMetadataEnumItem">
        <Properties>
          <string name="Name">LayoutOrder</string>
        </Properties>
      </Item>
      <Item class="ReflectionMetadataEnumItem">
        <Properties>
          <string name="Name">Custom</string>
          <bool name="Deprecated">true</bool>
        </Properties>
      </Item>
    </Item>
    <Item class="ReflectionMetadataEnum">
      <Properties>
        <string name="Name">ZIndexBehavior</string>
      </Properties>
      <Item class="ReflectionMetadataEnumItem">
        <Properties>
          <string name="Name">Global</string>
        </Properties>
      </Item>
      <Item class="ReflectionMetadataEnumItem">
        <Properties>
          <string name="Name">Sibling</string>
        </Properties>
      </Item>
    </Item>
    <Item class="ReflectionMetadataEnum">
      <Properties>
        <string name="Name">ScaleType</string>
      </Properties>
      <Item class="ReflectionMetadataEnumItem">
        <Properties>
          <string name="Name">Stretch</string>
        </Properties>
      </Item>
      <Item class="ReflectionMetadataEnumItem">
        <Properties>
          <string name="Name">Slice</string>
        </Properties>
      </Item>
      <Item class="ReflectionMetadataEnumItem">
        <Properties>
          <string name="Name">Tile</string>
        </Properties>
      </Item>
      <Item class="ReflectionMetadataEnumItem">
        <Properties>
          <string name="Name">Fit</string>
        </Properties>
      </Item>
      <Item class="ReflectionMetadataEnumItem">
        <Properties>
          <string name="Name">Crop</string>
        </Properties>
      </Item>
    </Item>
  </Item>
</roblox>]]
		else
			if script:FindFirstChild("RMD") then
				rawXML = require(script.RMD)
			else
				error("NO RMD EXISTS")
			end
		end
		Main.RawRMD = rawXML
		local parsed = Lib.ParseXML(rawXML)
		local classList = parsed.children[1].children[1].children
		local enumList = parsed.children[1].children[2].children
		local propertyOrders = {}

		local classes,enums = {},{}
		for _,class in pairs(classList) do
			local className = ""
			for _,child in pairs(class.children) do
				if child.tag == "Properties" then
					local data = {Properties = {}, Functions = {}}
					local props = child.children
					for _,prop in pairs(props) do
						local name = prop.attrs.name
						name = name:sub(1,1):upper()..name:sub(2)
						data[name] = prop.children[1].text
					end
					className = data.Name
					classes[className] = data
				elseif child.attrs.class == "ReflectionMetadataProperties" then
					local members = child.children
					for _,member in pairs(members) do
						if member.attrs.class == "ReflectionMetadataMember" then
							local data = {}
							if member.children[1].tag == "Properties" then
								local props = member.children[1].children
								for _,prop in pairs(props) do
									if prop.attrs then
										local name = prop.attrs.name
										name = name:sub(1,1):upper()..name:sub(2)
										data[name] = prop.children[1].text
									end
								end
								if data.PropertyOrder then
									local orders = propertyOrders[className]
									if not orders then orders = {} propertyOrders[className] = orders end
									orders[data.Name] = tonumber(data.PropertyOrder)
								end
								classes[className].Properties[data.Name] = data
							end
						end
					end
				elseif child.attrs.class == "ReflectionMetadataFunctions" then
					local members = child.children
					for _,member in pairs(members) do
						if member.attrs.class == "ReflectionMetadataMember" then
							local data = {}
							if member.children[1].tag == "Properties" then
								local props = member.children[1].children
								for _,prop in pairs(props) do
									if prop.attrs then
										local name = prop.attrs.name
										name = name:sub(1,1):upper()..name:sub(2)
										data[name] = prop.children[1].text
									end
								end
								classes[className].Functions[data.Name] = data
							end
						end
					end
				end
			end
		end

		for _,enum in pairs(enumList) do
			local enumName = ""
			for _,child in pairs(enum.children) do
				if child.tag == "Properties" then
					local data = {Items = {}}
					local props = child.children
					for _,prop in pairs(props) do
						local name = prop.attrs.name
						name = name:sub(1,1):upper()..name:sub(2)
						data[name] = prop.children[1].text
					end
					enumName = data.Name
					enums[enumName] = data
				elseif child.attrs.class == "ReflectionMetadataEnumItem" then
					local data = {}
					if child.children[1].tag == "Properties" then
						local props = child.children[1].children
						for _,prop in pairs(props) do
							local name = prop.attrs.name
							name = name:sub(1,1):upper()..name:sub(2)
							data[name] = prop.children[1].text
						end
						enums[enumName].Items[data.Name] = data
					end
				end
			end
		end

		return {Classes = classes, Enums = enums, PropertyOrders = propertyOrders}
	end

	Main.ShowGui = function(gui)
		if env.protectgui then
			env.protectgui(gui)
		end
		gui.Parent = Main.GuiHolder
	end

	Main.CreateIntro = function(initStatus) -- TODO: Must theme and show errors
		local gui = create({
			{1,"ScreenGui",{Name="Intro",}},
			{2,"Frame",{Active=true,BackgroundColor3=Color3.new(0.20392157137394,0.20392157137394,0.20392157137394),BorderSizePixel=0,Name="Main",Parent={1},Position=UDim2.new(0.5,-175,0.5,-100),Size=UDim2.new(0,350,0,200),}},
			{3,"Frame",{BackgroundColor3=Color3.new(0.17647059261799,0.17647059261799,0.17647059261799),BorderSizePixel=0,ClipsDescendants=true,Name="Holder",Parent={2},Size=UDim2.new(1,0,1,0),}},
			{4,"UIGradient",{Parent={3},Rotation=30,Transparency=NumberSequence.new({NumberSequenceKeypoint.new(0,1,0),NumberSequenceKeypoint.new(1,1,0),}),}},
			{5,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="Title",Parent={3},Position=UDim2.new(0,-190,0,15),Size=UDim2.new(0,100,0,50),Text="Paradoxxical's Explorer",TextColor3=Color3.new(1,1,1),TextSize=32,TextTransparency=1,TextScaled=true}},
			{6,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Desc",Parent={3},Position=UDim2.new(0,-230,0,60),Size=UDim2.new(0,180,0,25),Text="Skid Debugging Suite",TextColor3=Color3.new(1,1,1),TextSize=18,TextTransparency=1,}},
			{7,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="StatusText",Parent={3},Position=UDim2.new(0,20,0,110),Size=UDim2.new(0,180,0,25),Text="Fetching API",TextColor3=Color3.new(1,1,1),TextSize=14,TextTransparency=1,}},
			{8,"Frame",{BackgroundColor3=Color3.new(0.20392157137394,0.20392157137394,0.20392157137394),BorderSizePixel=0,Name="ProgressBar",Parent={3},Position=UDim2.new(0,110,0,145),Size=UDim2.new(0,0,0,4),}},
			{9,"Frame",{BackgroundColor3=Color3.new(0.2392156869173,0.56078433990479,0.86274510622025),BorderSizePixel=0,Name="Bar",Parent={8},Size=UDim2.new(0,0,1,0),}},
			{10,"ImageLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Image="rbxassetid://2764171053",ImageColor3=Color3.new(0.17647059261799,0.17647059261799,0.17647059261799),Parent={8},ScaleType=1,Size=UDim2.new(1,0,1,0),SliceCenter=Rect.new(2,2,254,254),}},
			{11,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Creator",Parent={2},Position=UDim2.new(1,-110,1,-20),Size=UDim2.new(0,105,0,20),Text="Developed by Paradoxxical",TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=1,}},
			{12,"UIGradient",{Parent={11},Transparency=NumberSequence.new({NumberSequenceKeypoint.new(0,1,0),NumberSequenceKeypoint.new(1,1,0),}),}},
			{13,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Version",Parent={2},Position=UDim2.new(1,-110,1,-35),Size=UDim2.new(0,105,0,20),Text="1.0.0",TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=1,}},
			{14,"UIGradient",{Parent={13},Transparency=NumberSequence.new({NumberSequenceKeypoint.new(0,1,0),NumberSequenceKeypoint.new(1,1,0),}),}},
			{15,"ImageLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderSizePixel=0,Image="rbxassetid://1427967925",Name="Outlines",Parent={2},Position=UDim2.new(0,-5,0,-5),ScaleType=1,Size=UDim2.new(1,10,1,10),SliceCenter=Rect.new(6,6,25,25),TileSize=UDim2.new(0,20,0,20),}},
			{16,"UIGradient",{Parent={15},Rotation=-30,Transparency=NumberSequence.new({NumberSequenceKeypoint.new(0,1,0),NumberSequenceKeypoint.new(1,1,0),}),}},
			{17,"UIGradient",{Parent={2},Rotation=-30,Transparency=NumberSequence.new({NumberSequenceKeypoint.new(0,1,0),NumberSequenceKeypoint.new(1,1,0),}),}},
		})
		Main.ShowGui(gui)
		local backGradient = gui.Main.UIGradient
		local outlinesGradient = gui.Main.Outlines.UIGradient
		local holderGradient = gui.Main.Holder.UIGradient
		local titleText = gui.Main.Holder.Title
		local descText = gui.Main.Holder.Desc
		local versionText = gui.Main.Version
		local versionGradient = versionText.UIGradient
		local creatorText = gui.Main.Creator
		local creatorGradient = creatorText.UIGradient
		local statusText = gui.Main.Holder.StatusText
		local progressBar = gui.Main.Holder.ProgressBar
		local tweenS = service.TweenService

		local renderStepped = service.RunService.RenderStepped
		local signalWait = renderStepped.wait
		local fastwait = function(s)
			if not s then return signalWait(renderStepped) end
			local start = tick()
			while tick() - start < s do signalWait(renderStepped) end
		end

		statusText.Text = initStatus

		local function tweenNumber(n,ti,func)
			local tweenVal = Instance.new("IntValue")
			tweenVal.Value = 0
			tweenVal.Changed:Connect(func)
			local tween = tweenS:Create(tweenVal,ti,{Value = n})
			tween:Play()
			tween.Completed:Connect(function()
				tweenVal:Destroy()
			end)
		end

		local ti = TweenInfo.new(0.4,Enum.EasingStyle.Quad,Enum.EasingDirection.Out)
		tweenNumber(100,ti,function(val)
			val = val/200
			local start = NumberSequenceKeypoint.new(0,0)
			local a1 = NumberSequenceKeypoint.new(val,0)
			local a2 = NumberSequenceKeypoint.new(math.min(0.5,val+math.min(0.05,val)),1)
			if a1.Time == a2.Time then a2 = a1 end
			local b1 = NumberSequenceKeypoint.new(1-val,0)
			local b2 = NumberSequenceKeypoint.new(math.max(0.5,1-val-math.min(0.05,val)),1)
			if b1.Time == b2.Time then b2 = b1 end
			local goal = NumberSequenceKeypoint.new(1,0)
			backGradient.Transparency = NumberSequence.new({start,a1,a2,b2,b1,goal})
			outlinesGradient.Transparency = NumberSequence.new({start,a1,a2,b2,b1,goal})
		end)

		fastwait(0.4)

		tweenNumber(100,ti,function(val)
			val = val/166.66
			local start = NumberSequenceKeypoint.new(0,0)
			local a1 = NumberSequenceKeypoint.new(val,0)
			local a2 = NumberSequenceKeypoint.new(val+0.01,1)
			local goal = NumberSequenceKeypoint.new(1,1)
			holderGradient.Transparency = NumberSequence.new({start,a1,a2,goal})
		end)

		tweenS:Create(titleText,ti,{Position = UDim2.new(0,60,0,15), TextTransparency = 0}):Play()
		tweenS:Create(descText,ti,{Position = UDim2.new(0,20,0,60), TextTransparency = 0}):Play()

		local function rightTextTransparency(obj)
			tweenNumber(100,ti,function(val)
				val = val/100
				local a1 = NumberSequenceKeypoint.new(1-val,0)
				local a2 = NumberSequenceKeypoint.new(math.max(0,1-val-0.01),1)
				if a1.Time == a2.Time then a2 = a1 end
				local start = NumberSequenceKeypoint.new(0,a1 == a2 and 0 or 1)
				local goal = NumberSequenceKeypoint.new(1,0)
				obj.Transparency = NumberSequence.new({start,a2,a1,goal})
			end)
		end
		rightTextTransparency(versionGradient)
		rightTextTransparency(creatorGradient)

		fastwait(0.9)

		local progressTI = TweenInfo.new(0.25,Enum.EasingStyle.Quad,Enum.EasingDirection.Out)

		tweenS:Create(statusText,progressTI,{Position = UDim2.new(0,20,0,120), TextTransparency = 0}):Play()
		tweenS:Create(progressBar,progressTI,{Position = UDim2.new(0,60,0,145), Size = UDim2.new(0,100,0,4)}):Play()

		fastwait(0.25)

		local function setProgress(text,n)
			statusText.Text = text
			tweenS:Create(progressBar.Bar,progressTI,{Size = UDim2.new(n,0,1,0)}):Play()
		end

		local function close()
			tweenS:Create(titleText,progressTI,{TextTransparency = 1}):Play()
			tweenS:Create(descText,progressTI,{TextTransparency = 1}):Play()
			tweenS:Create(versionText,progressTI,{TextTransparency = 1}):Play()
			tweenS:Create(creatorText,progressTI,{TextTransparency = 1}):Play()
			tweenS:Create(statusText,progressTI,{TextTransparency = 1}):Play()
			tweenS:Create(progressBar,progressTI,{BackgroundTransparency = 1}):Play()
			tweenS:Create(progressBar.Bar,progressTI,{BackgroundTransparency = 1}):Play()
			tweenS:Create(progressBar.ImageLabel,progressTI,{ImageTransparency = 1}):Play()

			tweenNumber(100,TweenInfo.new(0.4,Enum.EasingStyle.Back,Enum.EasingDirection.In),function(val)
				val = val/250
				local start = NumberSequenceKeypoint.new(0,0)
				local a1 = NumberSequenceKeypoint.new(0.6+val,0)
				local a2 = NumberSequenceKeypoint.new(math.min(1,0.601+val),1)
				if a1.Time == a2.Time then a2 = a1 end
				local goal = NumberSequenceKeypoint.new(1,a1 == a2 and 0 or 1)
				holderGradient.Transparency = NumberSequence.new({start,a1,a2,goal})
			end)

			fastwait(0.5)
			gui.Main.BackgroundTransparency = 1
			outlinesGradient.Rotation = 30

			tweenNumber(100,ti,function(val)
				val = val/100
				local start = NumberSequenceKeypoint.new(0,1)
				local a1 = NumberSequenceKeypoint.new(val,1)
				local a2 = NumberSequenceKeypoint.new(math.min(1,val+math.min(0.05,val)),0)
				if a1.Time == a2.Time then a2 = a1 end
				local goal = NumberSequenceKeypoint.new(1,a1 == a2 and 1 or 0)
				outlinesGradient.Transparency = NumberSequence.new({start,a1,a2,goal})
				holderGradient.Transparency = NumberSequence.new({start,a1,a2,goal})
			end)

			fastwait(0.45)
			gui:Destroy()
		end

		return {SetProgress = setProgress, Close = close}
	end

	Main.CreateApp = function(data)
		if Main.MenuApps[data.Name] then return end -- TODO: Handle conflict
		local control = {}

		local app = Main.AppTemplate:Clone()

		local iconIndex = data.Icon
		if data.IconMap and iconIndex then
			if type(iconIndex) == "number" then
				data.IconMap:Display(app.Main.Icon,iconIndex)
			elseif type(iconIndex) == "string" then
				data.IconMap:DisplayByKey(app.Main.Icon,iconIndex)
			end
		elseif type(iconIndex) == "string" then
			app.Main.Icon.Image = iconIndex
		else
			app.Main.Icon.Image = ""
		end

		local function updateState()
			app.Main.BackgroundTransparency = data.Open and 0 or (Lib.CheckMouseInGui(app.Main) and 0 or 1)
			app.Main.Highlight.Visible = data.Open
		end

		local function enable(silent)
			if data.Open then return end
			data.Open = true
			updateState()
			if not silent then
				if data.Window then data.Window:Show() end
				if data.OnClick then data.OnClick(data.Open) end
			end
		end

		local function disable(silent)
			if not data.Open then return end
			data.Open = false
			updateState()
			if not silent then
				if data.Window then data.Window:Hide() end
				if data.OnClick then data.OnClick(data.Open) end
			end
		end

		updateState()

		local ySize = service.TextService:GetTextSize(data.Name,14,Enum.Font.SourceSans,Vector2.new(62,999999)).Y
		app.Main.Size = UDim2.new(1,0,0,math.clamp(46+ySize,60,74))
		app.Main.AppName.Text = data.Name

		app.Main.InputBegan:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseMovement then
				app.Main.BackgroundTransparency = 0
				app.Main.BackgroundColor3 = Settings.Theme.ButtonHover
			end
		end)

		app.Main.InputEnded:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseMovement then
				app.Main.BackgroundTransparency = data.Open and 0 or 1
				app.Main.BackgroundColor3 = Settings.Theme.Button
			end
		end)

		app.Main.MouseButton1Click:Connect(function()
			if data.Open then disable() else enable() end
		end)

		local window = data.Window
		if window then
			window.OnActivate:Connect(function() enable(true) end)
			window.OnDeactivate:Connect(function() disable(true) end)
		end

		app.Visible = true
		app.Parent = Main.AppsContainer
		Main.AppsFrame.CanvasSize = UDim2.new(0,0,0,Main.AppsContainerGrid.AbsoluteCellCount.Y*82 + 8)

		control.Enable = enable
		control.Disable = disable
		Main.MenuApps[data.Name] = control
		return control
	end

	Main.SetMainGuiOpen = function(val)
		Main.MainGuiOpen = val

		Main.MainGui.OpenButton.Text = val and "X" or "Dex"
		if val then Main.MainGui.OpenButton.MainFrame.Visible = true end
		Main.MainGui.OpenButton.MainFrame:TweenSize(val and UDim2.new(0,224,0,200) or UDim2.new(0,0,0,0),Enum.EasingDirection.Out,Enum.EasingStyle.Quad,0.2,true)
		--Main.MainGui.OpenButton.BackgroundTransparency = val and 0 or (Lib.CheckMouseInGui(Main.MainGui.OpenButton) and 0 or 0.2)
		service.TweenService:Create(Main.MainGui.OpenButton,TweenInfo.new(0.2,Enum.EasingStyle.Quad,Enum.EasingDirection.Out),{BackgroundTransparency = val and 0 or (Lib.CheckMouseInGui(Main.MainGui.OpenButton) and 0 or 0.2)}):Play()

		if Main.MainGuiMouseEvent then Main.MainGuiMouseEvent:Disconnect() end

		if not val then
			local startTime = tick()
			Main.MainGuiCloseTime = startTime
			coroutine.wrap(function()
				Lib.FastWait(0.2)
				if not Main.MainGuiOpen and startTime == Main.MainGuiCloseTime then Main.MainGui.OpenButton.MainFrame.Visible = false end
			end)()
		else
			Main.MainGuiMouseEvent = service.UserInputService.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 and not Lib.CheckMouseInGui(Main.MainGui.OpenButton) and not Lib.CheckMouseInGui(Main.MainGui.OpenButton.MainFrame) then
					Main.SetMainGuiOpen(false)
				end
			end)
		end
	end

	Main.CreateMainGui = function()
		local gui = create({
			{1,"ScreenGui",{IgnoreGuiInset=true,Name="MainMenu",}},
			{2,"TextButton",{AnchorPoint=Vector2.new(0.5,0),AutoButtonColor=false,BackgroundColor3=Color3.new(0.17647059261799,0.17647059261799,0.17647059261799),BorderSizePixel=0,Font=4,Name="OpenButton",Parent={1},Position=UDim2.new(0.5,0,0,2),Size=UDim2.new(0,32,0,32),Text="Dex",TextColor3=Color3.new(1,1,1),TextSize=16,TextTransparency=0.20000000298023,}},
			{3,"UICorner",{CornerRadius=UDim.new(0,4),Parent={2},}},
			{4,"Frame",{AnchorPoint=Vector2.new(0.5,0),BackgroundColor3=Color3.new(0.17647059261799,0.17647059261799,0.17647059261799),ClipsDescendants=true,Name="MainFrame",Parent={2},Position=UDim2.new(0.5,0,1,-4),Size=UDim2.new(0,224,0,200),}},
			{5,"UICorner",{CornerRadius=UDim.new(0,4),Parent={4},}},
			{6,"Frame",{BackgroundColor3=Color3.new(0.20392157137394,0.20392157137394,0.20392157137394),Name="BottomFrame",Parent={4},Position=UDim2.new(0,0,1,-24),Size=UDim2.new(1,0,0,24),}},
			{7,"UICorner",{CornerRadius=UDim.new(0,4),Parent={6},}},
			{8,"Frame",{BackgroundColor3=Color3.new(0.20392157137394,0.20392157137394,0.20392157137394),BorderSizePixel=0,Name="CoverFrame",Parent={6},Size=UDim2.new(1,0,0,4),}},
			{9,"Frame",{BackgroundColor3=Color3.new(0.1294117718935,0.1294117718935,0.1294117718935),BorderSizePixel=0,Name="Line",Parent={8},Position=UDim2.new(0,0,0,-1),Size=UDim2.new(1,0,0,1),}},
			{10,"TextButton",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Settings",Parent={6},Position=UDim2.new(1,-48,0,0),Size=UDim2.new(0,24,1,0),Text="",TextColor3=Color3.new(1,1,1),TextSize=14,}},
			{11,"ImageLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Image="rbxassetid://6578871732",ImageTransparency=0.20000000298023,Name="Icon",Parent={10},Position=UDim2.new(0,4,0,4),Size=UDim2.new(0,16,0,16),}},
			{12,"TextButton",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Information",Parent={6},Position=UDim2.new(1,-24,0,0),Size=UDim2.new(0,24,1,0),Text="",TextColor3=Color3.new(1,1,1),TextSize=14,}},
			{13,"ImageLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Image="rbxassetid://6578933307",ImageTransparency=0.20000000298023,Name="Icon",Parent={12},Position=UDim2.new(0,4,0,4),Size=UDim2.new(0,16,0,16),}},
			{14,"ScrollingFrame",{Active=true,AnchorPoint=Vector2.new(0.5,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.1294117718935,0.1294117718935,0.1294117718935),BorderSizePixel=0,Name="AppsFrame",Parent={4},Position=UDim2.new(0.5,0,0,0),ScrollBarImageColor3=Color3.new(0,0,0),ScrollBarThickness=4,Size=UDim2.new(0,222,1,-25),}},
			{15,"Frame",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Name="Container",Parent={14},Position=UDim2.new(0,7,0,8),Size=UDim2.new(1,-14,0,2),}},
			{16,"UIGridLayout",{CellSize=UDim2.new(0,66,0,74),Parent={15},SortOrder=2,}},
			{17,"Frame",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Name="App",Parent={1},Size=UDim2.new(0,100,0,100),Visible=false,}},
			{18,"TextButton",{AutoButtonColor=false,BackgroundColor3=Color3.new(0.2352941185236,0.2352941185236,0.2352941185236),BorderSizePixel=0,Font=3,Name="Main",Parent={17},Size=UDim2.new(1,0,0,60),Text="",TextColor3=Color3.new(0,0,0),TextSize=14,}},
			{19,"ImageLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Image="rbxassetid://6579106223",ImageRectSize=Vector2.new(32,32),Name="Icon",Parent={18},Position=UDim2.new(0.5,-16,0,4),ScaleType=4,Size=UDim2.new(0,32,0,32),}},
			{20,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="AppName",Parent={18},Position=UDim2.new(0,2,0,38),Size=UDim2.new(1,-4,1,-40),Text="Explorer",TextColor3=Color3.new(1,1,1),TextSize=14,TextTransparency=0.10000000149012,TextTruncate=1,TextWrapped=true,TextYAlignment=0,}},
			{21,"Frame",{BackgroundColor3=Color3.new(0,0.66666668653488,1),BorderSizePixel=0,Name="Highlight",Parent={18},Position=UDim2.new(0,0,1,-2),Size=UDim2.new(1,0,0,2),}},
		})
		Main.MainGui = gui
		Main.AppsFrame = gui.OpenButton.MainFrame.AppsFrame
		Main.AppsContainer = Main.AppsFrame.Container
		Main.AppsContainerGrid = Main.AppsContainer.UIGridLayout
		Main.AppTemplate = gui.App
		Main.MainGuiOpen = false

		local openButton = gui.OpenButton
		openButton.BackgroundTransparency = 0.2
		openButton.MainFrame.Size = UDim2.new(0,0,0,0)
		openButton.MainFrame.Visible = false
		openButton.MouseButton1Click:Connect(function()
			Main.SetMainGuiOpen(not Main.MainGuiOpen)
		end)

		openButton.InputBegan:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseMovement then
				service.TweenService:Create(Main.MainGui.OpenButton,TweenInfo.new(0,Enum.EasingStyle.Quad,Enum.EasingDirection.Out),{BackgroundTransparency = 0}):Play()
			end
		end)

		openButton.InputEnded:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseMovement then
				service.TweenService:Create(Main.MainGui.OpenButton,TweenInfo.new(0,Enum.EasingStyle.Quad,Enum.EasingDirection.Out),{BackgroundTransparency = Main.MainGuiOpen and 0 or 0.2}):Play()
			end
		end)

		-- Create Main Apps
		Main.CreateApp({Name = "Explorer", IconMap = Main.LargeIcons, Icon = "Explorer", Open = true, Window = Explorer.Window})

		Main.CreateApp({Name = "Properties", IconMap = Main.LargeIcons, Icon = "Properties", Open = true, Window = Properties.Window})

		Main.CreateApp({Name = "Script Viewer", IconMap = Main.LargeIcons, Icon = "Script_Viewer", Window = ScriptViewer.Window})
		
		local cptsOnMouseClick = nil
		Main.CreateApp({Name = "Click part to select", IconMap = Main.LargeIcons, Icon = 6, OnClick = function(callback)
			if callback then
				local mouse = Main.Mouse
				cptsOnMouseClick = mouse.Button1Down:Connect(function()
					--pcall(function()
						local object = mouse.Target
						if nodes[object] then
							selection:Set(object)
							Explorer.ViewNode(object)
						end
					--end)
				end)
			else if cptsOnMouseClick ~= nil then cptsOnMouseClick:Disconnect() cptsOnMouseClick = nil end end
		end})
		
		Lib.ShowGui(gui)
	end

	Main.SetupFilesystem = function()
		if not env.writefile or not env.makefolder then return end

		local writefile,makefolder = env.writefile,env.makefolder

		makefolder("dex")
		makefolder("dex/assets")
		makefolder("dex/saved")
		makefolder("dex/plugins")
		makefolder("dex/ModuleCache")
	end

	Main.LocalDepsUpToDate = function()
		return Main.DepsVersionData and Main.ClientVersion == Main.DepsVersionData[1]
	end

	Main.Init = function()
		Main.Elevated = pcall(function() local a = game:GetService("CoreGui"):GetFullName() end)
		Main.InitEnv()
		Main.LoadSettings()
		Main.SetupFilesystem()

		-- Load Lib
		local intro = Main.CreateIntro("Initializing Library")
		Lib = Main.LoadModule("Lib")
		Lib.FastWait()

		-- Init other stuff
		--Main.IncompatibleTest()

		-- Init icons
		Main.MiscIcons = Lib.IconMap.new("rbxassetid://6511490623",256,256,16,16)
		Main.MiscIcons:SetDict({
			Reference = 0,             Cut = 1,                         Cut_Disabled = 2,      Copy = 3,               Copy_Disabled = 4,    Paste = 5,                Paste_Disabled = 6,
			Delete = 7,                Delete_Disabled = 8,             Group = 9,             Group_Disabled = 10,    Ungroup = 11,         Ungroup_Disabled = 12,    TeleportTo = 13,
			Rename = 14,               JumpToParent = 15,               ExploreData = 16,      Save = 17,              CallFunction = 18,    CallRemote = 19,          Undo = 20,
			Undo_Disabled = 21,        Redo = 22,                       Redo_Disabled = 23,    Expand_Over = 24,       Expand = 25,          Collapse_Over = 26,       Collapse = 27,
			SelectChildren = 28,       SelectChildren_Disabled = 29,    InsertObject = 30,     ViewScript = 31,        AddStar = 32,         RemoveStar = 33,          Script_Disabled = 34,
			LocalScript_Disabled = 35, Play = 36,                       Pause = 37,            Rename_Disabled = 38
		})
		Main.LargeIcons = Lib.IconMap.new("rbxassetid://6579106223",256,256,32,32)
		Main.LargeIcons:SetDict({
			Explorer = 0, Properties = 1, Script_Viewer = 2,
		})

		-- Fetch version if needed
		intro.SetProgress("Fetching Roblox Version",0.2)
		if Main.Elevated then
			local fileVer = Lib.ReadFile("dex/deps_version.dat")
			Main.ClientVersion = Version()
			if fileVer then
				Main.DepsVersionData = string.split(fileVer,"\n")
				if Main.LocalDepsUpToDate() then
					Main.RobloxVersion = Main.DepsVersionData[2]
				end
			end
			Main.RobloxVersion = Main.RobloxVersion or "version-d0e8cfcd943d4ae2"
		end

		-- Fetch external deps
		intro.SetProgress("Fetching API",0.35)
		API = Main.FetchAPI()
		Lib.FastWait()
		intro.SetProgress("Fetching RMD",0.5)
		RMD = Main.FetchRMD()
		Lib.FastWait()

		-- Save external deps locally if needed
		if Main.Elevated and env.writefile and not Main.LocalDepsUpToDate() then
			env.writefile("dex/deps_version.dat",Main.ClientVersion.."\n"..Main.RobloxVersion)
			env.writefile("dex/rbx_api.dat",Main.RawAPI)
			env.writefile("dex/rbx_rmd.dat",Main.RawRMD)
		end

		-- Load other modules
		intro.SetProgress("Loading Modules",0.75)
		Main.AppControls.Lib.InitDeps(Main.GetInitDeps()) -- Missing deps now available
		Main.LoadModules()
		Lib.FastWait()

		-- Init other modules
		intro.SetProgress("Initializing Modules",0.9)
		Explorer.Init()
		Properties.Init()
		ScriptViewer.Init()
		Lib.FastWait()

		-- Done
		intro.SetProgress("Complete",1)
		coroutine.wrap(function()
			Lib.FastWait(0.25)
			intro.Close()
		end)()

		-- Init window system, create main menu, show explorer and properties
		Lib.Window.Init()
		Main.CreateMainGui()
		Explorer.Window:Show({Align = "right", Pos = 1, Size = 0.5, Silent = true})
		Properties.Window:Show({Align = "right", Pos = 2, Size = 0.5, Silent = true})
		Lib.DeferFunc(function() Lib.Window.ToggleSide("right") end)
	end

	return Main
end)()

-- Start
Main.Init()

--for i,v in pairs(Main.MissingEnv) do print(i,v) end
